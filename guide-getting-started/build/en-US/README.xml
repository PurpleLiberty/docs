<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE book [
<!ENTITY % sgml.features "IGNORE">
<!ENTITY % xml.features "INCLUDE">
<!ENTITY % DOCBOOK_ENTS PUBLIC "-//OASIS//ENTITIES DocBook Character Entities V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/dbcentx.mod">
%DOCBOOK_ENTS;
]>
<?asciidoc-toc?><?asciidoc-numbered?><book xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0">
<info>
<title>Deploying and packaging applications</title><subtitle>Open Liberty documentation resources for Red Hat Runtimes</subtitle>

<date>2019-10-11</date>
<productname>Open Liberty</productname>
<productnumber>19.0.0.9</productnumber>
<abstract>
  <para>These topics provide a brief introduction to Open Liberty and links to in-depth documentation resources.</para>
</abstract>
<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="Common_Content/Legal_Notice.xml"/>
</info>
<preface>
<title>Preface</title>
<note role="hidden">
<simpara>This repository contains the guide documentation source. To view the guide in published form, view it on the <link xlink:href="https://openliberty.io/guides/getting-started.html">Open Liberty website</link>.</simpara>
</note>
<simpara>Learn how to deploy and update an application on Open Liberty with Maven and Docker.</simpara>
</preface>
<chapter xml:id="what_you_ll_learn" remap="_what_you_ll_learn">
<title>What you’ll learn</title>
<simpara>You will learn how to run and update a simple REST microservice on an Open Liberty server.
You will use Maven throughout the guide to build and deploy the microservice as well as
to interact with the running server instance.</simpara>
<simpara>Open Liberty is an application server designed for the cloud. It’s small, lightweight,
and designed with modern cloud-native application development in mind. It supports the
full MicroProfile and Java EE APIs and is composable, meaning that you can use only the
features that you need, keeping the server lightweight, which is great for microservices.
It also deploys to every major cloud platform, including Docker, Kubernetes, and Cloud
Foundry.</simpara>
<simpara>Maven is an automation build tool that provides an efficient way to develop Java applications.
Using Maven, you will build a simple microservice, called <literal>system</literal>, that collects basic
system properties from your laptop and displays them on an endpoint that you can access
in your web browser. You will then make server configuration and code changes and see how
they are picked up by a running server. You’ll also explore how to package your application
with the server runtime so that it can be deployed anywhere in one go.</simpara>
<simpara>Finally, you will package the application along with the server configuration into a Docker
image and run that image as a container.</simpara>
<simpara role="command"><link xlink:href="https://raw.githubusercontent.com/OpenLiberty/guides-common/master/gitclone.adoc">https://raw.githubusercontent.com/OpenLiberty/guides-common/master/gitclone.adoc</link></simpara>
</chapter>
<chapter xml:id="building_and_running_the_application" remap="_building_and_running_the_application">
<title>Building and running the application</title>
<simpara>Your application is configured to be built with Maven. Every Maven-configured project
contains a <literal role="hotspot">pom.xml</literal> file, which defines the project configuration, dependencies, plug-ins,
and so on.</simpara>
<simpara>Navigate to the <literal>start</literal> directory where your <literal role="hotspot">pom.xml</literal> file is located. Your <literal>pom.xml</literal> file
is configured to include the <literal role="hotspot=168-190">liberty-maven-plugin</literal>, which allows
you to install applications into Open Liberty as well as manage the server instances.</simpara>
<simpara>pom.xml</simpara>
<programlisting role="code_column" language="XML" linenumbering="numbered">&lt;?xml version='1.0' encoding='utf-8'?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;

    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;parent&gt;
        &lt;groupId&gt;net.wasdev.wlp.maven.parent&lt;/groupId&gt;
        &lt;artifactId&gt;liberty-maven-app-parent&lt;/artifactId&gt;
        &lt;version&gt;RELEASE&lt;/version&gt;
    &lt;/parent&gt;

    &lt;groupId&gt;io.openliberty.guides&lt;/groupId&gt;
    &lt;artifactId&gt;getting-started&lt;/artifactId&gt;
    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
    &lt;packaging&gt;war&lt;/packaging&gt;

    &lt;properties&gt;
        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;
        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;
        &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;
        &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;
        &lt;!-- Plugins --&gt;
        &lt;version.maven-war-plugin&gt;3.2.2&lt;/version.maven-war-plugin&gt;
        &lt;version.maven-surefire-plugin&gt;3.0.0-M1&lt;/version.maven-surefire-plugin&gt;
        &lt;version.maven-failsafe-plugin&gt;3.0.0-M1&lt;/version.maven-failsafe-plugin&gt;
        &lt;!-- OpenLiberty runtime --&gt;
        &lt;version.openliberty-runtime&gt;RELEASE&lt;/version.openliberty-runtime&gt;
        &lt;http.port&gt;9080&lt;/http.port&gt;
        &lt;https.port&gt;9443&lt;/https.port&gt;
        &lt;packaging.type&gt;usr&lt;/packaging.type&gt;
        &lt;app.name&gt;${project.artifactId}&lt;/app.name&gt;
        &lt;package.file&gt;${project.build.directory}/${app.name}.zip&lt;/package.file&gt;
    &lt;/properties&gt;

    &lt;!-- Profiles for temporarily switching packaging types --&gt;
    &lt;profiles&gt;
        &lt;profile&gt;
            &lt;id&gt;runnable-package&lt;/id&gt;
            &lt;properties&gt;
                &lt;package.file&gt;
                    ${project.build.directory}/${app.name}.jar
                &lt;/package.file&gt;
                &lt;packaging.type&gt;runnable&lt;/packaging.type&gt;
            &lt;/properties&gt;
        &lt;/profile&gt;
        &lt;profile&gt;
            &lt;id&gt;minify-runnable-package&lt;/id&gt;
            &lt;properties&gt;
                &lt;package.file&gt;
                    ${project.build.directory}/${app.name}.jar
                &lt;/package.file&gt;
                &lt;packaging.type&gt;minify,runnable&lt;/packaging.type&gt;
            &lt;/properties&gt;
        &lt;/profile&gt;
    &lt;/profiles&gt;

    &lt;dependencyManagement&gt;
        &lt;dependencies&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;io.openliberty.features&lt;/groupId&gt;
                &lt;artifactId&gt;features-bom&lt;/artifactId&gt;
                &lt;version&gt;RELEASE&lt;/version&gt;
                &lt;type&gt;pom&lt;/type&gt;
                &lt;scope&gt;import&lt;/scope&gt;
            &lt;/dependency&gt;
        &lt;/dependencies&gt;
    &lt;/dependencyManagement&gt;

    &lt;dependencies&gt;
        &lt;!-- Open Liberty Features --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;io.openliberty.features&lt;/groupId&gt;
            &lt;artifactId&gt;jaxrs-2.1&lt;/artifactId&gt;
            &lt;type&gt;esa&lt;/type&gt;
            &lt;scope&gt;provided&lt;/scope&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;io.openliberty.features&lt;/groupId&gt;
            &lt;artifactId&gt;jsonp-1.1&lt;/artifactId&gt;
            &lt;type&gt;esa&lt;/type&gt;
            &lt;scope&gt;provided&lt;/scope&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;io.openliberty.features&lt;/groupId&gt;
            &lt;artifactId&gt;cdi-2.0&lt;/artifactId&gt;
            &lt;type&gt;esa&lt;/type&gt;
            &lt;scope&gt;provided&lt;/scope&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;io.openliberty.features&lt;/groupId&gt;
            &lt;artifactId&gt;mpMetrics-2.0&lt;/artifactId&gt;
            &lt;type&gt;esa&lt;/type&gt;
            &lt;scope&gt;provided&lt;/scope&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;io.openliberty.features&lt;/groupId&gt;
            &lt;artifactId&gt;mpHealth-2.0&lt;/artifactId&gt;
            &lt;type&gt;esa&lt;/type&gt;
            &lt;scope&gt;provided&lt;/scope&gt;
        &lt;/dependency&gt;
        &lt;!-- For tests --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;junit&lt;/groupId&gt;
            &lt;artifactId&gt;junit&lt;/artifactId&gt;
            &lt;version&gt;4.12&lt;/version&gt;
            &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.apache.cxf&lt;/groupId&gt;
            &lt;artifactId&gt;cxf-rt-rs-client&lt;/artifactId&gt;
            &lt;version&gt;3.2.6&lt;/version&gt;
            &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.apache.cxf&lt;/groupId&gt;
            &lt;artifactId&gt;cxf-rt-rs-extension-providers&lt;/artifactId&gt;
            &lt;version&gt;3.2.6&lt;/version&gt;
            &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.glassfish&lt;/groupId&gt;
            &lt;artifactId&gt;javax.json&lt;/artifactId&gt;
            &lt;version&gt;1.0.4&lt;/version&gt;
            &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;
        &lt;!-- Support for JDK 9 and above --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;javax.xml.bind&lt;/groupId&gt;
            &lt;artifactId&gt;jaxb-api&lt;/artifactId&gt;
            &lt;version&gt;2.3.1&lt;/version&gt;
	    &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.sun.xml.bind&lt;/groupId&gt;
            &lt;artifactId&gt;jaxb-core&lt;/artifactId&gt;
            &lt;version&gt;2.3.0.1&lt;/version&gt;
	    &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.sun.xml.bind&lt;/groupId&gt;
            &lt;artifactId&gt;jaxb-impl&lt;/artifactId&gt;
            &lt;version&gt;2.3.2&lt;/version&gt;
	    &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;javax.activation&lt;/groupId&gt;
            &lt;artifactId&gt;activation&lt;/artifactId&gt;
            &lt;version&gt;1.1.1&lt;/version&gt;
	    &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;finalName&gt;${project.artifactId}&lt;/finalName&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                &lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt;
                &lt;version&gt;${version.maven-war-plugin}&lt;/version&gt;
                &lt;configuration&gt;
                    &lt;failOnMissingWebXml&gt;false&lt;/failOnMissingWebXml&gt;
                    &lt;packagingExcludes&gt;pom.xml&lt;/packagingExcludes&gt;
                &lt;/configuration&gt;
            &lt;/plugin&gt;
            &lt;!-- Enable liberty-maven plugin --&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;net.wasdev.wlp.maven.plugins&lt;/groupId&gt;
                &lt;artifactId&gt;liberty-maven-plugin&lt;/artifactId&gt;
                &lt;configuration&gt;
                    &lt;assemblyArtifact&gt;
                        &lt;groupId&gt;io.openliberty&lt;/groupId&gt;
                        &lt;artifactId&gt;openliberty-runtime&lt;/artifactId&gt;
                        &lt;version&gt;${version.openliberty-runtime}&lt;/version&gt;
                        &lt;type&gt;zip&lt;/type&gt;
                    &lt;/assemblyArtifact&gt;
                    &lt;serverName&gt;GettingStartedServer&lt;/serverName&gt;
                    &lt;stripVersion&gt;true&lt;/stripVersion&gt;
                    &lt;configFile&gt;src/main/liberty/config/server.xml&lt;/configFile&gt;
                    &lt;looseApplication&gt;true&lt;/looseApplication&gt;
                    &lt;packageFile&gt;${package.file}&lt;/packageFile&gt;
                    &lt;include&gt;${packaging.type}&lt;/include&gt;
                    &lt;bootstrapProperties&gt;
                        &lt;default.http.port&gt;${http.port}&lt;/default.http.port&gt;
                        &lt;default.https.port&gt;${https.port}&lt;/default.https.port&gt;
                        &lt;app.context.root&gt;${app.name}&lt;/app.context.root&gt;
                    &lt;/bootstrapProperties&gt;
                &lt;/configuration&gt;
            &lt;/plugin&gt;
            &lt;!-- Plugin to run unit tests --&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;
                &lt;version&gt;${version.maven-surefire-plugin}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;phase&gt;test&lt;/phase&gt;
                        &lt;id&gt;default-test&lt;/id&gt;
                        &lt;configuration&gt;
                            &lt;excludes&gt;
                                &lt;exclude&gt;**/it/**&lt;/exclude&gt;
                            &lt;/excludes&gt;
                            &lt;reportsDirectory&gt;
                                ${project.build.directory}/test-reports/unit
                            &lt;/reportsDirectory&gt;
                        &lt;/configuration&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
                &lt;configuration&gt;
                    &lt;skipTests&gt;${skipTests}&lt;/skipTests&gt;
                &lt;/configuration&gt;
            &lt;/plugin&gt;
            &lt;!-- Plugin to run functional tests --&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                &lt;artifactId&gt;maven-failsafe-plugin&lt;/artifactId&gt;
                &lt;version&gt;${version.maven-failsafe-plugin}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;phase&gt;integration-test&lt;/phase&gt;
                        &lt;id&gt;integration-test&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;integration-test&lt;/goal&gt;
                        &lt;/goals&gt;
                        &lt;configuration&gt;
                            &lt;includes&gt;
                                &lt;include&gt;**/it/**&lt;/include&gt;
                            &lt;/includes&gt;
                            &lt;systemPropertyVariables&gt;
                                &lt;liberty.test.port&gt;${http.port}&lt;/liberty.test.port&gt;
                                &lt;war.name&gt;${app.name}&lt;/war.name&gt;
                            &lt;/systemPropertyVariables&gt;
                        &lt;/configuration&gt;
                    &lt;/execution&gt;
                    &lt;execution&gt;
                        &lt;id&gt;verify-results&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;verify&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
                &lt;configuration&gt;
                    &lt;summaryFile&gt;
                        ${project.build.directory}/test-reports/it/failsafe-summary.xml
                    &lt;/summaryFile&gt;
                    &lt;reportsDirectory&gt;
                        ${project.build.directory}/test-reports/it
                    &lt;/reportsDirectory&gt;
                &lt;/configuration&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;</programlisting>
<simpara>To begin, build the <literal>system</literal> microservice that is provided and deploy it to Open Liberty
by running the Maven <literal>install</literal> phase and the Maven <literal>liberty:run-server</literal> goal from the
<literal>start</literal> directory:</simpara>
<screen role="command">mvn install liberty:run-server</screen>
<simpara>The <literal>mvn</literal> command initiates a Maven build, during which the <literal>target</literal> directory is created
to store all build-related files.</simpara>
<simpara>The <literal>install</literal> argument specifies the Maven <literal>install</literal> phase. During this phase, the
application is built and packaged into a <literal>.war</literal> file, an Open Liberty server runtime is
downloaded and installed into the <literal>target/liberty/wlp</literal> directory, a server instance is
created and configured in the <literal>target/liberty/wlp/usr/servers/GettingStartedServer</literal>
directory, and the application is installed into that server via <link xlink:href="https://www.ibm.com/support/knowledgecenter/en/SSEQTP_liberty/com.ibm.websphere.wlp.doc/ae/rwlp_loose_applications.html">loose config</link>.</simpara>
<simpara>The <literal>liberty:run-server</literal> argument specifies the Open Liberty <literal>run-server</literal> goal, which
starts an Open Liberty server instance in the foreground.</simpara>
<simpara>For more information on the Liberty Maven plug-in, see its <link xlink:href="https://github.com/WASdev/ci.maven">GitHub repository</link>.</simpara>
<simpara>When the server begins starting up, various messages display in your active shell. Wait
for the following message, which indicates that the server startup is complete:</simpara>
<screen role="no_copy">[INFO] [AUDIT] CWWKF0011I: The server GettingStartedServer is ready to run a smarter planet.</screen>
<simpara>To access the <literal>system</literal> microservice, visit the <link xlink:href="http://localhost:9080/system/properties">http://localhost:9080/system/properties</link> URL,
and you’ll see a list of the various system properties of your JVM:</simpara>
<programlisting role="no_copy" language="JSON" linenumbering="unnumbered">{
    "os.name": "Mac OS X",
    "java.version": "1.8.0_151",
    ...
}</programlisting>
<simpara>Later, when you need to stop the server, simply press <literal>CTRL+C</literal> in the shell session where
you ran the server, or run the <literal>liberty:stop-server</literal> goal from the <literal>start</literal> directory in
another shell session:</simpara>
<screen role="command">mvn liberty:stop-server</screen>
</chapter>
<chapter xml:id="updating_the_server_configuration_without_restarting_the_server" remap="_updating_the_server_configuration_without_restarting_the_server">
<title>Updating the server configuration without restarting the server</title>
<simpara>When you update the server configuration files, you can run the <literal>mvn package</literal> command to
invoke the Maven <literal>package</literal> phase that executes various Maven goals that repackage the
server.</simpara>
<simpara>Try updating the server configuration while the server is running. If you stopped the
server, start it again before you proceed. The <literal>system</literal> microservice does not currently
include health monitoring to report whether the server and the microservice that it runs
are healthy. You can add health reports with the MicroProfile Health feature, which adds
a <literal>/health</literal> endpoint to your application. If you try to access this endpoint now at the
<link xlink:href="http://localhost:9080/health/">http://localhost:9080/health/</link> URL, you see a 404 error because the <literal>/health</literal> endpoint
does not yet exist:</simpara>
<screen role="no_copy">Error 404: java.io.FileNotFoundException: SRVE0190E: File not found: /health</screen>
<simpara>To add the MicroProfile Health feature to the server, include the <literal role="hotspot=7">mpHealth</literal>
feature in the <literal role="hotspot">server.xml</literal>.</simpara>
<screen role="code_command hotspot"><emphasis role="marked">Replace the server configuration file.</emphasis>
<literal>src/main/liberty/config/server.xml</literal></screen>
<simpara>server.xml</simpara>
<programlisting role="code_column" language="xml" linenumbering="numbered">&lt;server description="Sample Liberty server"&gt;
    &lt;featureManager&gt;
        &lt;feature&gt;jaxrs-2.1&lt;/feature&gt;
        &lt;feature&gt;jsonp-1.1&lt;/feature&gt;
        &lt;feature&gt;cdi-2.0&lt;/feature&gt;
        &lt;feature&gt;mpMetrics-2.0&lt;/feature&gt;
        &lt;feature&gt;mpHealth-2.0&lt;/feature&gt;
        &lt;feature&gt;mpConfig-1.3&lt;/feature&gt;
    &lt;/featureManager&gt;

    &lt;applicationManager autoExpand="true" /&gt;
    &lt;quickStartSecurity userName="admin" userPassword="adminpwd" /&gt;
    &lt;keyStore id="defaultKeyStore" password="mpKeystore" /&gt;
    &lt;httpEndpoint host="*" httpPort="${default.http.port}"
        httpsPort="${default.https.port}" id="defaultHttpEndpoint"/&gt;

    &lt;variable name="io_openliberty_guides_system_inMaintenance" value="false"/&gt;

    &lt;webApplication location="getting-started.war" contextRoot="/"/&gt;
&lt;/server&gt;</programlisting>
<simpara>Next, open a new shell session, navigate to the <literal>start</literal> directory, and repackage the server:</simpara>
<screen role="command">mvn package</screen>
<simpara>When enabled, the <literal role="hotspot=7">mpHealth</literal> feature automatically adds a <literal>/health</literal> endpoint
to the application. You can see the server being updated in the server log that’s
displayed in your first shell session:</simpara>
<screen role="no_copy">[INFO] [AUDIT] CWWKG0016I: Starting server configuration update.
[INFO] [AUDIT] CWWKT0017I: Web application removed (default_host): http://foo:9080/
[INFO] [AUDIT] CWWKZ0009I: The application io.openliberty.guides.getting-started has stopped successfully.
[INFO] [AUDIT] CWWKG0017I: The server configuration was successfully updated in 0.284 seconds.
[INFO] [AUDIT] CWWKT0016I: Web application available (default_host): http://foo:9080/health/
[INFO] [AUDIT] CWWKF0012I: The server installed the following features: [mpHealth-1.0].
[INFO] [AUDIT] CWWKF0008I: Feature update completed in 0.285 seconds.
[INFO] [AUDIT] CWWKT0016I: Web application available (default_host): http://foo:9080/
[INFO] [AUDIT] CWWKZ0003I: The application io.openliberty.guides.getting-started updated in 0.173 seconds.</screen>
<simpara>Try to access the <literal>/health</literal> endpoint again by visiting the <link xlink:href="http://localhost:9080/health">http://localhost:9080/health</link>
URL. This time you’ll see the following JSON:</simpara>
<programlisting role="no_copy" language="JSON" linenumbering="unnumbered">{
    "checks":[],
    "outcome":"UP"
}</programlisting>
<simpara>You now have a means of verifying if your server is up and running.</simpara>
</chapter>
<chapter xml:id="updating_the_source_code_without_restarting_the_server" remap="_updating_the_source_code_without_restarting_the_server">
<title>Updating the source code without restarting the server</title>
<simpara>The JAX-RS application that contains your <literal>system</literal> microservice is configured as a loose
application, meaning that it runs in a server from its <literal>.class</literal> file and other artifacts.
Open Liberty automatically monitors these artifacts, and whenever they are updated, it
updates the running server without the need for the server to be restarted.</simpara>
<simpara>Take a look at your <literal role="hotspot file=0">pom.xml</literal> file.</simpara>
<simpara>The loose application support is enabled with the <literal role="hotspot=181 file=0">&lt;looseApplication/&gt;</literal>
element in the <literal role="hotspot=168-190 file=0">liberty-maven-plugin</literal> plug-in.</simpara>
<simpara>pom.xml</simpara>
<programlisting role="code_column" language="XML" linenumbering="numbered">&lt;?xml version='1.0' encoding='utf-8'?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;

    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;parent&gt;
        &lt;groupId&gt;net.wasdev.wlp.maven.parent&lt;/groupId&gt;
        &lt;artifactId&gt;liberty-maven-app-parent&lt;/artifactId&gt;
        &lt;version&gt;RELEASE&lt;/version&gt;
    &lt;/parent&gt;

    &lt;groupId&gt;io.openliberty.guides&lt;/groupId&gt;
    &lt;artifactId&gt;getting-started&lt;/artifactId&gt;
    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
    &lt;packaging&gt;war&lt;/packaging&gt;

    &lt;properties&gt;
        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;
        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;
        &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;
        &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;
        &lt;!-- Plugins --&gt;
        &lt;version.maven-war-plugin&gt;3.2.2&lt;/version.maven-war-plugin&gt;
        &lt;version.maven-surefire-plugin&gt;3.0.0-M1&lt;/version.maven-surefire-plugin&gt;
        &lt;version.maven-failsafe-plugin&gt;3.0.0-M1&lt;/version.maven-failsafe-plugin&gt;
        &lt;!-- OpenLiberty runtime --&gt;
        &lt;version.openliberty-runtime&gt;RELEASE&lt;/version.openliberty-runtime&gt;
        &lt;http.port&gt;9080&lt;/http.port&gt;
        &lt;https.port&gt;9443&lt;/https.port&gt;
        &lt;packaging.type&gt;usr&lt;/packaging.type&gt;
        &lt;app.name&gt;${project.artifactId}&lt;/app.name&gt;
        &lt;package.file&gt;${project.build.directory}/${app.name}.zip&lt;/package.file&gt;
    &lt;/properties&gt;

    &lt;!-- Profiles for temporarily switching packaging types --&gt;
    &lt;profiles&gt;
        &lt;profile&gt;
            &lt;id&gt;runnable-package&lt;/id&gt;
            &lt;properties&gt;
                &lt;package.file&gt;
                    ${project.build.directory}/${app.name}.jar
                &lt;/package.file&gt;
                &lt;packaging.type&gt;runnable&lt;/packaging.type&gt;
            &lt;/properties&gt;
        &lt;/profile&gt;
        &lt;profile&gt;
            &lt;id&gt;minify-runnable-package&lt;/id&gt;
            &lt;properties&gt;
                &lt;package.file&gt;
                    ${project.build.directory}/${app.name}.jar
                &lt;/package.file&gt;
                &lt;packaging.type&gt;minify,runnable&lt;/packaging.type&gt;
            &lt;/properties&gt;
        &lt;/profile&gt;
    &lt;/profiles&gt;

    &lt;dependencyManagement&gt;
        &lt;dependencies&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;io.openliberty.features&lt;/groupId&gt;
                &lt;artifactId&gt;features-bom&lt;/artifactId&gt;
                &lt;version&gt;RELEASE&lt;/version&gt;
                &lt;type&gt;pom&lt;/type&gt;
                &lt;scope&gt;import&lt;/scope&gt;
            &lt;/dependency&gt;
        &lt;/dependencies&gt;
    &lt;/dependencyManagement&gt;

    &lt;dependencies&gt;
        &lt;!-- Open Liberty Features --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;io.openliberty.features&lt;/groupId&gt;
            &lt;artifactId&gt;jaxrs-2.1&lt;/artifactId&gt;
            &lt;type&gt;esa&lt;/type&gt;
            &lt;scope&gt;provided&lt;/scope&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;io.openliberty.features&lt;/groupId&gt;
            &lt;artifactId&gt;jsonp-1.1&lt;/artifactId&gt;
            &lt;type&gt;esa&lt;/type&gt;
            &lt;scope&gt;provided&lt;/scope&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;io.openliberty.features&lt;/groupId&gt;
            &lt;artifactId&gt;cdi-2.0&lt;/artifactId&gt;
            &lt;type&gt;esa&lt;/type&gt;
            &lt;scope&gt;provided&lt;/scope&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;io.openliberty.features&lt;/groupId&gt;
            &lt;artifactId&gt;mpMetrics-2.0&lt;/artifactId&gt;
            &lt;type&gt;esa&lt;/type&gt;
            &lt;scope&gt;provided&lt;/scope&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;io.openliberty.features&lt;/groupId&gt;
            &lt;artifactId&gt;mpHealth-2.0&lt;/artifactId&gt;
            &lt;type&gt;esa&lt;/type&gt;
            &lt;scope&gt;provided&lt;/scope&gt;
        &lt;/dependency&gt;
        &lt;!-- For tests --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;junit&lt;/groupId&gt;
            &lt;artifactId&gt;junit&lt;/artifactId&gt;
            &lt;version&gt;4.12&lt;/version&gt;
            &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.apache.cxf&lt;/groupId&gt;
            &lt;artifactId&gt;cxf-rt-rs-client&lt;/artifactId&gt;
            &lt;version&gt;3.2.6&lt;/version&gt;
            &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.apache.cxf&lt;/groupId&gt;
            &lt;artifactId&gt;cxf-rt-rs-extension-providers&lt;/artifactId&gt;
            &lt;version&gt;3.2.6&lt;/version&gt;
            &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.glassfish&lt;/groupId&gt;
            &lt;artifactId&gt;javax.json&lt;/artifactId&gt;
            &lt;version&gt;1.0.4&lt;/version&gt;
            &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;
        &lt;!-- Support for JDK 9 and above --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;javax.xml.bind&lt;/groupId&gt;
            &lt;artifactId&gt;jaxb-api&lt;/artifactId&gt;
            &lt;version&gt;2.3.1&lt;/version&gt;
	    &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.sun.xml.bind&lt;/groupId&gt;
            &lt;artifactId&gt;jaxb-core&lt;/artifactId&gt;
            &lt;version&gt;2.3.0.1&lt;/version&gt;
	    &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.sun.xml.bind&lt;/groupId&gt;
            &lt;artifactId&gt;jaxb-impl&lt;/artifactId&gt;
            &lt;version&gt;2.3.2&lt;/version&gt;
	    &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;javax.activation&lt;/groupId&gt;
            &lt;artifactId&gt;activation&lt;/artifactId&gt;
            &lt;version&gt;1.1.1&lt;/version&gt;
	    &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;finalName&gt;${project.artifactId}&lt;/finalName&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                &lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt;
                &lt;version&gt;${version.maven-war-plugin}&lt;/version&gt;
                &lt;configuration&gt;
                    &lt;failOnMissingWebXml&gt;false&lt;/failOnMissingWebXml&gt;
                    &lt;packagingExcludes&gt;pom.xml&lt;/packagingExcludes&gt;
                &lt;/configuration&gt;
            &lt;/plugin&gt;
            &lt;!-- Enable liberty-maven plugin --&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;net.wasdev.wlp.maven.plugins&lt;/groupId&gt;
                &lt;artifactId&gt;liberty-maven-plugin&lt;/artifactId&gt;
                &lt;configuration&gt;
                    &lt;assemblyArtifact&gt;
                        &lt;groupId&gt;io.openliberty&lt;/groupId&gt;
                        &lt;artifactId&gt;openliberty-runtime&lt;/artifactId&gt;
                        &lt;version&gt;${version.openliberty-runtime}&lt;/version&gt;
                        &lt;type&gt;zip&lt;/type&gt;
                    &lt;/assemblyArtifact&gt;
                    &lt;serverName&gt;GettingStartedServer&lt;/serverName&gt;
                    &lt;stripVersion&gt;true&lt;/stripVersion&gt;
                    &lt;configFile&gt;src/main/liberty/config/server.xml&lt;/configFile&gt;
                    &lt;looseApplication&gt;true&lt;/looseApplication&gt;
                    &lt;packageFile&gt;${package.file}&lt;/packageFile&gt;
                    &lt;include&gt;${packaging.type}&lt;/include&gt;
                    &lt;bootstrapProperties&gt;
                        &lt;default.http.port&gt;${http.port}&lt;/default.http.port&gt;
                        &lt;default.https.port&gt;${https.port}&lt;/default.https.port&gt;
                        &lt;app.context.root&gt;${app.name}&lt;/app.context.root&gt;
                    &lt;/bootstrapProperties&gt;
                &lt;/configuration&gt;
            &lt;/plugin&gt;
            &lt;!-- Plugin to run unit tests --&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;
                &lt;version&gt;${version.maven-surefire-plugin}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;phase&gt;test&lt;/phase&gt;
                        &lt;id&gt;default-test&lt;/id&gt;
                        &lt;configuration&gt;
                            &lt;excludes&gt;
                                &lt;exclude&gt;**/it/**&lt;/exclude&gt;
                            &lt;/excludes&gt;
                            &lt;reportsDirectory&gt;
                                ${project.build.directory}/test-reports/unit
                            &lt;/reportsDirectory&gt;
                        &lt;/configuration&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
                &lt;configuration&gt;
                    &lt;skipTests&gt;${skipTests}&lt;/skipTests&gt;
                &lt;/configuration&gt;
            &lt;/plugin&gt;
            &lt;!-- Plugin to run functional tests --&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                &lt;artifactId&gt;maven-failsafe-plugin&lt;/artifactId&gt;
                &lt;version&gt;${version.maven-failsafe-plugin}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;phase&gt;integration-test&lt;/phase&gt;
                        &lt;id&gt;integration-test&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;integration-test&lt;/goal&gt;
                        &lt;/goals&gt;
                        &lt;configuration&gt;
                            &lt;includes&gt;
                                &lt;include&gt;**/it/**&lt;/include&gt;
                            &lt;/includes&gt;
                            &lt;systemPropertyVariables&gt;
                                &lt;liberty.test.port&gt;${http.port}&lt;/liberty.test.port&gt;
                                &lt;war.name&gt;${app.name}&lt;/war.name&gt;
                            &lt;/systemPropertyVariables&gt;
                        &lt;/configuration&gt;
                    &lt;/execution&gt;
                    &lt;execution&gt;
                        &lt;id&gt;verify-results&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;verify&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
                &lt;configuration&gt;
                    &lt;summaryFile&gt;
                        ${project.build.directory}/test-reports/it/failsafe-summary.xml
                    &lt;/summaryFile&gt;
                    &lt;reportsDirectory&gt;
                        ${project.build.directory}/test-reports/it
                    &lt;/reportsDirectory&gt;
                &lt;/configuration&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;</programlisting>
<simpara>Try updating the source code while the server is running. At the moment, the <literal>/health</literal>
endpoint reports whether or not the server is running, but the endpoint doesn’t provide
any details on the microservices that are running inside of the server.</simpara>
<simpara>MicroProfile Health offers health checks for both readiness and liveness. A readiness
check allows third-party services, such as Kubernetes, to know if the microservice is
ready to process requests. A liveness check allows third-party services to determine if
the microservice is running.</simpara>
<screen role="code_command hotspot file=1"><emphasis role="marked">Create the <literal>SystemReadinessCheck</literal> class.</emphasis>
<literal>src/main/java/io/openliberty/sample/system/SystemReadinessCheck.java</literal></screen>
<simpara>SystemReadinessCheck.java</simpara>
<programlisting role="code_column" language="java" linenumbering="numbered">package io.openliberty.sample.system;

import javax.enterprise.context.ApplicationScoped;

import javax.inject.Inject;
import javax.inject.Provider;

import org.eclipse.microprofile.config.inject.ConfigProperty;
import org.eclipse.microprofile.health.Readiness;
import org.eclipse.microprofile.health.HealthCheck;
import org.eclipse.microprofile.health.HealthCheckResponse;
import org.eclipse.microprofile.health.HealthCheckResponseBuilder;

@Readiness
@ApplicationScoped
public class SystemReadinessCheck implements HealthCheck {

    @Inject
    @ConfigProperty(name = "io_openliberty_guides_system_inMaintenance")
    Provider&lt;String&gt; inMaintenance;

    @Override
    public HealthCheckResponse call() {
        HealthCheckResponseBuilder builder = HealthCheckResponse.named(
		SystemResource.class.getSimpleName() + " readiness check");
        if (inMaintenance != null &amp;&amp; inMaintenance.get().equalsIgnoreCase("true")) {
            return builder.withData("services", "not available").down().build();
        }
        return builder.withData("services", "available").up().build();
    }

}</programlisting>
<simpara>The <literal role="hotspot=16-32 file=1">SystemReadinessCheck</literal> class verifies that the <literal>system</literal>
microservice is not in maintenance by checking a config property.</simpara>
<screen role="code_command hotspot file=2"><emphasis role="marked">Create the <literal>SystemLivenessCheck</literal> class.</emphasis>
<literal>src/main/java/io/openliberty/sample/system/SystemLivenessCheck.java</literal></screen>
<simpara>SystemLivenessCheck.java</simpara>
<programlisting role="code_column" language="java" linenumbering="numbered">package io.openliberty.sample.system;

import javax.enterprise.context.ApplicationScoped;

import java.lang.management.MemoryMXBean;
import java.lang.management.ManagementFactory;

import org.eclipse.microprofile.health.Liveness;
import org.eclipse.microprofile.health.HealthCheck;
import org.eclipse.microprofile.health.HealthCheckResponse;

@Liveness
@ApplicationScoped
public class SystemLivenessCheck implements HealthCheck {

    @Override
    public HealthCheckResponse call() {
        MemoryMXBean memBean = ManagementFactory.getMemoryMXBean();
        long memUsed = memBean.getHeapMemoryUsage().getUsed();
        long memMax = memBean.getHeapMemoryUsage().getMax();

        return HealthCheckResponse.named(
            SystemResource.class.getSimpleName() + " liveness check")
                                  .withData("memory used", memUsed)
                                  .withData("memory max", memMax)
                                  .state(memUsed &lt; memMax * 0.9).build();
    }

}</programlisting>
<simpara>The <literal role="hotspot=14-29 file=2">SystemLivenessCheck</literal> class reports a status of <literal>DOWN</literal> if
the microservice uses over 90% of the maximum amount of memory.</simpara>
<simpara>Next, recompile the application:</simpara>
<screen role="command">mvn compile</screen>
<simpara>The following messages display in your first shell session:</simpara>
<screen role="no_copy">[INFO] [AUDIT] CWWKT0017I: Web application removed (default_host): http://foo:9080/
[INFO] [AUDIT] CWWKZ0009I: The application io.openliberty.guides.getting-started has stopped successfully.
[INFO] [AUDIT] CWWKT0016I: Web application available (default_host): http://foo:9080/
[INFO] [AUDIT] CWWKZ0003I: The application io.openliberty.guides.getting-started updated in 0.136 seconds.</screen>
<simpara>Access the <literal>/health</literal> endpoint again by visiting the <link xlink:href="http://localhost:9080/health">http://localhost:9080/health</link> URL.
This time you see the overall status of your server as well as the aggregated data of the
liveness and readiness checks for the <literal>system</literal> microservice:</simpara>
<programlisting role="no_copy" language="JSON" linenumbering="unnumbered">{
   "checks":[
      {
         "data":{
            "services":"available"
         },
         "name":"SystemResource readiness check",
         "status":"UP"
      },
      {
         "data":{
            "memory used":81064480,
            "memory max":4294967296
         },
         "name":"SystemResource liveness check",
         "status":"UP"
      }
   ],
   "status":"UP"
}</programlisting>
<simpara>You can also access the <literal>/health/ready</literal> endpoint by visiting the <link xlink:href="http://localhost:9080/health/ready">http://localhost:9080/health/ready</link>
URL to view the data from the readiness health check. Similarily, access the <literal>/health/live</literal>
endpoint by visiting the <link xlink:href="http://localhost:9080/health/live">http://localhost:9080/health/live</link>
URL to view the data from the liveness health check.</simpara>
<simpara>Making code changes and recompiling is fast and straightforward. Maven only rebuilds the
<literal>.class</literal> files and artifacts that changed, and the server picks these up automatically
without needing to be restarted.</simpara>
</chapter>
<chapter xml:id="checking_the_open_liberty_server_logs" remap="_checking_the_open_liberty_server_logs">
<title>Checking the Open Liberty server logs</title>
<simpara>While the server is running in the foreground, it displays various console messages in
the shell. These messages are also logged to the <literal>target/liberty/wlp/usr/servers/GettingStartedServer/logs/console.log</literal>
file. You can find the complete server logs in the <literal>target/liberty/wlp/usr/servers/GettingStartedServer/logs</literal>
directory. The <literal>console.log</literal> and <literal>messages.log</literal> files are the primary log files that contain
console output of the running application and the server. More logs are created when run
time errors occur or whenever tracing is enabled. You can find the error logs in the
<literal>ffdc</literal> directory and the tracing logs in the <literal>trace.log</literal> file.</simpara>
<simpara>In addition to the log files that are generated automatically, you can enable logging of
specific Java packages or classes by using the <literal>&lt;logging/&gt;</literal> element:</simpara>
<screen role="no_copy">&lt;logging traceSpecification="&lt;component_1&gt;=&lt;level&gt;:&lt;component_2&gt;=&lt;level&gt;:..."/&gt;</screen>
<simpara>The <literal>component</literal> element is a Java package or class, and the <literal>level</literal> element is one
of the following logging levels: <literal>off</literal>, <literal>fatal</literal>, <literal>severe</literal>, <literal>warning</literal>, <literal>audit</literal>, <literal>info</literal>,
<literal>config</literal>, <literal>detail</literal>, <literal>fine</literal>, <literal>finer</literal>, <literal>finest</literal>, <literal>all</literal>.</simpara>
<simpara>Try enabling detailed logging of the MicroProfile Health feature by adding the
<literal role="hotspot=14">&lt;logging/&gt;</literal> element to your configuration file.</simpara>
<screen role="code_command hotspot"><emphasis role="marked">Replace the server configuration file.</emphasis>
<literal>src/main/liberty/config/server.xml</literal></screen>
<simpara>server.xml</simpara>
<programlisting role="code_column" language="XML" linenumbering="numbered">&lt;server description="Sample Liberty server"&gt;
    &lt;featureManager&gt;
        &lt;feature&gt;jaxrs-2.1&lt;/feature&gt;
        &lt;feature&gt;jsonp-1.1&lt;/feature&gt;
        &lt;feature&gt;cdi-2.0&lt;/feature&gt;
        &lt;feature&gt;mpMetrics-2.0&lt;/feature&gt;
        &lt;feature&gt;mpHealth-2.0&lt;/feature&gt;
        &lt;feature&gt;mpConfig-1.3&lt;/feature&gt;
    &lt;/featureManager&gt;

    &lt;applicationManager autoExpand="true" /&gt;
    &lt;quickStartSecurity userName="admin" userPassword="adminpwd" /&gt;
    &lt;keyStore id="defaultKeyStore" password="mpKeystore" /&gt;
    &lt;logging traceSpecification="com.ibm.ws.microprofile.health.*=all" /&gt;
    &lt;httpEndpoint host="*" httpPort="${default.http.port}"
        httpsPort="${default.https.port}" id="defaultHttpEndpoint"/&gt;

    &lt;variable name="io_openliberty_guides_system_inMaintenance" value="false"/&gt;

    &lt;webApplication location="getting-started.war" contextRoot="/"/&gt;
&lt;/server&gt;</programlisting>
<simpara>Next, repackage the server:</simpara>
<screen role="command">mvn package</screen>
<simpara>Now, when you visit the <literal>/health</literal> endpoint, additional traces are logged into the <literal>trace.log</literal>
file.</simpara>
</chapter>
<chapter xml:id="starting_and_stopping_the_open_liberty_server_in_the_background" remap="_starting_and_stopping_the_open_liberty_server_in_the_background">
<title>Starting and stopping the Open Liberty server in the background</title>
<simpara>Although you can start and stop the server in the foreground by using the Maven
<literal>liberty:run-server</literal> goal, you can also start and stop the server in the background with
the Maven <literal>liberty:start-server</literal> and <literal>liberty:stop-server</literal> goals:</simpara>
<screen role="command">mvn liberty:start-server
mvn liberty:stop-server</screen>
</chapter>
<chapter xml:id="running_the_application_from_a_minimal_runnable_jar" remap="_running_the_application_from_a_minimal_runnable_jar">
<title>Running the application from a minimal runnable JAR</title>
<simpara>So far, Open Liberty has been running out of the <literal>target/liberty/wlp</literal> directory, which
effectively contains an Open Liberty server installation and the deployed application. The
final product of the Maven build is a server package for use in a continuous integration
pipeline and, ultimately, a production deployment.</simpara>
<simpara>Open Liberty supports a number of different server packages. The sample application
currently generates a <literal>usr</literal> package that contains the servers and application to be
extracted onto an Open Liberty installation.</simpara>
<simpara>The type of server package is configured with <literal role="hotspot=32 file=0">&lt;packaging.type/&gt;</literal> in
the <literal role="hotspot file=0">pom.xml</literal>.</simpara>
<simpara>Instead of creating a server package, you can generate a runnable JAR file that contains
the application along with a server runtime. This JAR can then be run anywhere and deploy
your application and server at the same time. To generate a runnable JAR, invoke the
<literal role="hotspot=39-47 file=0">runnable-package</literal> profile by using the <literal>-P</literal> flag:</simpara>
<screen role="command">mvn install -P runnable-package</screen>
<simpara>The <literal>-P</literal> flag specifies the Maven profile to be run during the build. In this case, the
<literal role="hotspot=39-47 file=0">runnable-package</literal> profile is invoked, which temporarily overrides
the <literal role="hotspot=32 hotspot=45 file=0">packaging.type</literal> property from the <literal>usr</literal> package to the <literal>runnable</literal>
package. This property then propagates to the <literal role="hotspot=168-190 file=0">liberty-maven-plugin</literal>
plug-in, which generates the server package that you want.</simpara>
<simpara>When the build completes, you can find the runnable <literal>getting-started.jar</literal> file in the
<literal>target</literal> directory. By default, this JAR file comes with all the features available in
Open Liberty, including the entirety of Java EE and MicroProfile. As a result, this JAR
is over 100 MB. To omit the features that you don’t need and package the JAR with only
the <literal role="hotspot=2-9 file=1">features</literal> that you defined in the <literal role="hotspot file=1">server.xml</literal> file, use
<literal>minifiy,runnable</literal> as the packaging type. To build a minimal runnable JAR, invoke the
<literal role="hotspot=48-56 file=0">minify-runnable-package</literal> profile by using the <literal>-P</literal> flag:</simpara>
<screen role="command">mvn install -P minify-runnable-package</screen>
<simpara>The <literal role="hotspot=48-56 file=0">minify-runnable-package</literal> profile overrides the
<literal role="hotspot=32 hotspot=54 file=0">packaging.type</literal> property from the <literal>usr</literal> package to the <literal>minify,runnable</literal>
package and generates a runnable JAR file that contains only the <literal role="hotspot=2-9 file=1">features</literal> that you
explicitly enabled in your <literal role="hotspot file=1">server.xml</literal> file. As a result, the
generated JAR is only about 50 MB.</simpara>
<simpara>To run the JAR, first stop the server if it’s running. Then, navigate to the <literal>target</literal>
directory and run the <literal>java -jar</literal> command:</simpara>
<screen role="command">java -jar getting-started.jar</screen>
<simpara>When the server starts, visit the <link xlink:href="http://localhost:9080/system/properties">http://localhost:9080/system/properties</link> URL to access
your application that is now running out of the minimal runnable JAR.</simpara>
<simpara>At this point, you can stop the server by pressing <literal>CTRL+C</literal> in the shell session that
the server runs in.</simpara>
<simpara>pom.xml</simpara>
<programlisting role="code_column" language="XML" linenumbering="numbered">&lt;?xml version='1.0' encoding='utf-8'?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;

    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;parent&gt;
        &lt;groupId&gt;net.wasdev.wlp.maven.parent&lt;/groupId&gt;
        &lt;artifactId&gt;liberty-maven-app-parent&lt;/artifactId&gt;
        &lt;version&gt;RELEASE&lt;/version&gt;
    &lt;/parent&gt;

    &lt;groupId&gt;io.openliberty.guides&lt;/groupId&gt;
    &lt;artifactId&gt;getting-started&lt;/artifactId&gt;
    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
    &lt;packaging&gt;war&lt;/packaging&gt;

    &lt;properties&gt;
        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;
        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;
        &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;
        &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;
        &lt;!-- Plugins --&gt;
        &lt;version.maven-war-plugin&gt;3.2.2&lt;/version.maven-war-plugin&gt;
        &lt;version.maven-surefire-plugin&gt;3.0.0-M1&lt;/version.maven-surefire-plugin&gt;
        &lt;version.maven-failsafe-plugin&gt;3.0.0-M1&lt;/version.maven-failsafe-plugin&gt;
        &lt;!-- OpenLiberty runtime --&gt;
        &lt;version.openliberty-runtime&gt;RELEASE&lt;/version.openliberty-runtime&gt;
        &lt;http.port&gt;9080&lt;/http.port&gt;
        &lt;https.port&gt;9443&lt;/https.port&gt;
        &lt;packaging.type&gt;usr&lt;/packaging.type&gt;
        &lt;app.name&gt;${project.artifactId}&lt;/app.name&gt;
        &lt;package.file&gt;${project.build.directory}/${app.name}.zip&lt;/package.file&gt;
    &lt;/properties&gt;

    &lt;!-- Profiles for temporarily switching packaging types --&gt;
    &lt;profiles&gt;
        &lt;profile&gt;
            &lt;id&gt;runnable-package&lt;/id&gt;
            &lt;properties&gt;
                &lt;package.file&gt;
                    ${project.build.directory}/${app.name}.jar
                &lt;/package.file&gt;
                &lt;packaging.type&gt;runnable&lt;/packaging.type&gt;
            &lt;/properties&gt;
        &lt;/profile&gt;
        &lt;profile&gt;
            &lt;id&gt;minify-runnable-package&lt;/id&gt;
            &lt;properties&gt;
                &lt;package.file&gt;
                    ${project.build.directory}/${app.name}.jar
                &lt;/package.file&gt;
                &lt;packaging.type&gt;minify,runnable&lt;/packaging.type&gt;
            &lt;/properties&gt;
        &lt;/profile&gt;
    &lt;/profiles&gt;

    &lt;dependencyManagement&gt;
        &lt;dependencies&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;io.openliberty.features&lt;/groupId&gt;
                &lt;artifactId&gt;features-bom&lt;/artifactId&gt;
                &lt;version&gt;RELEASE&lt;/version&gt;
                &lt;type&gt;pom&lt;/type&gt;
                &lt;scope&gt;import&lt;/scope&gt;
            &lt;/dependency&gt;
        &lt;/dependencies&gt;
    &lt;/dependencyManagement&gt;

    &lt;dependencies&gt;
        &lt;!-- Open Liberty Features --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;io.openliberty.features&lt;/groupId&gt;
            &lt;artifactId&gt;jaxrs-2.1&lt;/artifactId&gt;
            &lt;type&gt;esa&lt;/type&gt;
            &lt;scope&gt;provided&lt;/scope&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;io.openliberty.features&lt;/groupId&gt;
            &lt;artifactId&gt;jsonp-1.1&lt;/artifactId&gt;
            &lt;type&gt;esa&lt;/type&gt;
            &lt;scope&gt;provided&lt;/scope&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;io.openliberty.features&lt;/groupId&gt;
            &lt;artifactId&gt;cdi-2.0&lt;/artifactId&gt;
            &lt;type&gt;esa&lt;/type&gt;
            &lt;scope&gt;provided&lt;/scope&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;io.openliberty.features&lt;/groupId&gt;
            &lt;artifactId&gt;mpMetrics-2.0&lt;/artifactId&gt;
            &lt;type&gt;esa&lt;/type&gt;
            &lt;scope&gt;provided&lt;/scope&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;io.openliberty.features&lt;/groupId&gt;
            &lt;artifactId&gt;mpHealth-2.0&lt;/artifactId&gt;
            &lt;type&gt;esa&lt;/type&gt;
            &lt;scope&gt;provided&lt;/scope&gt;
        &lt;/dependency&gt;
        &lt;!-- For tests --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;junit&lt;/groupId&gt;
            &lt;artifactId&gt;junit&lt;/artifactId&gt;
            &lt;version&gt;4.12&lt;/version&gt;
            &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.apache.cxf&lt;/groupId&gt;
            &lt;artifactId&gt;cxf-rt-rs-client&lt;/artifactId&gt;
            &lt;version&gt;3.2.6&lt;/version&gt;
            &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.apache.cxf&lt;/groupId&gt;
            &lt;artifactId&gt;cxf-rt-rs-extension-providers&lt;/artifactId&gt;
            &lt;version&gt;3.2.6&lt;/version&gt;
            &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.glassfish&lt;/groupId&gt;
            &lt;artifactId&gt;javax.json&lt;/artifactId&gt;
            &lt;version&gt;1.0.4&lt;/version&gt;
            &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;
        &lt;!-- Support for JDK 9 and above --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;javax.xml.bind&lt;/groupId&gt;
            &lt;artifactId&gt;jaxb-api&lt;/artifactId&gt;
            &lt;version&gt;2.3.1&lt;/version&gt;
	    &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.sun.xml.bind&lt;/groupId&gt;
            &lt;artifactId&gt;jaxb-core&lt;/artifactId&gt;
            &lt;version&gt;2.3.0.1&lt;/version&gt;
	    &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.sun.xml.bind&lt;/groupId&gt;
            &lt;artifactId&gt;jaxb-impl&lt;/artifactId&gt;
            &lt;version&gt;2.3.2&lt;/version&gt;
	    &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;javax.activation&lt;/groupId&gt;
            &lt;artifactId&gt;activation&lt;/artifactId&gt;
            &lt;version&gt;1.1.1&lt;/version&gt;
	    &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;finalName&gt;${project.artifactId}&lt;/finalName&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                &lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt;
                &lt;version&gt;${version.maven-war-plugin}&lt;/version&gt;
                &lt;configuration&gt;
                    &lt;failOnMissingWebXml&gt;false&lt;/failOnMissingWebXml&gt;
                    &lt;packagingExcludes&gt;pom.xml&lt;/packagingExcludes&gt;
                &lt;/configuration&gt;
            &lt;/plugin&gt;
            &lt;!-- Enable liberty-maven plugin --&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;net.wasdev.wlp.maven.plugins&lt;/groupId&gt;
                &lt;artifactId&gt;liberty-maven-plugin&lt;/artifactId&gt;
                &lt;configuration&gt;
                    &lt;assemblyArtifact&gt;
                        &lt;groupId&gt;io.openliberty&lt;/groupId&gt;
                        &lt;artifactId&gt;openliberty-runtime&lt;/artifactId&gt;
                        &lt;version&gt;${version.openliberty-runtime}&lt;/version&gt;
                        &lt;type&gt;zip&lt;/type&gt;
                    &lt;/assemblyArtifact&gt;
                    &lt;serverName&gt;GettingStartedServer&lt;/serverName&gt;
                    &lt;stripVersion&gt;true&lt;/stripVersion&gt;
                    &lt;configFile&gt;src/main/liberty/config/server.xml&lt;/configFile&gt;
                    &lt;looseApplication&gt;true&lt;/looseApplication&gt;
                    &lt;packageFile&gt;${package.file}&lt;/packageFile&gt;
                    &lt;include&gt;${packaging.type}&lt;/include&gt;
                    &lt;bootstrapProperties&gt;
                        &lt;default.http.port&gt;${http.port}&lt;/default.http.port&gt;
                        &lt;default.https.port&gt;${https.port}&lt;/default.https.port&gt;
                        &lt;app.context.root&gt;${app.name}&lt;/app.context.root&gt;
                    &lt;/bootstrapProperties&gt;
                &lt;/configuration&gt;
            &lt;/plugin&gt;
            &lt;!-- Plugin to run unit tests --&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;
                &lt;version&gt;${version.maven-surefire-plugin}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;phase&gt;test&lt;/phase&gt;
                        &lt;id&gt;default-test&lt;/id&gt;
                        &lt;configuration&gt;
                            &lt;excludes&gt;
                                &lt;exclude&gt;**/it/**&lt;/exclude&gt;
                            &lt;/excludes&gt;
                            &lt;reportsDirectory&gt;
                                ${project.build.directory}/test-reports/unit
                            &lt;/reportsDirectory&gt;
                        &lt;/configuration&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
                &lt;configuration&gt;
                    &lt;skipTests&gt;${skipTests}&lt;/skipTests&gt;
                &lt;/configuration&gt;
            &lt;/plugin&gt;
            &lt;!-- Plugin to run functional tests --&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                &lt;artifactId&gt;maven-failsafe-plugin&lt;/artifactId&gt;
                &lt;version&gt;${version.maven-failsafe-plugin}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;phase&gt;integration-test&lt;/phase&gt;
                        &lt;id&gt;integration-test&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;integration-test&lt;/goal&gt;
                        &lt;/goals&gt;
                        &lt;configuration&gt;
                            &lt;includes&gt;
                                &lt;include&gt;**/it/**&lt;/include&gt;
                            &lt;/includes&gt;
                            &lt;systemPropertyVariables&gt;
                                &lt;liberty.test.port&gt;${http.port}&lt;/liberty.test.port&gt;
                                &lt;war.name&gt;${app.name}&lt;/war.name&gt;
                            &lt;/systemPropertyVariables&gt;
                        &lt;/configuration&gt;
                    &lt;/execution&gt;
                    &lt;execution&gt;
                        &lt;id&gt;verify-results&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;verify&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
                &lt;configuration&gt;
                    &lt;summaryFile&gt;
                        ${project.build.directory}/test-reports/it/failsafe-summary.xml
                    &lt;/summaryFile&gt;
                    &lt;reportsDirectory&gt;
                        ${project.build.directory}/test-reports/it
                    &lt;/reportsDirectory&gt;
                &lt;/configuration&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;</programlisting>
<simpara>server.xml</simpara>
<programlisting role="code_column" language="xml" linenumbering="numbered">&lt;server description="Sample Liberty server"&gt;
    &lt;featureManager&gt;
        &lt;feature&gt;jaxrs-2.1&lt;/feature&gt;
        &lt;feature&gt;jsonp-1.1&lt;/feature&gt;
        &lt;feature&gt;cdi-2.0&lt;/feature&gt;
        &lt;feature&gt;mpMetrics-2.0&lt;/feature&gt;
        &lt;feature&gt;mpHealth-2.0&lt;/feature&gt;
        &lt;feature&gt;mpConfig-1.3&lt;/feature&gt;
    &lt;/featureManager&gt;

    &lt;applicationManager autoExpand="true" /&gt;
    &lt;quickStartSecurity userName="admin" userPassword="adminpwd" /&gt;
    &lt;keyStore id="defaultKeyStore" password="mpKeystore" /&gt;
    &lt;logging traceSpecification="com.ibm.ws.microprofile.health.*=all" /&gt;
    &lt;httpEndpoint host="*" httpPort="${default.http.port}"
        httpsPort="${default.https.port}" id="defaultHttpEndpoint"/&gt;

    &lt;variable name="io_openliberty_guides_system_inMaintenance" value="false"/&gt;

    &lt;webApplication location="getting-started.war" contextRoot="/"/&gt;
&lt;/server&gt;</programlisting>
</chapter>
<chapter xml:id="running_the_application_in_a_docker_container" remap="_running_the_application_in_a_docker_container">
<title>Running the application in a Docker container</title>
<simpara>To run the application in a container, you need to have Docker installed. For installation
instructions, see the <link xlink:href="https://docs.docker.com/install/">Official Docker Docs</link>.</simpara>
<simpara>To containerize the application, you need a <literal>Dockerfile</literal>. This file contains a collection
of instructions that define how a Docker image is built, what files are packaged into it,
what commands run when the image runs as a container, and so on. You can find a complete
<literal>Dockerfile</literal> in the <literal>start</literal> directory. This <literal>Dockerfile</literal> packages the <literal>usr</literal> server
package into a Docker image that contains a preconfigured Open Liberty server.</simpara>
<simpara>To build and containerize the application, start your Docker daemon and run the following command:</simpara>
<screen role="command">docker build -t openliberty-getting-started:1.0-SNAPSHOT .</screen>
<simpara>The <literal>-t</literal> flag in the <literal>docker build</literal> command allows the Docker image to be labeled (tagged) in the <literal>name[:tag]</literal> format.
The tag for an image describes the specific image version. If the optional <literal>[:tag]</literal> tag is not specified, the <literal>latest</literal> tag is created by default.
 The Docker <literal>openliberty-getting-started:1.0-SNAPSHOT</literal> image is built from
the <literal>Dockerfile</literal>. To verify that the image is built, run the <literal>docker images</literal> command to
list all local Docker images:</simpara>
<screen role="command">docker images</screen>
<simpara>Your image should appear in the list of all Docker images:</simpara>
<screen role="no_copy">REPOSITORY                     TAG             IMAGE ID        CREATED         SIZE
openliberty-getting-started    1.0-SNAPSHOT    85085141269b    21 hours ago    487MB</screen>
<simpara>Next, run the image as a container:</simpara>
<screen role="command">docker run -d --name gettingstarted-app -p 9080:9080 openliberty-getting-started:1.0-SNAPSHOT</screen>
<simpara>There is a bit going on here, so let’s break down the command:</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="2">
<colspec colname="col_1" colwidth="13*"/>
<colspec colname="col_2" colwidth="87*"/>
<thead>
<row>
<entry align="left" valign="top"><emphasis role="strong">Flag</emphasis></entry>
<entry align="left" valign="top"><emphasis role="strong">Description</emphasis></entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>-d</simpara></entry>
<entry align="left" valign="top"><simpara>Runs the container in the background.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>--name</simpara></entry>
<entry align="left" valign="top"><simpara>Specifies a name for the container.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>-p</simpara></entry>
<entry align="left" valign="top"><simpara>Maps the container ports to the host ports.</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara>The final argument in the <literal>docker run</literal> command is the Docker image name.</simpara>
<simpara>Next, run the <literal>docker ps</literal> command to verify that your container started:</simpara>
<screen role="command">docker ps</screen>
<simpara>Make sure that your container is running and does not have <literal>Exited</literal> as its status:</simpara>
<screen role="no_copy">CONTAINER ID    IMAGE                         CREATED          STATUS           NAMES
4294a6bdf41b    openliberty-getting-started   9 seconds ago    Up 11 seconds    gettingstarted-app</screen>
<simpara>To access the application, visit the <link xlink:href="http://localhost:9080/system/properties">http://localhost:9080/system/properties</link> URL.</simpara>
<simpara>To stop and remove the container, run the following commands:</simpara>
<screen role="command">docker stop gettingstarted-app &amp;&amp; docker rm gettingstarted-app</screen>
<simpara>To remove the image, run the following command:</simpara>
<screen role="command">docker rmi openliberty-getting-started:1.0-SNAPSHOT</screen>
</chapter>
<chapter xml:id="great_work_you_re_done" remap="_great_work_you_re_done">
<title>Great work! You’re done!</title>
<simpara>You’ve learned the basics of deploying and updating an application on an Open Liberty server.</simpara>
<simpara><link xlink:href="https://raw.githubusercontent.com/OpenLiberty/guides-common/master/attribution.adoc">https://raw.githubusercontent.com/OpenLiberty/guides-common/master/attribution.adoc</link></simpara>
</chapter>
</book>