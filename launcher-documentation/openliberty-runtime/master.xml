<?xml version="1.0" encoding="UTF-8"?>
<?asciidoc-toc maxdepth="2"?>
<?asciidoc-numbered?>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xl="http://www.w3.org/1999/xlink" version="5.0" xml:lang="en">
<info>
<title>Open Liberty Runtime Guide</title>
<date>2019-10-08</date>
</info>
<simpara>This guide covers concepts as well as practical details needed by developers to use the Open Liberty runtime. It provides information governing the design of a Open Liberty application deployed as a Linux container on OpenShift.</simpara>
<section xml:id="what-is-openliberty_open-liberty">
<title>What is Open Liberty</title>
<simpara>Open Liberty is a lightweight open framework for building cloud-native Java microservices while running only what you need.
Check out <link linkend="additional-openliberty-resources_open-liberty">Additional Resources</link> for further reading on Open Liberty.</simpara>
<simpara>The Open Liberty runtime enables you to run Open Liberty applications and services in OpenShift while providing all the advantages and conveniences of the OpenShift platform such as rolling updates, service discovery, and canary deployments.
OpenShift also makes it easier for your applications to implement common microservice patterns such as externalized configuration, health check, circuit breaker, and failover.</simpara>
</section>
<section xml:id="configuring-your-application-to-use-open-liberty_open-liberty">
<title>Configuring your application to use Open Liberty</title>
<simpara>Reference the Open Liberty BOM (Bill of Materials) artifact in the <literal>pom.xml</literal> file at the root directory of your application.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>A Maven-based application</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Open the <literal>pom.xml</literal> file, add the <literal>io.openliberty.features:features-bom</literal> artifact to the <literal>&lt;dependencyManagement&gt;</literal> section, and specify the <literal>&lt;type&gt;pom&lt;/type&gt;</literal> and <literal>&lt;scope&gt;import&lt;/scope&gt;</literal>:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;project&gt;
  ...
  &lt;dependencyManagement&gt;
        &lt;dependencies&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;io.openliberty.features&lt;/groupId&gt;
                &lt;artifactId&gt;features-bom&lt;/artifactId&gt;
                &lt;version&gt;${version.openliberty}&lt;/version&gt;
                &lt;type&gt;pom&lt;/type&gt;
                &lt;scope&gt;import&lt;/scope&gt;
            &lt;/dependency&gt;
        &lt;/dependencies&gt;
  &lt;/dependencyManagement&gt;
  ...
&lt;/project&gt;</programlisting>
</listitem>
<listitem>
<simpara>Include the following properties to track the version of Open Liberty and the Open Liberty Maven Plugin you are using:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;project&gt;
  ...
  &lt;properties&gt;
    &lt;version.openliberty&gt;19.0.0.9&lt;/version.openliberty&gt;
    &lt;version.openliberty.maven.plugin&gt;3.0.1&lt;/version.openliberty.maven.plugin&gt;
  &lt;/properties&gt;
  ...
&lt;/project&gt;</programlisting>
</listitem>
<listitem>
<simpara>Specify the repositories containing Application Development on OpenShift Open Liberty Starters and the Open Liberty Maven Plugin:</simpara>
<programlisting language="xml" linenumbering="unnumbered">  &lt;!-- Specify the repositories containing RHOAR artifacts. --&gt;
  &lt;repositories&gt;
    &lt;repository&gt;
      &lt;id&gt;redhat-ga&lt;/id&gt;
      &lt;name&gt;Red Hat GA Repository&lt;/name&gt;
      &lt;url&gt;https://maven.repository.redhat.com/ga/&lt;/url&gt;
    &lt;/repository&gt;
  &lt;/repositories&gt;

  &lt;!-- Specify the repositories containing the plugins used to execute the build of your application. --&gt;
  &lt;pluginRepositories&gt;
    &lt;pluginRepository&gt;
      &lt;id&gt;redhat-ga&lt;/id&gt;
      &lt;name&gt;Red Hat GA Repository&lt;/name&gt;
      &lt;url&gt;https://maven.repository.redhat.com/ga/&lt;/url&gt;
    &lt;/pluginRepository&gt;
  &lt;/pluginRepositories&gt;</programlisting>
</listitem>
<listitem>
<simpara>Reference <literal>open-liberty-maven-plugin</literal> as the plugin used to package your application:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;project&gt;
  ...
  &lt;build&gt;
    &lt;plugins&gt;
        ...
                &lt;!-- Enable liberty-maven plugin --&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;io.openliberty.tools&lt;/groupId&gt;
                &lt;artifactId&gt;liberty-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${version.openliberty.maven.plugin}&lt;/version&gt;

                &lt;configuration&gt;
                    &lt;assemblyArtifact&gt;
                        &lt;groupId&gt;io.openliberty&lt;/groupId&gt;
                        &lt;artifactId&gt;openliberty-runtime&lt;/artifactId&gt;
                        &lt;version&gt;[18.0.0.1,)&lt;/version&gt;
                        &lt;type&gt;zip&lt;/type&gt;
                    &lt;/assemblyArtifact&gt;
                    &lt;bootstrapProperties&gt;
                        &lt;default.http.port&gt;${http.port}&lt;/default.http.port&gt;
                        &lt;default.https.port&gt;${https.port}&lt;/default.https.port&gt;
                        &lt;app.context.root&gt;/&lt;/app.context.root&gt;
                    &lt;/bootstrapProperties&gt;
                &lt;/configuration&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;create&lt;/id&gt;
                        &lt;phase&gt;generate-test-resources&lt;/phase&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;create&lt;/goal&gt;
                            &lt;goal&gt;configure-arquillian&lt;/goal&gt;
                            &lt;goal&gt;deploy&lt;/goal&gt;
                        &lt;/goals&gt;
                        &lt;configuration&gt;
                                &lt;looseApplication&gt;true&lt;/looseApplication&gt;
                                &lt;stripVersion&gt;true&lt;/stripVersion&gt;
                                &lt;installAppPackages&gt;project&lt;/installAppPackages&gt;
                            &lt;/configuration&gt;
                    &lt;/execution&gt;

                    &lt;execution&gt;
                        &lt;id&gt;package&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;package&lt;/goal&gt;
                        &lt;/goals&gt;
                        &lt;configuration&gt;
                            &lt;packageName&gt;rest-http-openliberty&lt;/packageName&gt;
                            &lt;packageType&gt;jar&lt;/packageType&gt;
                        &lt;/configuration&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        ...
    &lt;/plugins&gt;
  &lt;/build&gt;
  ...
&lt;/project&gt;</programlisting>
</listitem>
</orderedlist>
<itemizedlist>
<title>Additional resources</title>
<listitem>
<simpara>For more information about packaging your Open Liberty application, see the <link xl:href="https://github.com/OpenLiberty/ci.maven">Open Liberty Maven Plugin</link> documentation.</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="examples-and-cloud-native-development-on-openshift_open-liberty">
<title>Example applications and cloud-native development on OpenShift</title>
<simpara>When developing applications on OpenShift, you can use examples to kickstart your development.</simpara>
<bridgehead xml:id="_example_applications" renderas="sect2">Example applications</bridgehead>
<simpara>Examples are working applications that showcase different fundamental pieces of building cloud native applications and services.</simpara>
<simpara>The examples implement a <link xl:href="http://microservices.io/patterns/microservices.html">Microservice pattern</link> such as:</simpara>
<itemizedlist>
<listitem>
<simpara>Creating REST APIs</simpara>
</listitem>
<listitem>
<simpara>Interoperating with a database</simpara>
</listitem>
<listitem>
<simpara>Implementing the Health Check pattern</simpara>
</listitem>
</itemizedlist>
<simpara>You can use the examples for a variety of purposes:</simpara>
<itemizedlist>
<listitem>
<simpara>A proof of technology demonstration</simpara>
</listitem>
<listitem>
<simpara>A learning tool, or a sandbox for understanding how to develop applications for your project</simpara>
</listitem>
<listitem>
<simpara>A starting point for updating or extending to your own use case</simpara>
</listitem>
</itemizedlist>
<simpara>Each example application is implemented in one or more runtimes.
The REST API Level 0 example is implemented for these runtimes:</simpara>
<itemizedlist>
<listitem>
<simpara><link xl:href="/docs/nodejs-runtime.html#example-rest-http-nodejs">Node.js</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="/docs/spring-boot-runtime.html#example-rest-http-spring-boot">Spring Boot</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="/docs/vertx-runtime.html#example-rest-http-vertx">Eclipse Vert.x</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="/docs/thorntail-runtime.html#example-rest-http-wf-swarm">Thorntail</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="{link-guide-openliberty}#example-rest-http-openliberty">Open Liberty</link></simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="open-liberty-available-examples">
<title>Available examples Open Liberty</title>
<simpara>The following example applications are available for Open Liberty.</simpara>
<section xml:id="example-rest-http-open-liberty">
<title>REST API Level 0 example for Open Liberty</title>
<simpara>Example proficiency level:
<link linkend="proficiency_foundational"><emphasis role="strong">Foundational</emphasis></link>.</simpara>
<formalpara>
<title>What the REST API Level 0 example does</title>
<para>The REST API Level 0 example shows how to map business operations to a remote procedure call endpoint over HTTP using a REST framework. This corresponds to <link xl:href="https://martinfowler.com/articles/richardsonMaturityModel.html#level0">Level 0 in the Richardson Maturity Model</link>.
Creating an HTTP endpoint using REST and its underlying principles to define your API lets you quickly prototype and design the API flexibly.</para>
</formalpara>
<simpara>This example introduces the mechanics of interacting with a remote service using the HTTP protocol. It allows you to:</simpara>
<itemizedlist>
<listitem>
<simpara>Execute an HTTP <literal>GET</literal> request on the <literal>api/greeting</literal> endpoint.</simpara>
</listitem>
<listitem>
<simpara>Receive a response in JSON format with a payload consisting of the <literal>Hello, World!</literal> String.</simpara>
</listitem>
<listitem>
<simpara>Execute an HTTP <literal>GET</literal> request on the <literal>api/greeting</literal> endpoint while passing in a String argument. This uses the <literal>name</literal> request parameter in the query string.</simpara>
</listitem>
<listitem>
<simpara>Receive a response in JSON format with a payload of <literal>Hello, $name!</literal> with <literal>$name</literal> replaced by the value of the <literal>name</literal> parameter passed into the request.</simpara>
</listitem>
</itemizedlist>
<section xml:id="http-api-design-tradeoffs_http-api">
<title>REST API Level 0 design tradeoffs</title>
<table frame="all" rowsep="1" colsep="1">
<title>Design tradeoffs</title>
<?dbhtml table-width="100%"?>
<?dbfo table-width="100%"?>
<?dblatex table-width="100%"?>
<tgroup cols="2">
<colspec colname="col_1" colwidth="212.5*"/>
<colspec colname="col_2" colwidth="212.5*"/>
<thead>
<row>
<entry align="left" valign="top">Pros</entry>
<entry align="left" valign="top">Cons</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><itemizedlist>
<listitem>
<simpara>The example application enables fast prototyping.</simpara>
</listitem>
<listitem>
<simpara>The API Design is flexible.</simpara>
</listitem>
<listitem>
<simpara>HTTP endpoints allow clients to be language-neutral.</simpara>
</listitem>
</itemizedlist></entry>
<entry align="left" valign="top"><itemizedlist>
<listitem>
<simpara>As an application or service matures, the REST API Level 0 approach might not scale well. It might not
support a clean API design or use cases with database interactions.</simpara>
<itemizedlist>
<listitem>
<simpara>Any operations involving shared, mutable state must be integrated with an appropriate backing datastore.</simpara>
</listitem>
<listitem>
<simpara>All requests handled by this API design are scoped only to the container servicing the request.
Subsequent requests might not be served by the same container.</simpara>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist></entry>
</row>
</tbody>
</tgroup>
</table>
</section>
<section xml:id="deploying-the-example-application-to-openshiftonline_http-api">
<title>Deploying the REST API Level 0 example application to OpenShift Online</title>
<simpara>Use one of the following options to execute the REST API Level 0 example application on OpenShift Online.</simpara>
<itemizedlist>
<listitem>
<simpara><link linkend="deploying-the-example-application-using-launcher-oso_http-api-oso">Use developers.redhat.com/launch</link></simpara>
</listitem>
<listitem>
<simpara><link linkend="deploying-the-http-api-example-application-using-the-oc-cli-client_http-api-oso">Use the <literal>oc</literal> CLI client</link></simpara>
</listitem>
</itemizedlist>
<simpara>Although each method uses the same <literal>oc</literal> commands to deploy your application, using developers.redhat.com/launch provides an automated deployment workflow that executes the <literal>oc</literal> commands for you.</simpara>
<section xml:id="deploying-the-example-application-using-launcher-oso_http-api-oso">
<title>Deploying the example application using developers.redhat.com/launch</title>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>An account at <link xl:href="https://manage.openshift.com">OpenShift Online</link>.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Navigate to the <link xl:href="https://developers.redhat.com/launch">developers.redhat.com/launch</link> URL in a browser and log in.</simpara>
</listitem>
<listitem>
<simpara>Follow on-screen instructions to create and launch your example application in Open Liberty.</simpara>
</listitem>
</orderedlist>
</section>
<section xml:id="authenticating-the-oc-cli-client_http-api-oso">
<title>Authenticating the <literal>oc</literal> CLI client</title>
<simpara>To work with example applications on <link xl:href="https://manage.openshift.com">OpenShift Online</link> using the <literal>oc</literal> command-line client, you must authenticate the client using the token provided by the <link xl:href="https://manage.openshift.com">OpenShift Online</link> web interface.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>An account at <link xl:href="https://manage.openshift.com">OpenShift Online</link>.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Navigate to the <link xl:href="https://manage.openshift.com">OpenShift Online</link> URL in a browser.</simpara>
</listitem>
<listitem>
<simpara>Click on the question mark icon in the top right-hand corner of the Web console, next to your user name.</simpara>
</listitem>
<listitem>
<simpara>Select <emphasis>Command Line Tools</emphasis> in the drop-down menu.</simpara>
</listitem>
<listitem>
<simpara>Find the text box that contains the <literal>oc login &#8230;&#8203;</literal> command with the hidden token, and click the button next to it to copy its content to your clipboard.</simpara>
</listitem>
<listitem>
<simpara>Paste the command into a terminal application. The command uses your authentication token to authenticate your <literal>oc</literal> CLI client with your <link xl:href="https://manage.openshift.com">OpenShift Online</link> account.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ oc login OPENSHIFT_URL --token=MYTOKEN</programlisting>
</listitem>
</orderedlist>
</section>
<section xml:id="deploying-the-http-api-example-application-using-the-oc-cli-client_http-api-oso">
<title>Deploying the REST API Level 0 example application using the <literal>oc</literal> CLI client</title>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>The example application created using <link xl:href="https://developers.redhat.com/launch">developers.redhat.com/launch</link>.
For more information, see <xref linkend="deploying-the-example-application-using-launcher-oso_http-api-oso"/>.</simpara>
</listitem>
<listitem>
<simpara>The <literal>oc</literal> client authenticated. For more information, see <xref linkend="authenticating-the-oc-cli-client_http-api-oso"/>.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Clone your project from GitHub.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ git clone git@github.com:USERNAME/MY_PROJECT_NAME.git</programlisting>
<simpara>Alternatively, if you downloaded a ZIP file of your project, extract it.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ unzip MY_PROJECT_NAME.zip</programlisting>
</listitem>
<listitem>
<simpara>Create a new project in OpenShift.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ oc new-project MY_PROJECT_NAME</programlisting>
</listitem>
<listitem>
<simpara>Navigate to the root directory of your application.</simpara>
</listitem>
<listitem>
<simpara>Use Maven to start the deployment to OpenShift.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ mvn clean fabric8:deploy -Popenshift</programlisting>
<simpara>This command uses the Fabric8 Maven Plugin to launch the <link xl:href="https://docs.openshift.com/container-platform/latest/architecture/core_concepts/builds_and_image_streams.html#source-build">S2I process</link> on OpenShift and to start the pod.</simpara>
</listitem>
<listitem>
<simpara>Check the status of your application and ensure your pod is running.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ oc get pods -w
NAME                             READY     STATUS      RESTARTS   AGE
MY_APP_NAME-1-aaaaa               1/1       Running     0          58s
MY_APP_NAME-s2i-1-build           0/1       Completed   0          2m</programlisting>
<simpara>The <literal>MY_APP_NAME-1-aaaaa</literal> pod should have a status of <literal>Running</literal> once it is fully deployed and started.
Your specific pod name will vary.
The number in the middle will increase with each new build.
The letters at the end are generated when the pod is created.</simpara>
</listitem>
<listitem>
<simpara>After your example application is deployed and started, determine its route.</simpara>
<formalpara>
<title>Example Route Information</title>
<para>
<programlisting language="bash" linenumbering="unnumbered">$ oc get routes
NAME                 HOST/PORT                                                     PATH      SERVICES        PORT      TERMINATION
MY_APP_NAME         MY_APP_NAME-MY_PROJECT_NAME.OPENSHIFT_HOSTNAME      MY_APP_NAME      8080</programlisting>
</para>
</formalpara>
<simpara>The route information of a pod gives you the base URL which you use to access it. In the example above, you would use <literal>http://MY_APP_NAME-MY_PROJECT_NAME.OPENSHIFT_HOSTNAME</literal> as the base URL to access the application.</simpara>
</listitem>
</orderedlist>
</section>
</section>
<section xml:id="deploying-the-example-application-to-openshiftlocal_http-api">
<title>Deploying the REST API Level 0 example application to Minishift or CDK</title>
<simpara>Use one of the following options to execute the REST API Level 0 example application locally on Minishift or CDK:</simpara>
<itemizedlist>
<listitem>
<simpara><link linkend="deploying-the-example-application-using-the-launcher-tool_http-api-osl">Using Fabric8 Launcher</link></simpara>
</listitem>
<listitem>
<simpara><link linkend="deploying-the-http-api-example-application-using-the-oc-cli-client_http-api-osl">Using the <literal>oc</literal> CLI client</link></simpara>
</listitem>
</itemizedlist>
<simpara>Although each method uses the same <literal>oc</literal> commands to deploy your application, using Fabric8 Launcher provides an automated deployment workflow that executes the <literal>oc</literal> commands for you.</simpara>
<section xml:id="getting-the-launcher-tool-url-and-credentials_http-api-osl">
<title>Getting the Fabric8 Launcher tool URL and credentials</title>
<simpara>You need the Fabric8 Launcher tool URL and user credentials to create and deploy example applications on Minishift or CDK. This information is provided when the Minishift or CDK is started.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>The Fabric8 Launcher tool installed, configured, and running. For more information, see the <link xl:href="/docs/minishift-installation.html">Install and Configure the Fabric8 Launcher Tool</link> guide.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Navigate to the console where you started Minishift or CDK.</simpara>
</listitem>
<listitem>
<simpara>Check the console output for the URL and user credentials you can use to access the running Fabric8 Launcher:</simpara>
<formalpara>
<title>Example Console Output from a Minishift or CDK Startup</title>
<para>
<programlisting language="bash" linenumbering="unnumbered">...
-- Removing temporary directory ... OK
-- Server Information ...
   OpenShift server started.
   The server is accessible via web console at:
       https://192.168.42.152:8443

   You are logged in as:
       User:     developer
       Password: developer

   To login as administrator:
       oc login -u system:admin</programlisting>
</para>
</formalpara>
</listitem>
</orderedlist>
</section>
<section xml:id="deploying-the-example-application-using-the-launcher-tool_http-api-osl">
<title>Deploying the example application using the Fabric8 Launcher tool</title>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>The URL of your running Fabric8 Launcher instance and the user credentials of your Minishift or CDK.
For more information, see <xref linkend="getting-the-launcher-tool-url-and-credentials_http-api-osl"/>.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Navigate to the Fabric8 Launcher URL in a browser.</simpara>
</listitem>
<listitem>
<simpara>Follow the on-screen instructions to create and launch your example application in Open Liberty.</simpara>
</listitem>
</orderedlist>
</section>
<section xml:id="authenticating-the-oc-cli-client_http-api-osl">
<title>Authenticating the <literal>oc</literal> CLI client</title>
<simpara>To work with example applications on Minishift or CDK using the <literal>oc</literal> command-line client, you must authenticate the client using the token provided by the Minishift or CDK web interface.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>The URL of your running Fabric8 Launcher instance and the user credentials of your Minishift or CDK. For more information, see <xref linkend="getting-the-launcher-tool-url-and-credentials_http-api-osl"/>.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Navigate to the Minishift or CDK URL in a browser.</simpara>
</listitem>
<listitem>
<simpara>Click on the question mark icon in the top right-hand corner of the Web console, next to your user name.</simpara>
</listitem>
<listitem>
<simpara>Select <emphasis>Command Line Tools</emphasis> in the drop-down menu.</simpara>
</listitem>
<listitem>
<simpara>Find the text box that contains the <literal>oc login &#8230;&#8203;</literal> command with the hidden token, and click the button next to it to copy its content to your clipboard.</simpara>
</listitem>
<listitem>
<simpara>Paste the command into a terminal application. The command uses your authentication token to authenticate your <literal>oc</literal> CLI client with your Minishift or CDK account.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ oc login OPENSHIFT_URL --token=MYTOKEN</programlisting>
</listitem>
</orderedlist>
</section>
<section xml:id="deploying-the-http-api-example-application-using-the-oc-cli-client_http-api-osl">
<title>Deploying the REST API Level 0 example application using the <literal>oc</literal> CLI client</title>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>The example application created using Fabric8 Launcher tool on a Minishift or CDK.
For more information, see <xref linkend="deploying-the-example-application-using-the-launcher-tool_http-api-osl"/>.</simpara>
</listitem>
<listitem>
<simpara>Your Fabric8 Launcher tool URL.</simpara>
</listitem>
<listitem>
<simpara>The <literal>oc</literal> client authenticated. For more information, see <xref linkend="authenticating-the-oc-cli-client_http-api-osl"/>.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Clone your project from GitHub.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ git clone git@github.com:USERNAME/MY_PROJECT_NAME.git</programlisting>
<simpara>Alternatively, if you downloaded a ZIP file of your project, extract it.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ unzip MY_PROJECT_NAME.zip</programlisting>
</listitem>
<listitem>
<simpara>Create a new project in OpenShift.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ oc new-project MY_PROJECT_NAME</programlisting>
</listitem>
<listitem>
<simpara>Navigate to the root directory of your application.</simpara>
</listitem>
<listitem>
<simpara>Use Maven to start the deployment to OpenShift.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ mvn clean fabric8:deploy -Popenshift</programlisting>
<simpara>This command uses the Fabric8 Maven Plugin to launch the <link xl:href="https://docs.openshift.com/container-platform/latest/architecture/core_concepts/builds_and_image_streams.html#source-build">S2I process</link> on OpenShift and to start the pod.</simpara>
</listitem>
<listitem>
<simpara>Check the status of your application and ensure your pod is running.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ oc get pods -w
NAME                             READY     STATUS      RESTARTS   AGE
MY_APP_NAME-1-aaaaa               1/1       Running     0          58s
MY_APP_NAME-s2i-1-build           0/1       Completed   0          2m</programlisting>
<simpara>The <literal>MY_APP_NAME-1-aaaaa</literal> pod should have a status of <literal>Running</literal> once it is fully deployed and started.
Your specific pod name will vary.
The number in the middle will increase with each new build.
The letters at the end are generated when the pod is created.</simpara>
</listitem>
<listitem>
<simpara>After your example application is deployed and started, determine its route.</simpara>
<formalpara>
<title>Example Route Information</title>
<para>
<programlisting language="bash" linenumbering="unnumbered">$ oc get routes
NAME                 HOST/PORT                                                     PATH      SERVICES        PORT      TERMINATION
MY_APP_NAME         MY_APP_NAME-MY_PROJECT_NAME.OPENSHIFT_HOSTNAME      MY_APP_NAME      8080</programlisting>
</para>
</formalpara>
<simpara>The route information of a pod gives you the base URL which you use to access it. In the example above, you would use <literal>http://MY_APP_NAME-MY_PROJECT_NAME.OPENSHIFT_HOSTNAME</literal> as the base URL to access the application.</simpara>
</listitem>
</orderedlist>
</section>
</section>
<section xml:id="deploying-the-example-application-to-openshiftcontainerplatform_http-api">
<title>Deploying the REST API Level 0 example application to OpenShift Container Platform</title>
<simpara>The process of creating and deploying example applications to OpenShift Container Platform is similar to OpenShift Online:</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>The example application created using <link xl:href="https://developers.redhat.com/launch">developers.redhat.com/launch</link> or <link xl:href="/docs/minishift-installation.html">the Fabric8 Launcher tool</link>.</simpara>
</listitem>
</itemizedlist>
<itemizedlist>
<title>Procedure</title>
<listitem>
<simpara>Follow the instructions in <xref linkend="deploying-the-example-application-to-openshiftonline_http-api"/>, only use the URL and user credentials from the OpenShift Container Platform Web Console.</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="interacting-with-the-unmodfied-http-api-example-application-for-openliberty_http-api">
<title>Interacting with the unmodified REST API Level 0 example application for Open Liberty</title>
<simpara>The example provides a default HTTP endpoint that accepts GET requests.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>Your application running</simpara>
</listitem>
<listitem>
<simpara>The <literal>curl</literal> binary or a web browser</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Use <literal>curl</literal> to execute a <literal>GET</literal> request against the example. You can also use a browser to do this.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ curl http://MY_APP_NAME-MY_PROJECT_NAME.OPENSHIFT_HOSTNAME/api/greeting
{"content":"Hello, World!"}</programlisting>
</listitem>
<listitem>
<simpara>Use <literal>curl</literal> to execute a <literal>GET</literal> request with the <literal>name</literal> URL parameter against the example. You can also use a browser to do this.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ curl http://MY_APP_NAME-MY_PROJECT_NAME.OPENSHIFT_HOSTNAME/api/greeting?name=Sarah
{"content":"Hello, Sarah!"}</programlisting>
</listitem>
</orderedlist>
<note>
<simpara>From a browser, you can also use a form provided by the example to perform these same interactions. The form is located at the root of the project <literal>http://MY_APP_NAME-MY_PROJECT_NAME.OPENSHIFT_HOSTNAME</literal>.</simpara>
</note>
</section>
<section xml:id="running-the-example-application-integration-tests_http-api">
<title>Running the REST API Level 0 example application integration tests</title>
<simpara>This example application includes a self-contained set of integration tests.
When run inside an OpenShift project, the tests:</simpara>
<itemizedlist>
<listitem>
<simpara>Deploy a test instance of the application to the project.</simpara>
</listitem>
<listitem>
<simpara>Execute the individual tests on that instance.</simpara>
</listitem>
<listitem>
<simpara>Remove all instances of the application from the project when the testing is done.</simpara>
</listitem>
</itemizedlist>
<warning>
<simpara>Executing integration tests removes all existing instances of the example application from the target OpenShift project.
To avoid accidentally removing your example application, ensure that you create and select a separate OpenShift project to execute the tests.</simpara>
</warning>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>The <literal>oc</literal> client authenticated</simpara>
</listitem>
<listitem>
<simpara>An empty OpenShift project</simpara>
</listitem>
</itemizedlist>
<formalpara>
<title>Procedure</title>
<para>Execute the following command to run the integration tests:</para>
</formalpara>
<programlisting language="bash" linenumbering="unnumbered">$ mvn clean verify -Popenshift,openshift-it</programlisting>
</section>
<section xml:id="rest-resources_http-api">
<title>REST resources</title>
<simpara>More background and related information on REST can be found here:</simpara>
<itemizedlist>
<listitem>
<simpara><link xl:href="https://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm">Architectural Styles and
the Design of Network-based Software Architectures - Representational State Transfer (REST)</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://martinfowler.com/articles/richardsonMaturityModel.html">Richardson Maturity Model</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://www.jcp.org/en/jsr/detail?id=311">JSR 311: JAX-RS: The JavaTM API for RESTful Web Services</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="/docs/spring-boot-runtime.html#example-rest-http-spring-boot">REST API Level 0 for Spring Boot</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="/docs/vertx-runtime.html#example-rest-http-vertx">REST API Level 0 for Eclipse Vert.x</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="/docs/thorntail-runtime.html#example-rest-http-wf-swarm">REST API Level 0 for Thorntail</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="/docs/nodejs-runtime.html#example-rest-http-nodejs">REST API Level 0 for Node.js</link></simpara>
</listitem>
</itemizedlist>
</section>
</section>
<section xml:id="example-configmap-open-liberty">
<title>Externalized Configuration example for Open Liberty</title>
<simpara>Example proficiency level:
<link linkend="proficiency_foundational"><emphasis role="strong">Foundational</emphasis></link>.</simpara>
<simpara>Externalized Configuration provides a basic example of using a ConfigMap to externalize configuration. <emphasis>ConfigMap</emphasis> is an object used by OpenShift to inject configuration data as simple key and value pairs into one or more Linux containers while keeping the containers independent of OpenShift.</simpara>
<simpara>This example shows you how to:</simpara>
<itemizedlist>
<listitem>
<simpara>Set up and configure a <literal>ConfigMap</literal>.</simpara>
</listitem>
<listitem>
<simpara>Use the configuration provided by the <literal>ConfigMap</literal> within an application.</simpara>
</listitem>
<listitem>
<simpara>Deploy changes to the <literal>ConfigMap</literal> configuration of running applications.</simpara>
</listitem>
</itemizedlist>
<section xml:id="the-externalized-configuration-design-pattern_configmap">
<title>The externalized configuration design pattern</title>
<simpara>Whenever possible, externalize the application configuration and separate it from the application code.
This allows the application configuration to change as it moves through different environments, but leaves the code unchanged.
Externalizing the configuration also keeps sensitive or internal information out of your code base and version control.
Many languages and application servers provide environment variables to support externalizing an application&#8217;s configuration.</simpara>
<simpara>Microservices architectures and multi-language (polyglot) environments add a layer of complexity to managing an application&#8217;s configuration.
Applications consist of independent, distributed services, and each can have its own configuration.
Keeping all configuration data synchronized and accessible creates a maintenance challenge.</simpara>
<simpara>ConfigMaps enable the application configuration to be externalized and used in individual Linux containers and pods on OpenShift.
You can create a ConfigMap object in a variety of ways, including using a YAML file, and inject it into the Linux container.
ConfigMaps also allow you to group and scale sets of configuration data.
This lets you configure a large number of environments beyond the basic <emphasis>Development</emphasis>, <emphasis>Stage</emphasis>, and <emphasis>Production</emphasis>.
You can find more information about ConfigMaps in the <link xl:href="https://docs.openshift.org/latest/dev_guide/configmaps.html">OpenShift documentation</link>.</simpara>
</section>
<section xml:id="configmap-design-tradeoffs_configmap">
<title>Externalized Configuration design tradeoffs</title>
<table frame="all" rowsep="1" colsep="1">
<title>Design Tradeoffs</title>
<?dbhtml table-width="100%"?>
<?dbfo table-width="100%"?>
<?dblatex table-width="100%"?>
<tgroup cols="2">
<colspec colname="col_1" colwidth="212.5*"/>
<colspec colname="col_2" colwidth="212.5*"/>
<thead>
<row>
<entry align="left" valign="top">Pros</entry>
<entry align="left" valign="top">Cons</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><itemizedlist>
<listitem>
<simpara>Configuration is separate from deployments</simpara>
</listitem>
<listitem>
<simpara>Can be updated independently</simpara>
</listitem>
<listitem>
<simpara>Can be shared across services</simpara>
</listitem>
</itemizedlist></entry>
<entry align="left" valign="top"><itemizedlist>
<listitem>
<simpara>Adding configuration to environment requires additional step</simpara>
</listitem>
<listitem>
<simpara>Has to be maintained separately</simpara>
</listitem>
<listitem>
<simpara>Requires coordination beyond the scope of a service</simpara>
</listitem>
</itemizedlist></entry>
</row>
</tbody>
</tgroup>
</table>
</section>
<section xml:id="deploying-the-example-application-to-openshiftonline_configmap">
<title>Deploying the Externalized Configuration example application to OpenShift Online</title>
<simpara>Use one of the following options to execute the Externalized Configuration example application on OpenShift Online.</simpara>
<itemizedlist>
<listitem>
<simpara><link linkend="deploying-the-example-application-using-launcher-oso_configmap-oso">Use developers.redhat.com/launch</link></simpara>
</listitem>
<listitem>
<simpara><link linkend="deploying-the-configmap-example-application-using-the-oc-cli-client_configmap-oso">Use the <literal>oc</literal> CLI client</link></simpara>
</listitem>
</itemizedlist>
<simpara>Although each method uses the same <literal>oc</literal> commands to deploy your application, using developers.redhat.com/launch provides an automated deployment workflow that executes the <literal>oc</literal> commands for you.</simpara>
<section xml:id="deploying-the-example-application-using-launcher-oso_configmap-oso">
<title>Deploying the example application using developers.redhat.com/launch</title>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>An account at <link xl:href="https://manage.openshift.com">OpenShift Online</link>.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Navigate to the <link xl:href="https://developers.redhat.com/launch">developers.redhat.com/launch</link> URL in a browser and log in.</simpara>
</listitem>
<listitem>
<simpara>Follow on-screen instructions to create and launch your example application in Open Liberty.</simpara>
</listitem>
</orderedlist>
</section>
<section xml:id="authenticating-the-oc-cli-client_configmap-oso">
<title>Authenticating the <literal>oc</literal> CLI client</title>
<simpara>To work with example applications on <link xl:href="https://manage.openshift.com">OpenShift Online</link> using the <literal>oc</literal> command-line client, you must authenticate the client using the token provided by the <link xl:href="https://manage.openshift.com">OpenShift Online</link> web interface.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>An account at <link xl:href="https://manage.openshift.com">OpenShift Online</link>.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Navigate to the <link xl:href="https://manage.openshift.com">OpenShift Online</link> URL in a browser.</simpara>
</listitem>
<listitem>
<simpara>Click on the question mark icon in the top right-hand corner of the Web console, next to your user name.</simpara>
</listitem>
<listitem>
<simpara>Select <emphasis>Command Line Tools</emphasis> in the drop-down menu.</simpara>
</listitem>
<listitem>
<simpara>Find the text box that contains the <literal>oc login &#8230;&#8203;</literal> command with the hidden token, and click the button next to it to copy its content to your clipboard.</simpara>
</listitem>
<listitem>
<simpara>Paste the command into a terminal application. The command uses your authentication token to authenticate your <literal>oc</literal> CLI client with your <link xl:href="https://manage.openshift.com">OpenShift Online</link> account.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ oc login OPENSHIFT_URL --token=MYTOKEN</programlisting>
</listitem>
</orderedlist>
</section>
<section xml:id="deploying-the-configmap-example-application-using-the-oc-cli-client_configmap-oso">
<title>Deploying the Externalized Configuration example application using the <literal>oc</literal> CLI client</title>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>The example application created using <link xl:href="https://developers.redhat.com/launch">developers.redhat.com/launch</link>.
For more information, see <xref linkend="deploying-the-example-application-using-launcher-oso_configmap-oso"/>.</simpara>
</listitem>
<listitem>
<simpara>The <literal>oc</literal> client authenticated. For more information, see <xref linkend="authenticating-the-oc-cli-client_configmap-oso"/>.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Clone your project from GitHub.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ git clone git@github.com:USERNAME/MY_PROJECT_NAME.git</programlisting>
<simpara>Alternatively, if you downloaded a ZIP file of your project, extract it.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ unzip MY_PROJECT_NAME.zip</programlisting>
</listitem>
<listitem>
<simpara>Create a new OpenShift project.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ oc new-project MY_PROJECT_NAME</programlisting>
</listitem>
<listitem>
<simpara>Navigate to the root directory of your application.</simpara>
</listitem>
<listitem>
<simpara>Use Maven to start the deployment to OpenShift.</simpara>
<simpara>+
This command uses the Fabric8 Maven Plugin to launch the <link xl:href="https://docs.openshift.com/container-platform/latest/architecture/core_concepts/builds_and_image_streams.html#source-build">S2I process</link> on OpenShift and to start the pod.</simpara>
</listitem>
<listitem>
<simpara>Check the status of your application and ensure your pod is running.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ oc get pods -w
NAME                                       READY     STATUS      RESTARTS   AGE
MY_APP_NAME-1-aaaaa               1/1       Running     0          58s
MY_APP_NAME-s2i-1-build           0/1       Completed   0          2m</programlisting>
<simpara>The <literal>MY_APP_NAME-1-aaaaa</literal> pod should have a status of <literal>Running</literal> once its fully deployed and started.
Your specific pod name will vary.
The number in the middle will increase with each new build.
The letters at the end are generated when the pod is created.</simpara>
</listitem>
<listitem>
<simpara>After your example application is deployed and started, determine its route.</simpara>
<formalpara>
<title>Example Route Information</title>
<para>
<programlisting language="bash" linenumbering="unnumbered">$ oc get routes
NAME                 HOST/PORT                                                     PATH      SERVICES        PORT      TERMINATION
MY_APP_NAME         MY_APP_NAME-MY_PROJECT_NAME.OPENSHIFT_HOSTNAME      MY_APP_NAME      8080</programlisting>
</para>
</formalpara>
<simpara>The route information of a pod gives you the base URL which you use to access it. In the example above, you would use <literal>http://MY_APP_NAME-MY_PROJECT_NAME.OPENSHIFT_HOSTNAME</literal> as the base URL to access the application.</simpara>
</listitem>
</orderedlist>
</section>
</section>
<section xml:id="deploying-the-example-application-to-openshiftlocal_configmap">
<title>Deploying the Externalized Configuration example application to Minishift or CDK</title>
<simpara>Use one of the following options to execute the Externalized Configuration example application locally on Minishift or CDK:</simpara>
<itemizedlist>
<listitem>
<simpara><link linkend="deploying-the-example-application-using-the-launcher-tool_configmap-osl">Using Fabric8 Launcher</link></simpara>
</listitem>
<listitem>
<simpara><link linkend="deploying-the-configmap-example-application-using-the-oc-cli-client_configmap-osl">Using the <literal>oc</literal> CLI client</link></simpara>
</listitem>
</itemizedlist>
<simpara>Although each method uses the same <literal>oc</literal> commands to deploy your application, using Fabric8 Launcher provides an automated deployment workflow that executes the <literal>oc</literal> commands for you.</simpara>
<section xml:id="getting-the-launcher-tool-url-and-credentials_configmap-osl">
<title>Getting the Fabric8 Launcher tool URL and credentials</title>
<simpara>You need the Fabric8 Launcher tool URL and user credentials to create and deploy example applications on Minishift or CDK. This information is provided when the Minishift or CDK is started.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>The Fabric8 Launcher tool installed, configured, and running. For more information, see the <link xl:href="/docs/minishift-installation.html">Install and Configure the Fabric8 Launcher Tool</link> guide.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Navigate to the console where you started Minishift or CDK.</simpara>
</listitem>
<listitem>
<simpara>Check the console output for the URL and user credentials you can use to access the running Fabric8 Launcher:</simpara>
<formalpara>
<title>Example Console Output from a Minishift or CDK Startup</title>
<para>
<programlisting language="bash" linenumbering="unnumbered">...
-- Removing temporary directory ... OK
-- Server Information ...
   OpenShift server started.
   The server is accessible via web console at:
       https://192.168.42.152:8443

   You are logged in as:
       User:     developer
       Password: developer

   To login as administrator:
       oc login -u system:admin</programlisting>
</para>
</formalpara>
</listitem>
</orderedlist>
</section>
<section xml:id="deploying-the-example-application-using-the-launcher-tool_configmap-osl">
<title>Deploying the example application using the Fabric8 Launcher tool</title>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>The URL of your running Fabric8 Launcher instance and the user credentials of your Minishift or CDK.
For more information, see <xref linkend="getting-the-launcher-tool-url-and-credentials_configmap-osl"/>.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Navigate to the Fabric8 Launcher URL in a browser.</simpara>
</listitem>
<listitem>
<simpara>Follow the on-screen instructions to create and launch your example application in Open Liberty.</simpara>
</listitem>
</orderedlist>
</section>
<section xml:id="authenticating-the-oc-cli-client_configmap-osl">
<title>Authenticating the <literal>oc</literal> CLI client</title>
<simpara>To work with example applications on Minishift or CDK using the <literal>oc</literal> command-line client, you must authenticate the client using the token provided by the Minishift or CDK web interface.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>The URL of your running Fabric8 Launcher instance and the user credentials of your Minishift or CDK. For more information, see <xref linkend="getting-the-launcher-tool-url-and-credentials_configmap-osl"/>.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Navigate to the Minishift or CDK URL in a browser.</simpara>
</listitem>
<listitem>
<simpara>Click on the question mark icon in the top right-hand corner of the Web console, next to your user name.</simpara>
</listitem>
<listitem>
<simpara>Select <emphasis>Command Line Tools</emphasis> in the drop-down menu.</simpara>
</listitem>
<listitem>
<simpara>Find the text box that contains the <literal>oc login &#8230;&#8203;</literal> command with the hidden token, and click the button next to it to copy its content to your clipboard.</simpara>
</listitem>
<listitem>
<simpara>Paste the command into a terminal application. The command uses your authentication token to authenticate your <literal>oc</literal> CLI client with your Minishift or CDK account.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ oc login OPENSHIFT_URL --token=MYTOKEN</programlisting>
</listitem>
</orderedlist>
</section>
<section xml:id="deploying-the-configmap-example-application-using-the-oc-cli-client_configmap-osl">
<title>Deploying the Externalized Configuration example application using the <literal>oc</literal> CLI client</title>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>The example application created using Fabric8 Launcher tool on a Minishift or CDK.
For more information, see <xref linkend="deploying-the-example-application-using-the-launcher-tool_configmap-osl"/>.</simpara>
</listitem>
<listitem>
<simpara>Your Fabric8 Launcher tool URL.</simpara>
</listitem>
<listitem>
<simpara>The <literal>oc</literal> client authenticated. For more information, see <xref linkend="authenticating-the-oc-cli-client_configmap-osl"/>.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Clone your project from GitHub.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ git clone git@github.com:USERNAME/MY_PROJECT_NAME.git</programlisting>
<simpara>Alternatively, if you downloaded a ZIP file of your project, extract it.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ unzip MY_PROJECT_NAME.zip</programlisting>
</listitem>
<listitem>
<simpara>Create a new OpenShift project.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ oc new-project MY_PROJECT_NAME</programlisting>
</listitem>
<listitem>
<simpara>Navigate to the root directory of your application.</simpara>
</listitem>
<listitem>
<simpara>Use Maven to start the deployment to OpenShift.</simpara>
<simpara>+
This command uses the Fabric8 Maven Plugin to launch the <link xl:href="https://docs.openshift.com/container-platform/latest/architecture/core_concepts/builds_and_image_streams.html#source-build">S2I process</link> on OpenShift and to start the pod.</simpara>
</listitem>
<listitem>
<simpara>Check the status of your application and ensure your pod is running.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ oc get pods -w
NAME                                       READY     STATUS      RESTARTS   AGE
MY_APP_NAME-1-aaaaa               1/1       Running     0          58s
MY_APP_NAME-s2i-1-build           0/1       Completed   0          2m</programlisting>
<simpara>The <literal>MY_APP_NAME-1-aaaaa</literal> pod should have a status of <literal>Running</literal> once its fully deployed and started.
Your specific pod name will vary.
The number in the middle will increase with each new build.
The letters at the end are generated when the pod is created.</simpara>
</listitem>
<listitem>
<simpara>After your example application is deployed and started, determine its route.</simpara>
<formalpara>
<title>Example Route Information</title>
<para>
<programlisting language="bash" linenumbering="unnumbered">$ oc get routes
NAME                 HOST/PORT                                                     PATH      SERVICES        PORT      TERMINATION
MY_APP_NAME         MY_APP_NAME-MY_PROJECT_NAME.OPENSHIFT_HOSTNAME      MY_APP_NAME      8080</programlisting>
</para>
</formalpara>
<simpara>The route information of a pod gives you the base URL which you use to access it. In the example above, you would use <literal>http://MY_APP_NAME-MY_PROJECT_NAME.OPENSHIFT_HOSTNAME</literal> as the base URL to access the application.</simpara>
</listitem>
</orderedlist>
</section>
</section>
<section xml:id="deploying-the-example-application-to-openshiftcontainerplatform_configmap">
<title>Deploying the Externalized Configuration example application to OpenShift Container Platform</title>
<simpara>The process of creating and deploying example applications to OpenShift Container Platform is similar to OpenShift Online:</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>The example application created using <link xl:href="https://developers.redhat.com/launch">developers.redhat.com/launch</link> or <link xl:href="/docs/minishift-installation.html">the Fabric8 Launcher tool</link>.</simpara>
</listitem>
</itemizedlist>
<itemizedlist>
<title>Procedure</title>
<listitem>
<simpara>Follow the instructions in <xref linkend="deploying-the-example-application-to-openshiftonline_configmap"/>, only use the URL and user credentials from the OpenShift Container Platform Web Console.</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="interacting-with-the-unmodified-configmap-example-application-for-openliberty_configmap">
<title>Interacting with the unmodified Externalized Configuration example application for Open Liberty</title>
<simpara>The example provides a default HTTP endpoint that accepts GET requests.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>Your application running</simpara>
</listitem>
<listitem>
<simpara>The <literal>curl</literal> binary or a web browser</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Use <literal>curl</literal> to execute a <literal>GET</literal> request against the example.
You can also use a browser to do this.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ curl http://MY_APP_NAME-MY_PROJECT_NAME.OPENSHIFT_HOSTNAME/api/greeting
{"content":"Hello World from a ConfigMap!"}</programlisting>
</listitem>
<listitem>
<simpara>Update the deployed ConfigMap configuration.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ oc edit configmap app-config</programlisting>
<simpara>Change the value for the <literal>greeting.message</literal> key to <literal>Bonjour!</literal> and save the file. After you save this, the changes will be propagated to your OpenShift instance.</simpara>
</listitem>
<listitem>
<simpara>Deploy the new version of your application so the ConfigMap configuration changes are picked up.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ oc rollout latest dc/MY_APP_NAME</programlisting>
</listitem>
<listitem>
<simpara>Check the status of your example and ensure your new pod is running.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ oc get pods -w
NAME                             READY     STATUS      RESTARTS   AGE
MY_APP_NAME-1-aaaaa       1/1       Running     0          58s
MY_APP_NAME-s2i-1-build   0/1       Completed   0          2m</programlisting>
<simpara>The <literal>MY_APP_NAME-1-aaaaa</literal> pod should have a status of <literal>Running</literal> once it&#8217;s fully deployed and started.
Your specific pod name will vary.
The number in the middle will increase with each new build.
The letters at the end are generated when the pod is created.</simpara>
</listitem>
<listitem>
<simpara>Execute a <literal>GET</literal> request using <literal>curl</literal> against the example with the updated ConfigMap configuration to see your updated greeting.
You can also do this from your browser using the web form provided by the application.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ curl http://MY_APP_NAME-MY_PROJECT_NAME.OPENSHIFT_HOSTNAME/api/greeting
{"content":"Bonjour!"}</programlisting>
</listitem>
</orderedlist>
</section>
<section xml:id="running-the-example-application-integration-tests_configmap">
<title>Running the Externalized Configuration example application integration tests</title>
<simpara>This example application includes a self-contained set of integration tests.
When run inside an OpenShift project, the tests:</simpara>
<itemizedlist>
<listitem>
<simpara>Deploy a test instance of the application to the project.</simpara>
</listitem>
<listitem>
<simpara>Execute the individual tests on that instance.</simpara>
</listitem>
<listitem>
<simpara>Remove all instances of the application from the project when the testing is done.</simpara>
</listitem>
</itemizedlist>
<warning>
<simpara>Executing integration tests removes all existing instances of the example application from the target OpenShift project.
To avoid accidentally removing your example application, ensure that you create and select a separate OpenShift project to execute the tests.</simpara>
</warning>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>The <literal>oc</literal> client authenticated</simpara>
</listitem>
<listitem>
<simpara>An empty OpenShift project</simpara>
</listitem>
</itemizedlist>
<formalpara>
<title>Procedure</title>
<para>Execute the following command to run the integration tests:</para>
</formalpara>
<programlisting language="bash" linenumbering="unnumbered">$ mvn clean verify -Popenshift,openshift-it</programlisting>
</section>
<section xml:id="configmap-resources_configmap">
<title>Externalized Configuration resources</title>
<simpara>More background and related information on Externalized Configuration and ConfigMap can be found here:</simpara>
<itemizedlist>
<listitem>
<simpara><link xl:href="https://docs.openshift.org/latest/dev_guide/configmaps.html">OpenShift ConfigMap Documentation</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://blog.openshift.com/configuring-your-application-part-1/">Blog Post about ConfigMap in OpenShift</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="/docs/spring-boot-runtime.html#example-configmap-spring-boot">Externalized Configuration for Spring Boot</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="/docs/vertx-runtime.html#example-configmap-vertx">Externalized Configuration for Eclipse Vert.x</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="/docs/thorntail-runtime.html#example-configmap-wf-swarm">Externalized Configuration for Thorntail</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="/docs/nodejs-runtime.html#example-configmap-nodejs">Externalized Configuration for Node.js</link></simpara>
</listitem>
</itemizedlist>
</section>
</section>
<section xml:id="example-crud-open-liberty">
<title>Relational Database Backend example for Open Liberty</title>
<simpara><emphasis role="strong">Limitation:</emphasis> Run this example application on a Minishift or CDK. You can also use a manual workflow to deploy this example to OpenShift Online Pro and OpenShift Container Platform.
This example is not currently available on OpenShift Online Starter.</simpara>
<simpara>Example proficiency level:
<link linkend="proficiency_foundational"><emphasis role="strong">Foundational</emphasis></link>.</simpara>
<formalpara>
<title>What the Relational Database Backend example does</title>
<para>The Relational Database Backend example expands on the REST API Level 0 application to provide a basic example of performing <emphasis>create</emphasis>, <emphasis>read</emphasis>, <emphasis>update</emphasis> and <emphasis>delete</emphasis> (<emphasis>CRUD</emphasis>) operations on a PostgreSQL database using a simple HTTP API. <emphasis>CRUD</emphasis> operations are the four basic functions of persistent storage, widely used when developing an HTTP API dealing with a database.</para>
</formalpara>
<simpara>The example also demonstrates the ability of the HTTP application to locate and connect to a database in OpenShift.
Each runtime shows how to implement the connectivity solution best suited in the given case.
The runtime can choose between options such as using <emphasis>JDBC</emphasis>, <emphasis>JPA</emphasis>, or accessing <emphasis>ORM</emphasis> APIs directly.</simpara>
<simpara>The example application exposes an HTTP API, which provides endpoints that allow you to manipulate data by performing  <emphasis>CRUD</emphasis> operations over HTTP.
The <emphasis>CRUD</emphasis> operations are mapped to HTTP <literal>Verbs</literal>.
The API uses JSON formatting to receive requests and return responses to the user.
The user can also use a user interface provided by the example to use the application.
Specifically, this example provides an application that allows you to:</simpara>
<itemizedlist>
<listitem>
<simpara>Navigate to the application web interface in your browser.
This exposes a simple website allowing you to perform <emphasis>CRUD</emphasis> operations on the data in the <literal>my_data</literal> database.</simpara>
</listitem>
<listitem>
<simpara>Execute an HTTP <literal>GET</literal> request on the <literal>api/fruits</literal> endpoint.</simpara>
</listitem>
<listitem>
<simpara>Receive a response formatted as a JSON array containing the list of all fruits in the database.</simpara>
</listitem>
<listitem>
<simpara>Execute an HTTP <literal>GET</literal> request on the <literal>api/fruits/*</literal> endpoint while passing in a valid item ID as an argument.</simpara>
</listitem>
<listitem>
<simpara>Receive a response in JSON format containing the name of the fruit with the given ID.
If no item matches the specified ID, the call results in an HTTP error 404.</simpara>
</listitem>
<listitem>
<simpara>Execute an HTTP <literal>POST</literal> request on the <literal>api/fruits</literal> endpoint passing in a valid <literal>name</literal> value to create a new entry in the database.</simpara>
</listitem>
<listitem>
<simpara>Execute an HTTP <literal>PUT</literal> request on the <literal>api/fruits/*</literal> endpoint passing in a valid ID and a name as an argument.
This updates the name of the item with the given ID to match the name specified in your request.</simpara>
</listitem>
<listitem>
<simpara>Execute an HTTP <literal>DELETE</literal> request on the <literal>api/fruits/*</literal> endpoint, passing in a valid ID as an argument.
This removes the item with the specified ID from the database and returns an HTTP code <literal>204</literal> (No Content) as a response.
If you pass in an invalid ID, the call results in an HTTP error <literal>404</literal>.</simpara>
</listitem>
</itemizedlist>
<simpara>This example also contains a set of automated <link linkend="running-the-example-application-integration-tests_crud">integration tests</link> that can be used to verify that the application is fully integrated with the database.</simpara>
<simpara>This example does not showcase a fully matured RESTful model (level 3), but it does use compatible HTTP verbs and status, following the recommended HTTP API practices.</simpara>
<section xml:id="crud-design-tradeoffs_crud">
<title>Relational Database Backend design tradeoffs</title>
<table frame="all" rowsep="1" colsep="1">
<title>Design Tradeoffs</title>
<?dbhtml table-width="100%"?>
<?dbfo table-width="100%"?>
<?dblatex table-width="100%"?>
<tgroup cols="2">
<colspec colname="col_1" colwidth="212.5*"/>
<colspec colname="col_2" colwidth="212.5*"/>
<thead>
<row>
<entry align="left" valign="top">Pros</entry>
<entry align="left" valign="top">Cons</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><itemizedlist>
<listitem>
<simpara>Each runtime determines how  to implement the database interactions. One can use a low-level connectivity API such as JDBC, some other can use JPA, and yet another can access ORM APIs directly. Each runtime decides what would be the best way.</simpara>
</listitem>
<listitem>
<simpara>Each runtime determines how the schema is created.</simpara>
</listitem>
</itemizedlist></entry>
<entry align="left" valign="top"><itemizedlist>
<listitem>
<simpara>The PostgreSQL database provided with this example application is not backed up with persistent storage. Changes to the database are lost if you stop or redeploy the database pod. To use an external database with your example application&#8217;s pod in order to preserve changes, see the <link xl:href="https://docs.openshift.com/online/dev_guide/integrating_external_services.html">Integrating External Services chapter</link> of the OpenShift Documentation. It is also possible to set up persistent storage with database containers on OpenShift. (For more details about using persistent storage with OpenShift and containers, see the <link xl:href="https://docs.openshift.com/online/architecture/additional_concepts/storage.html">Persistent Storage</link>, <link xl:href="https://docs.openshift.com/online/dev_guide/volumes.html">Managing Volumes</link> and <link xl:href="https://docs.openshift.com/online/dev_guide/persistent_volumes.html">Persistent Volumes</link> chapters of the OpenShift Documentation).</simpara>
</listitem>
</itemizedlist></entry>
</row>
</tbody>
</tgroup>
</table>
</section>
<section xml:id="deploying-the-example-application-to-openshiftonline_crud">
<title>Deploying the Relational Database Backend example application to OpenShift Online</title>
<simpara>Use one of the following options to execute the Relational Database Backend example application on OpenShift Online.</simpara>
<itemizedlist>
<listitem>
<simpara><link linkend="deploying-the-example-application-using-launcher-oso_crud-oso">Use developers.redhat.com/launch</link></simpara>
</listitem>
<listitem>
<simpara><link linkend="deploying-the-crud-example-application-using-the-oc-cli-client_crud-oso">Use the <literal>oc</literal> CLI client</link></simpara>
</listitem>
</itemizedlist>
<simpara>Although each method uses the same <literal>oc</literal> commands to deploy your application, using developers.redhat.com/launch provides an automated deployment workflow that executes the <literal>oc</literal> commands for you.</simpara>
<section xml:id="deploying-the-example-application-using-launcher-oso_crud-oso">
<title>Deploying the example application using developers.redhat.com/launch</title>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>An account at <link xl:href="https://manage.openshift.com">OpenShift Online</link>.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Navigate to the <link xl:href="https://developers.redhat.com/launch">developers.redhat.com/launch</link> URL in a browser and log in.</simpara>
</listitem>
<listitem>
<simpara>Follow on-screen instructions to create and launch your example application in Open Liberty.</simpara>
</listitem>
</orderedlist>
</section>
<section xml:id="authenticating-the-oc-cli-client_crud-oso">
<title>Authenticating the <literal>oc</literal> CLI client</title>
<simpara>To work with example applications on <link xl:href="https://manage.openshift.com">OpenShift Online</link> using the <literal>oc</literal> command-line client, you must authenticate the client using the token provided by the <link xl:href="https://manage.openshift.com">OpenShift Online</link> web interface.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>An account at <link xl:href="https://manage.openshift.com">OpenShift Online</link>.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Navigate to the <link xl:href="https://manage.openshift.com">OpenShift Online</link> URL in a browser.</simpara>
</listitem>
<listitem>
<simpara>Click on the question mark icon in the top right-hand corner of the Web console, next to your user name.</simpara>
</listitem>
<listitem>
<simpara>Select <emphasis>Command Line Tools</emphasis> in the drop-down menu.</simpara>
</listitem>
<listitem>
<simpara>Find the text box that contains the <literal>oc login &#8230;&#8203;</literal> command with the hidden token, and click the button next to it to copy its content to your clipboard.</simpara>
</listitem>
<listitem>
<simpara>Paste the command into a terminal application. The command uses your authentication token to authenticate your <literal>oc</literal> CLI client with your <link xl:href="https://manage.openshift.com">OpenShift Online</link> account.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ oc login OPENSHIFT_URL --token=MYTOKEN</programlisting>
</listitem>
</orderedlist>
</section>
<section xml:id="deploying-the-crud-example-application-using-the-oc-cli-client_crud-oso">
<title>Deploying the Relational Database Backend example application using the <literal>oc</literal> CLI client</title>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>The example application created using <link xl:href="https://developers.redhat.com/launch">developers.redhat.com/launch</link>.
For more information, see <xref linkend="deploying-the-example-application-using-launcher-oso_crud-oso"/>.</simpara>
</listitem>
<listitem>
<simpara>The <literal>oc</literal> client authenticated. For more information, see <xref linkend="authenticating-the-oc-cli-client_crud-oso"/>.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Clone your project from GitHub.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ git clone git@github.com:USERNAME/MY_PROJECT_NAME.git</programlisting>
<simpara>Alternatively, if you downloaded a ZIP file of your project, extract it.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ unzip MY_PROJECT_NAME.zip</programlisting>
</listitem>
<listitem>
<simpara>Create a new OpenShift project.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ oc new-project MY_PROJECT_NAME</programlisting>
</listitem>
<listitem>
<simpara>Navigate to the root directory of your application.</simpara>
</listitem>
<listitem>
<simpara>Deploy the PostgreSQL database to OpenShift.
Ensure that you use the following values for user name, password, and database name when creating your database application.
The example application is pre-configured to use these values.
Using different values prevents your application from integrating with the database.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ oc new-app -e POSTGRESQL_USER=luke -ePOSTGRESQL_PASSWORD=secret -ePOSTGRESQL_DATABASE=my_data centos/postgresql-10-centos7 --name=my-database</programlisting>
</listitem>
<listitem>
<simpara>Check the status of your database and ensure the pod is running.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ oc get pods -w
my-database-1-aaaaa   1/1       Running   0         45s
my-database-1-deploy   0/1       Completed   0         53s</programlisting>
<simpara>The <literal>my-database-1-aaaaa</literal> pod should have a status of <literal>Running</literal> and should be indicated as ready once it is fully deployed and started.
Your specific pod name will vary.
The number in the middle will increase with each new build.
The letters at the end are generated when the pod is created.</simpara>
</listitem>
<listitem>
<simpara>Use maven to start the deployment to OpenShift.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ mvn clean fabric8:deploy -Popenshift</programlisting>
<simpara>This command uses the Fabric8 Maven Plugin to launch the <link xl:href="https://docs.openshift.com/container-platform/latest/architecture/core_concepts/builds_and_image_streams.html#source-build">S2I process</link> on OpenShift and to start the pod.</simpara>
</listitem>
<listitem>
<simpara>Check the status of your application and ensure your pod is running.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ oc get pods -w
NAME                             READY     STATUS      RESTARTS   AGE
MY_APP_NAME-1-aaaaa       1/1       Running     0          58s
MY_APP_NAME-s2i-1-build   0/1       Completed   0          2m</programlisting>
<simpara>Your <literal>MY_APP_NAME-1-aaaaa</literal> pod should have a status of <literal>Running</literal> and should be indicated as ready once it is fully deployed and started.</simpara>
</listitem>
<listitem>
<simpara>After your example application is deployed and started, determine its route.</simpara>
<formalpara>
<title>Example Route Information</title>
<para>
<programlisting language="bash" linenumbering="unnumbered">$ oc get routes
NAME                 HOST/PORT                                     PATH      SERVICES             PORT      TERMINATION
MY_APP_NAME   MY_APP_NAME-MY_PROJECT_NAME.OPENSHIFT_HOSTNAME      MY_APP_NAME   8080</programlisting>
</para>
</formalpara>
<simpara>The route information of a pod gives you the base URL which you use to access it. In the example above, you would use <literal>http://MY_APP_NAME-MY_PROJECT_NAME.OPENSHIFT_HOSTNAME</literal> as the base URL to access the application.</simpara>
</listitem>
</orderedlist>
</section>
</section>
<section xml:id="deploying-the-example-application-to-openshiftlocal_crud">
<title>Deploying the Relational Database Backend example application to Minishift or CDK</title>
<simpara>Use one of the following options to execute the Relational Database Backend example application locally on Minishift or CDK:</simpara>
<itemizedlist>
<listitem>
<simpara><link linkend="deploying-the-example-application-using-the-launcher-tool_crud-osl">Using Fabric8 Launcher</link></simpara>
</listitem>
<listitem>
<simpara><link linkend="deploying-the-crud-example-application-using-the-oc-cli-client_crud-osl">Using the <literal>oc</literal> CLI client</link></simpara>
</listitem>
</itemizedlist>
<simpara>Although each method uses the same <literal>oc</literal> commands to deploy your application, using Fabric8 Launcher provides an automated deployment workflow that executes the <literal>oc</literal> commands for you.</simpara>
<section xml:id="getting-the-launcher-tool-url-and-credentials_crud-osl">
<title>Getting the Fabric8 Launcher tool URL and credentials</title>
<simpara>You need the Fabric8 Launcher tool URL and user credentials to create and deploy example applications on Minishift or CDK. This information is provided when the Minishift or CDK is started.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>The Fabric8 Launcher tool installed, configured, and running. For more information, see the <link xl:href="/docs/minishift-installation.html">Install and Configure the Fabric8 Launcher Tool</link> guide.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Navigate to the console where you started Minishift or CDK.</simpara>
</listitem>
<listitem>
<simpara>Check the console output for the URL and user credentials you can use to access the running Fabric8 Launcher:</simpara>
<formalpara>
<title>Example Console Output from a Minishift or CDK Startup</title>
<para>
<programlisting language="bash" linenumbering="unnumbered">...
-- Removing temporary directory ... OK
-- Server Information ...
   OpenShift server started.
   The server is accessible via web console at:
       https://192.168.42.152:8443

   You are logged in as:
       User:     developer
       Password: developer

   To login as administrator:
       oc login -u system:admin</programlisting>
</para>
</formalpara>
</listitem>
</orderedlist>
</section>
<section xml:id="deploying-the-example-application-using-the-launcher-tool_crud-osl">
<title>Deploying the example application using the Fabric8 Launcher tool</title>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>The URL of your running Fabric8 Launcher instance and the user credentials of your Minishift or CDK.
For more information, see <xref linkend="getting-the-launcher-tool-url-and-credentials_crud-osl"/>.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Navigate to the Fabric8 Launcher URL in a browser.</simpara>
</listitem>
<listitem>
<simpara>Follow the on-screen instructions to create and launch your example application in Open Liberty.</simpara>
</listitem>
</orderedlist>
</section>
<section xml:id="authenticating-the-oc-cli-client_crud-osl">
<title>Authenticating the <literal>oc</literal> CLI client</title>
<simpara>To work with example applications on Minishift or CDK using the <literal>oc</literal> command-line client, you must authenticate the client using the token provided by the Minishift or CDK web interface.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>The URL of your running Fabric8 Launcher instance and the user credentials of your Minishift or CDK. For more information, see <xref linkend="getting-the-launcher-tool-url-and-credentials_crud-osl"/>.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Navigate to the Minishift or CDK URL in a browser.</simpara>
</listitem>
<listitem>
<simpara>Click on the question mark icon in the top right-hand corner of the Web console, next to your user name.</simpara>
</listitem>
<listitem>
<simpara>Select <emphasis>Command Line Tools</emphasis> in the drop-down menu.</simpara>
</listitem>
<listitem>
<simpara>Find the text box that contains the <literal>oc login &#8230;&#8203;</literal> command with the hidden token, and click the button next to it to copy its content to your clipboard.</simpara>
</listitem>
<listitem>
<simpara>Paste the command into a terminal application. The command uses your authentication token to authenticate your <literal>oc</literal> CLI client with your Minishift or CDK account.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ oc login OPENSHIFT_URL --token=MYTOKEN</programlisting>
</listitem>
</orderedlist>
</section>
<section xml:id="deploying-the-crud-example-application-using-the-oc-cli-client_crud-osl">
<title>Deploying the Relational Database Backend example application using the <literal>oc</literal> CLI client</title>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>The example application created using Fabric8 Launcher tool on a Minishift or CDK.
For more information, see <xref linkend="deploying-the-example-application-using-the-launcher-tool_crud-osl"/>.</simpara>
</listitem>
<listitem>
<simpara>Your Fabric8 Launcher tool URL.</simpara>
</listitem>
<listitem>
<simpara>The <literal>oc</literal> client authenticated. For more information, see <xref linkend="authenticating-the-oc-cli-client_crud-osl"/>.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Clone your project from GitHub.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ git clone git@github.com:USERNAME/MY_PROJECT_NAME.git</programlisting>
<simpara>Alternatively, if you downloaded a ZIP file of your project, extract it.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ unzip MY_PROJECT_NAME.zip</programlisting>
</listitem>
<listitem>
<simpara>Create a new OpenShift project.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ oc new-project MY_PROJECT_NAME</programlisting>
</listitem>
<listitem>
<simpara>Navigate to the root directory of your application.</simpara>
</listitem>
<listitem>
<simpara>Deploy the PostgreSQL database to OpenShift.
Ensure that you use the following values for user name, password, and database name when creating your database application.
The example application is pre-configured to use these values.
Using different values prevents your application from integrating with the database.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ oc new-app -e POSTGRESQL_USER=luke -ePOSTGRESQL_PASSWORD=secret -ePOSTGRESQL_DATABASE=my_data centos/postgresql-10-centos7 --name=my-database</programlisting>
</listitem>
<listitem>
<simpara>Check the status of your database and ensure the pod is running.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ oc get pods -w
my-database-1-aaaaa   1/1       Running   0         45s
my-database-1-deploy   0/1       Completed   0         53s</programlisting>
<simpara>The <literal>my-database-1-aaaaa</literal> pod should have a status of <literal>Running</literal> and should be indicated as ready once it is fully deployed and started.
Your specific pod name will vary.
The number in the middle will increase with each new build.
The letters at the end are generated when the pod is created.</simpara>
</listitem>
<listitem>
<simpara>Use maven to start the deployment to OpenShift.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ mvn clean fabric8:deploy -Popenshift</programlisting>
<simpara>This command uses the Fabric8 Maven Plugin to launch the <link xl:href="https://docs.openshift.com/container-platform/latest/architecture/core_concepts/builds_and_image_streams.html#source-build">S2I process</link> on OpenShift and to start the pod.</simpara>
</listitem>
<listitem>
<simpara>Check the status of your application and ensure your pod is running.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ oc get pods -w
NAME                             READY     STATUS      RESTARTS   AGE
MY_APP_NAME-1-aaaaa       1/1       Running     0          58s
MY_APP_NAME-s2i-1-build   0/1       Completed   0          2m</programlisting>
<simpara>Your <literal>MY_APP_NAME-1-aaaaa</literal> pod should have a status of <literal>Running</literal> and should be indicated as ready once it is fully deployed and started.</simpara>
</listitem>
<listitem>
<simpara>After your example application is deployed and started, determine its route.</simpara>
<formalpara>
<title>Example Route Information</title>
<para>
<programlisting language="bash" linenumbering="unnumbered">$ oc get routes
NAME                 HOST/PORT                                     PATH      SERVICES             PORT      TERMINATION
MY_APP_NAME   MY_APP_NAME-MY_PROJECT_NAME.OPENSHIFT_HOSTNAME      MY_APP_NAME   8080</programlisting>
</para>
</formalpara>
<simpara>The route information of a pod gives you the base URL which you use to access it. In the example above, you would use <literal>http://MY_APP_NAME-MY_PROJECT_NAME.OPENSHIFT_HOSTNAME</literal> as the base URL to access the application.</simpara>
</listitem>
</orderedlist>
</section>
</section>
<section xml:id="deploying-the-example-application-to-openshiftcontainerplatform_crud">
<title>Deploying the Relational Database Backend example application to OpenShift Container Platform</title>
<simpara>The process of creating and deploying example applications to OpenShift Container Platform is similar to OpenShift Online:</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>The example application created using <link xl:href="https://developers.redhat.com/launch">developers.redhat.com/launch</link> or <link xl:href="/docs/minishift-installation.html">the Fabric8 Launcher tool</link>.</simpara>
</listitem>
</itemizedlist>
<itemizedlist>
<title>Procedure</title>
<listitem>
<simpara>Follow the instructions in <xref linkend="deploying-the-example-application-to-openshiftonline_crud"/>, only use the URL and user credentials from the OpenShift Container Platform Web Console.</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="interacting-with-the-crud-api_crud">
<title>Interacting with the Relational Database Backend API</title>
<simpara>When you have finished creating your example application, you can interact with it the following way:</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>Your application running</simpara>
</listitem>
<listitem>
<simpara>The <literal>curl</literal> binary or a web browser</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Obtain the URL of your application by executing the following command:</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ oc get route MY_APP_NAME</programlisting>
<screen linenumbering="unnumbered">NAME                 HOST/PORT                                         PATH      SERVICES             PORT      TERMINATION
MY_APP_NAME           MY_APP_NAME-MY_PROJECT_NAME.OPENSHIFT_HOSTNAME              MY_APP_NAME           8080</screen>
</listitem>
<listitem>
<simpara>To access the web interface of the database application, navigate to the <emphasis>application URL</emphasis> in your browser:</simpara>
<programlisting language="bash" linenumbering="unnumbered">http://MY_APP_NAME-MY_PROJECT_NAME.OPENSHIFT_HOSTNAME</programlisting>
<simpara>Alternatively, you can make requests directly on the <literal>api/fruits/*</literal> endpoint using <literal>curl</literal>:</simpara>
<formalpara>
<title>List all entries in the database:</title>
<para>
<programlisting language="bash" linenumbering="unnumbered">$ curl http://MY_APP_NAME-MY_PROJECT_NAME.OPENSHIFT_HOSTNAME/api/fruits</programlisting>
</para>
</formalpara>
<programlisting language="json" linenumbering="unnumbered">[ {
  "id" : 1,
  "name" : "Apple",
  "stock" : 10
}, {
  "id" : 2,
  "name" : "Orange",
  "stock" : 10
}, {
  "id" : 3,
  "name" : "Pear",
  "stock" : 10
} ]</programlisting>
<formalpara>
<title>Retrieve an entry with a specific ID</title>
<para>
<programlisting language="bash" linenumbering="unnumbered">$ curl http://MY_APP_NAME-MY_PROJECT_NAME.OPENSHIFT_HOSTNAME/api/fruits/3</programlisting>
</para>
</formalpara>
<programlisting language="json" linenumbering="unnumbered">{
  "id" : 3,
  "name" : "Pear",
  "stock" : 10
}</programlisting>
<formalpara>
<title>Create a new entry:</title>
<para>
<programlisting language="bash" linenumbering="unnumbered">$ curl -H "Content-Type: application/json" -X POST -d '{"name":"Peach","stock":1}'  http://MY_APP_NAME-MY_PROJECT_NAME.OPENSHIFT_HOSTNAME/api/fruits</programlisting>
</para>
</formalpara>
<programlisting language="json" linenumbering="unnumbered">{
  "id" : 4,
  "name" : "Peach",
  "stock" : 1
}</programlisting>
<formalpara>
<title>Update an Entry</title>
<para>
<programlisting language="bash" linenumbering="unnumbered">$ curl -H "Content-Type: application/json" -X PUT -d '{"name":"Apple","stock":"100"}'  http://MY_APP_NAME-MY_PROJECT_NAME.OPENSHIFT_HOSTNAME/api/fruits/1</programlisting>
</para>
</formalpara>
<programlisting language="json" linenumbering="unnumbered">{
  "id" : 1,
  "name" : "Apple",
  "stock" : 100
}</programlisting>
<formalpara>
<title>Delete an Entry:</title>
<para>
<programlisting language="bash" linenumbering="unnumbered">$ curl -X DELETE http://MY_APP_NAME-MY_PROJECT_NAME.OPENSHIFT_HOSTNAME/api/fruits/1</programlisting>
</para>
</formalpara>
</listitem>
</orderedlist>
<bridgehead xml:id="_troubleshooting" renderas="sect4">Troubleshooting</bridgehead>
<itemizedlist>
<listitem>
<simpara>If you receive an HTTP Error code <literal>503</literal> as a response after executing these commands, it means that the application is not ready yet.</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="running-the-example-application-integration-tests_crud">
<title>Running the Relational Database Backend example application integration tests</title>
<simpara>This example application includes a self-contained set of integration tests.
When run inside an OpenShift project, the tests:</simpara>
<itemizedlist>
<listitem>
<simpara>Deploy a test instance of the application to the project.</simpara>
</listitem>
<listitem>
<simpara>Execute the individual tests on that instance.</simpara>
</listitem>
<listitem>
<simpara>Remove all instances of the application from the project when the testing is done.</simpara>
</listitem>
</itemizedlist>
<warning>
<simpara>Executing integration tests removes all existing instances of the example application from the target OpenShift project.
To avoid accidentally removing your example application, ensure that you create and select a separate OpenShift project to execute the tests.</simpara>
</warning>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>The <literal>oc</literal> client authenticated</simpara>
</listitem>
<listitem>
<simpara>An empty OpenShift project</simpara>
</listitem>
</itemizedlist>
<formalpara>
<title>Procedure</title>
<para>Execute the following command to run the integration tests:</para>
</formalpara>
<programlisting language="bash" linenumbering="unnumbered">$ mvn clean verify -Popenshift,openshift-it</programlisting>
</section>
<section xml:id="relational-database-resources_crud">
<title>Relational database resources</title>
<simpara>More background and related information on running relational databases in OpenShift, CRUD, HTTP API and REST can be found here:</simpara>
<itemizedlist>
<listitem>
<simpara><link xl:href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html">HTTP Verbs</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://www.ics.uci.edu/~fielding/pubs/dissertation/fielding_dissertation.pdf">Architectural Styles and the Design of Network-based Software Architectures - Representational State Transfer (REST)</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://speakerdeck.com/glaforge/the-never-ending-rest-api-design-debate">The never ending REST API design debase</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="http://roy.gbiv.com/untangled/2008/rest-apis-must-be-hypertext-driven">REST APIs must be Hypertext driven</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://martinfowler.com/articles/richardsonMaturityModel.html">Richardson Maturity Model</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://www.jcp.org/en/jsr/detail?id=311">JSR 311: JAX-RS: The JavaTM API for RESTful Web Services</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="/docs/spring-boot-runtime.html#example-crud-spring-boot">Relational Database Backend for Spring Boot</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="/docs/vertx-runtime.html#example-crud-vertx">Relational Database Backend for Eclipse Vert.x</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="/docs/thorntail-runtime.html#example-crud-wf-swarm">Relational Database Backend for Thorntail</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="/docs/nodejs-runtime.html#example-crud-nodejs">Relational Database Backend for Node.js</link></simpara>
</listitem>
</itemizedlist>
</section>
</section>
<section xml:id="example-health-check-open-liberty">
<title>Health Check example for Open Liberty</title>
<simpara>Example proficiency level:
<link linkend="proficiency_foundational"><emphasis role="strong">Foundational</emphasis></link>.</simpara>
<simpara>When you deploy an application, it is important to know if it is available and if it can start handling incoming requests. Implementing the <emphasis>health check</emphasis> pattern allows you to monitor the health of an application, which includes if an application is available and whether it is able to service requests.</simpara>
<note>
<simpara>If you are not familiar with the health check terminology, see the <xref linkend="health-check-concepts_health-check"/> section first.</simpara>
</note>
<simpara>The purpose of this use case is to demonstrate the health check pattern through the use of probing.
Probing is used to report the liveness and readiness of an application.
In this use case, you configure an application which exposes an HTTP <literal>health</literal> endpoint to issue HTTP requests.
If the container is alive, according to the liveness probe on the <literal>health</literal> HTTP endpoint, the management platform receives <literal>200</literal> as return code and no further action is required.
If the <literal>health</literal> HTTP endpoint does not return a response, for example if the thread is blocked, then the application is not considered alive according to the liveness probe.
In that case, the platform kills the pod corresponding to that application and recreates a new pod to restart the application.</simpara>
<simpara>This use case also allows you to demonstrate and use a readiness probe.
In cases where the application is running but is unable to handle requests, such as when the application returns an HTTP <literal>503</literal> response code during restart, this application is not considered ready according to the readiness probe.
If the application is not considered ready by the readiness probe, requests are not routed to that application until it is considered ready according to the readiness probe.</simpara>
<section xml:id="health-check-concepts_health-check">
<title>Health check concepts</title>
<simpara>In order to understand the health check pattern, you need to first understand the following concepts:</simpara>
<variablelist>
<varlistentry>
<term>Liveness</term>
<listitem>
<simpara>Liveness defines whether an application is running or not. Sometimes a running application moves into an unresponsive or stopped state and needs to be restarted. Checking for liveness helps determine whether or not an application needs to be restarted.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Readiness</term>
<listitem>
<simpara>Readiness defines whether a running application can service requests. Sometimes a running application moves into an error or broken state where it can no longer service requests. Checking readiness helps determine whether or not requests should continue to be routed to that application.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Fail-over</term>
<listitem>
<simpara>Fail-over enables failures in servicing requests to be handled gracefully. If an application fails to service a request, that request and future requests can then <emphasis>fail-over</emphasis> or be routed to another application, which is usually a redundant copy of that same application.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Resilience and Stability</term>
<listitem>
<simpara>Resilience and Stability enable failures in servicing requests to be handled gracefully. If an application fails to service a request due to connection loss, in a resilient system that request can be retried after the connection is re-established.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Probe</term>
<listitem>
<simpara>A probe is a Kubernetes action that periodically performs diagnostics on a running container.</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
<section xml:id="deploying-the-example-application-to-openshiftonline_health-check">
<title>Deploying the Health Check example application to OpenShift Online</title>
<simpara>Use one of the following options to execute the Health Check example application on OpenShift Online.</simpara>
<itemizedlist>
<listitem>
<simpara><link linkend="deploying-the-example-application-using-launcher-oso_health-check-oso">Use developers.redhat.com/launch</link></simpara>
</listitem>
<listitem>
<simpara><link linkend="deploying-the-health-check-example-application-using-the-oc-cli-client_health-check-oso">Use the <literal>oc</literal> CLI client</link></simpara>
</listitem>
</itemizedlist>
<simpara>Although each method uses the same <literal>oc</literal> commands to deploy your application, using developers.redhat.com/launch provides an automated deployment workflow that executes the <literal>oc</literal> commands for you.</simpara>
<section xml:id="deploying-the-example-application-using-launcher-oso_health-check-oso">
<title>Deploying the example application using developers.redhat.com/launch</title>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>An account at <link xl:href="https://manage.openshift.com">OpenShift Online</link>.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Navigate to the <link xl:href="https://developers.redhat.com/launch">developers.redhat.com/launch</link> URL in a browser and log in.</simpara>
</listitem>
<listitem>
<simpara>Follow on-screen instructions to create and launch your example application in Open Liberty.</simpara>
</listitem>
</orderedlist>
</section>
<section xml:id="authenticating-the-oc-cli-client_health-check-oso">
<title>Authenticating the <literal>oc</literal> CLI client</title>
<simpara>To work with example applications on <link xl:href="https://manage.openshift.com">OpenShift Online</link> using the <literal>oc</literal> command-line client, you must authenticate the client using the token provided by the <link xl:href="https://manage.openshift.com">OpenShift Online</link> web interface.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>An account at <link xl:href="https://manage.openshift.com">OpenShift Online</link>.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Navigate to the <link xl:href="https://manage.openshift.com">OpenShift Online</link> URL in a browser.</simpara>
</listitem>
<listitem>
<simpara>Click on the question mark icon in the top right-hand corner of the Web console, next to your user name.</simpara>
</listitem>
<listitem>
<simpara>Select <emphasis>Command Line Tools</emphasis> in the drop-down menu.</simpara>
</listitem>
<listitem>
<simpara>Find the text box that contains the <literal>oc login &#8230;&#8203;</literal> command with the hidden token, and click the button next to it to copy its content to your clipboard.</simpara>
</listitem>
<listitem>
<simpara>Paste the command into a terminal application. The command uses your authentication token to authenticate your <literal>oc</literal> CLI client with your <link xl:href="https://manage.openshift.com">OpenShift Online</link> account.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ oc login OPENSHIFT_URL --token=MYTOKEN</programlisting>
</listitem>
</orderedlist>
</section>
<section xml:id="deploying-the-health-check-example-application-using-the-oc-cli-client_health-check-oso">
<title>Deploying the Health Check example application using the <literal>oc</literal> CLI client</title>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>The example application created using <link xl:href="https://developers.redhat.com/launch">developers.redhat.com/launch</link>.
For more information, see <xref linkend="deploying-the-example-application-using-launcher-oso_health-check-oso"/>.</simpara>
</listitem>
<listitem>
<simpara>The <literal>oc</literal> client authenticated. For more information, see <xref linkend="authenticating-the-oc-cli-client_health-check-oso"/>.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Clone your project from GitHub.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ git clone git@github.com:USERNAME/MY_PROJECT_NAME.git</programlisting>
<simpara>Alternatively, if you downloaded a ZIP file of your project, extract it.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ unzip MY_PROJECT_NAME.zip</programlisting>
</listitem>
<listitem>
<simpara>Create a new OpenShift project.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ oc new-project MY_PROJECT_NAME</programlisting>
</listitem>
<listitem>
<simpara>Navigate to the root directory of your application.</simpara>
</listitem>
<listitem>
<simpara>Use Maven to start the deployment to OpenShift.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ mvn clean fabric8:deploy -Popenshift</programlisting>
<simpara>This command uses the Fabric8 Maven Plugin to launch the <link xl:href="https://docs.openshift.com/container-platform/latest/architecture/core_concepts/builds_and_image_streams.html#source-build">S2I process</link> on OpenShift and to start the pod.</simpara>
</listitem>
<listitem>
<simpara>Check the status of your application and ensure your pod is running.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ oc get pods -w
NAME                             READY     STATUS      RESTARTS   AGE
MY_APP_NAME-1-aaaaa               1/1       Running     0          58s
MY_APP_NAME-s2i-1-build           0/1       Completed   0          2m</programlisting>
<simpara>The <literal>MY_APP_NAME-1-aaaaa</literal> pod should have a status of <literal>Running</literal> once its fully deployed and started. You should also wait for your pod to be ready before proceeding, which is shown in the <literal>READY</literal> column. For example, <literal>MY_APP_NAME-1-aaaaa</literal> is ready when the <literal>READY</literal> column is <literal>1/1</literal>.
Your specific pod name will vary.
The number in the middle will increase with each new build.
The letters at the end are generated when the pod is created.</simpara>
</listitem>
<listitem>
<simpara>After your example application is deployed and started, determine its route.</simpara>
<formalpara>
<title>Example Route Information</title>
<para>
<programlisting language="bash" linenumbering="unnumbered">$ oc get routes
NAME                 HOST/PORT                                                     PATH      SERVICES        PORT      TERMINATION
MY_APP_NAME         MY_APP_NAME-MY_PROJECT_NAME.OPENSHIFT_HOSTNAME      MY_APP_NAME      8080</programlisting>
</para>
</formalpara>
<simpara>The route information of a pod gives you the base URL which you use to access it. In the example above, you would use <literal>http://MY_APP_NAME-MY_PROJECT_NAME.OPENSHIFT_HOSTNAME</literal> as the base URL to access the application.</simpara>
</listitem>
</orderedlist>
</section>
</section>
<section xml:id="deploying-the-example-application-to-openshiftlocal_health-check">
<title>Deploying the Health Check example application to Minishift or CDK</title>
<simpara>Use one of the following options to execute the Health Check example application locally on Minishift or CDK:</simpara>
<itemizedlist>
<listitem>
<simpara><link linkend="deploying-the-example-application-using-the-launcher-tool_health-check-osl">Using Fabric8 Launcher</link></simpara>
</listitem>
<listitem>
<simpara><link linkend="deploying-the-health-check-example-application-using-the-oc-cli-client_health-check-osl">Using the <literal>oc</literal> CLI client</link></simpara>
</listitem>
</itemizedlist>
<simpara>Although each method uses the same <literal>oc</literal> commands to deploy your application, using Fabric8 Launcher provides an automated deployment workflow that executes the <literal>oc</literal> commands for you.</simpara>
<section xml:id="getting-the-launcher-tool-url-and-credentials_health-check-osl">
<title>Getting the Fabric8 Launcher tool URL and credentials</title>
<simpara>You need the Fabric8 Launcher tool URL and user credentials to create and deploy example applications on Minishift or CDK. This information is provided when the Minishift or CDK is started.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>The Fabric8 Launcher tool installed, configured, and running. For more information, see the <link xl:href="/docs/minishift-installation.html">Install and Configure the Fabric8 Launcher Tool</link> guide.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Navigate to the console where you started Minishift or CDK.</simpara>
</listitem>
<listitem>
<simpara>Check the console output for the URL and user credentials you can use to access the running Fabric8 Launcher:</simpara>
<formalpara>
<title>Example Console Output from a Minishift or CDK Startup</title>
<para>
<programlisting language="bash" linenumbering="unnumbered">...
-- Removing temporary directory ... OK
-- Server Information ...
   OpenShift server started.
   The server is accessible via web console at:
       https://192.168.42.152:8443

   You are logged in as:
       User:     developer
       Password: developer

   To login as administrator:
       oc login -u system:admin</programlisting>
</para>
</formalpara>
</listitem>
</orderedlist>
</section>
<section xml:id="deploying-the-example-application-using-the-launcher-tool_health-check-osl">
<title>Deploying the example application using the Fabric8 Launcher tool</title>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>The URL of your running Fabric8 Launcher instance and the user credentials of your Minishift or CDK.
For more information, see <xref linkend="getting-the-launcher-tool-url-and-credentials_health-check-osl"/>.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Navigate to the Fabric8 Launcher URL in a browser.</simpara>
</listitem>
<listitem>
<simpara>Follow the on-screen instructions to create and launch your example application in Open Liberty.</simpara>
</listitem>
</orderedlist>
</section>
<section xml:id="authenticating-the-oc-cli-client_health-check-osl">
<title>Authenticating the <literal>oc</literal> CLI client</title>
<simpara>To work with example applications on Minishift or CDK using the <literal>oc</literal> command-line client, you must authenticate the client using the token provided by the Minishift or CDK web interface.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>The URL of your running Fabric8 Launcher instance and the user credentials of your Minishift or CDK. For more information, see <xref linkend="getting-the-launcher-tool-url-and-credentials_health-check-osl"/>.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Navigate to the Minishift or CDK URL in a browser.</simpara>
</listitem>
<listitem>
<simpara>Click on the question mark icon in the top right-hand corner of the Web console, next to your user name.</simpara>
</listitem>
<listitem>
<simpara>Select <emphasis>Command Line Tools</emphasis> in the drop-down menu.</simpara>
</listitem>
<listitem>
<simpara>Find the text box that contains the <literal>oc login &#8230;&#8203;</literal> command with the hidden token, and click the button next to it to copy its content to your clipboard.</simpara>
</listitem>
<listitem>
<simpara>Paste the command into a terminal application. The command uses your authentication token to authenticate your <literal>oc</literal> CLI client with your Minishift or CDK account.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ oc login OPENSHIFT_URL --token=MYTOKEN</programlisting>
</listitem>
</orderedlist>
</section>
<section xml:id="deploying-the-health-check-example-application-using-the-oc-cli-client_health-check-osl">
<title>Deploying the Health Check example application using the <literal>oc</literal> CLI client</title>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>The example application created using Fabric8 Launcher tool on a Minishift or CDK.
For more information, see <xref linkend="deploying-the-example-application-using-the-launcher-tool_health-check-osl"/>.</simpara>
</listitem>
<listitem>
<simpara>Your Fabric8 Launcher tool URL.</simpara>
</listitem>
<listitem>
<simpara>The <literal>oc</literal> client authenticated. For more information, see <xref linkend="authenticating-the-oc-cli-client_health-check-osl"/>.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Clone your project from GitHub.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ git clone git@github.com:USERNAME/MY_PROJECT_NAME.git</programlisting>
<simpara>Alternatively, if you downloaded a ZIP file of your project, extract it.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ unzip MY_PROJECT_NAME.zip</programlisting>
</listitem>
<listitem>
<simpara>Create a new OpenShift project.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ oc new-project MY_PROJECT_NAME</programlisting>
</listitem>
<listitem>
<simpara>Navigate to the root directory of your application.</simpara>
</listitem>
<listitem>
<simpara>Use Maven to start the deployment to OpenShift.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ mvn clean fabric8:deploy -Popenshift</programlisting>
<simpara>This command uses the Fabric8 Maven Plugin to launch the <link xl:href="https://docs.openshift.com/container-platform/latest/architecture/core_concepts/builds_and_image_streams.html#source-build">S2I process</link> on OpenShift and to start the pod.</simpara>
</listitem>
<listitem>
<simpara>Check the status of your application and ensure your pod is running.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ oc get pods -w
NAME                             READY     STATUS      RESTARTS   AGE
MY_APP_NAME-1-aaaaa               1/1       Running     0          58s
MY_APP_NAME-s2i-1-build           0/1       Completed   0          2m</programlisting>
<simpara>The <literal>MY_APP_NAME-1-aaaaa</literal> pod should have a status of <literal>Running</literal> once its fully deployed and started. You should also wait for your pod to be ready before proceeding, which is shown in the <literal>READY</literal> column. For example, <literal>MY_APP_NAME-1-aaaaa</literal> is ready when the <literal>READY</literal> column is <literal>1/1</literal>.
Your specific pod name will vary.
The number in the middle will increase with each new build.
The letters at the end are generated when the pod is created.</simpara>
</listitem>
<listitem>
<simpara>After your example application is deployed and started, determine its route.</simpara>
<formalpara>
<title>Example Route Information</title>
<para>
<programlisting language="bash" linenumbering="unnumbered">$ oc get routes
NAME                 HOST/PORT                                                     PATH      SERVICES        PORT      TERMINATION
MY_APP_NAME         MY_APP_NAME-MY_PROJECT_NAME.OPENSHIFT_HOSTNAME      MY_APP_NAME      8080</programlisting>
</para>
</formalpara>
<simpara>The route information of a pod gives you the base URL which you use to access it. In the example above, you would use <literal>http://MY_APP_NAME-MY_PROJECT_NAME.OPENSHIFT_HOSTNAME</literal> as the base URL to access the application.</simpara>
</listitem>
</orderedlist>
</section>
</section>
<section xml:id="deploying-the-example-application-to-openshiftcontainerplatform_health-check">
<title>Deploying the Health Check example application to OpenShift Container Platform</title>
<simpara>The process of creating and deploying example applications to OpenShift Container Platform is similar to OpenShift Online:</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>The example application created using <link xl:href="https://developers.redhat.com/launch">developers.redhat.com/launch</link> or <link xl:href="/docs/minishift-installation.html">the Fabric8 Launcher tool</link>.</simpara>
</listitem>
</itemizedlist>
<itemizedlist>
<title>Procedure</title>
<listitem>
<simpara>Follow the instructions in <xref linkend="deploying-the-example-application-to-openshiftonline_health-check"/>, only use the URL and user credentials from the OpenShift Container Platform Web Console.</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="interacting-with-the-unmodified-health-check-example-application_health-check">
<title>Interacting with the unmodified Health Check example application</title>
<simpara>After you deploy the example application, you will have the <literal>MY_APP_NAME</literal> service running. The <literal>MY_APP_NAME</literal> service exposes the following REST endpoints:</simpara>
<variablelist>
<varlistentry>
<term>/api/greeting</term>
<term>/api/stop</term>
<listitem>
<simpara>Forces the service to become unresponsive as means to simulate a failure.</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>The following steps demonstrate how to verify the service availability and simulate a failure.
This failure of an available service causes the OpenShift self-healing capabilities to be trigger on the service.</simpara>
<simpara>Alternatively, you can use the web interface to perform these steps.</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Use <literal>curl</literal> to execute a <literal>GET</literal> request against the <literal>MY_APP_NAME</literal> service.
You can also use a browser to do this.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ curl http://MY_APP_NAME-MY_PROJECT_NAME.OPENSHIFT_HOSTNAME/api/greeting</programlisting>
<screen linenumbering="unnumbered">{"content":"Hello, World!"}</screen>
</listitem>
<listitem>
<simpara>Invoke the <literal>/api/stop</literal> endpoint and verify the availability of the <literal>/api/greeting</literal> endpoint shortly after that.</simpara>
<simpara>Invoking the <literal>/api/stop</literal> endpoint simulates an internal service failure and triggers the OpenShift self-healing capabilities.
When invoking <literal>/api/greeting</literal> after simulating the failure, the service should return
a HTTP status <literal>503</literal>.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ curl http://MY_APP_NAME-MY_PROJECT_NAME.OPENSHIFT_HOSTNAME/api/stop</programlisting>
<simpara>(followed by)</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ curl http://MY_APP_NAME-MY_PROJECT_NAME.OPENSHIFT_HOSTNAME/api/greeting</programlisting>
</listitem>
<listitem>
<simpara>Use <literal>oc get pods -w</literal> to continuously watch the self-healing capabilities in action.</simpara>
<simpara>While invoking the service failure, you can watch the self-healing capabilities in action on OpenShift console, or with the <literal>oc</literal> client tools.
You should see the number of pods in the <literal>READY</literal> state move to zero (<literal>0/1</literal>) and after a short period (less than one minute) move back up to one (<literal>1/1</literal>).
In addition to that, the <literal>RESTARTS</literal> count increases every time you you invoke the service failure.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ oc get pods -w
NAME                           READY     STATUS    RESTARTS   AGE
MY_APP_NAME-1-26iy7   0/1       Running   5          18m
MY_APP_NAME-1-26iy7   1/1       Running   5         19m</programlisting>
</listitem>
<listitem>
<simpara>Optional: Use the web interface to invoke the service.</simpara>
<simpara>Alternatively to the interaction using the terminal window, you can use the web interface provided by the service to invoke the different methods and watch the service move through the life cycle phases.</simpara>
<screen linenumbering="unnumbered">http://MY_APP_NAME-MY_PROJECT_NAME.OPENSHIFT_HOSTNAME</screen>
</listitem>
<listitem>
<simpara>Optional: Use the web console to view the log output generated by the application at each stage of the self-healing process.</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Navigate to your project.</simpara>
</listitem>
<listitem>
<simpara>On the sidebar, click on <emphasis>Monitoring</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>In the upper right-hand corner of the screen, click on <emphasis>Events</emphasis> to display the log messages.</simpara>
</listitem>
<listitem>
<simpara>Optional: Click <emphasis>View Details</emphasis> to display a detailed view of the Event log.</simpara>
</listitem>
</orderedlist>
<simpara>The health check application generates the following messages:</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="2">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="50*"/>
<thead>
<row>
<entry align="left" valign="top">Message</entry>
<entry align="left" valign="top">Status</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><emphasis>Unhealthy</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Readiness probe failed. This message is expected and indicates that the simulated failure of the <literal>/api/greeting</literal> endpoint has been detected and the self-healing process starts.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis>Killing</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>The unavailable Docker container running the service is being killed before being re-created.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis>Pulling</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Downloading the latest version of docker image to re-create the container.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis>Pulled</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Docker image downloaded successfully.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis>Created</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Docker container has been successfully created</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis>Started</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Docker container is ready to handle requests</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</listitem>
</orderedlist>
</section>
<section xml:id="running-the-example-application-integration-tests_health-check">
<title>Running the Health Check example application integration tests</title>
<simpara>This example application includes a self-contained set of integration tests.
When run inside an OpenShift project, the tests:</simpara>
<itemizedlist>
<listitem>
<simpara>Deploy a test instance of the application to the project.</simpara>
</listitem>
<listitem>
<simpara>Execute the individual tests on that instance.</simpara>
</listitem>
<listitem>
<simpara>Remove all instances of the application from the project when the testing is done.</simpara>
</listitem>
</itemizedlist>
<warning>
<simpara>Executing integration tests removes all existing instances of the example application from the target OpenShift project.
To avoid accidentally removing your example application, ensure that you create and select a separate OpenShift project to execute the tests.</simpara>
</warning>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>The <literal>oc</literal> client authenticated</simpara>
</listitem>
<listitem>
<simpara>An empty OpenShift project</simpara>
</listitem>
</itemizedlist>
<formalpara>
<title>Procedure</title>
<para>Execute the following command to run the integration tests:</para>
</formalpara>
<programlisting language="bash" linenumbering="unnumbered">$ mvn clean verify -Popenshift,openshift-it</programlisting>
</section>
<section xml:id="health-check-resources_health-check">
<title>Health check resources</title>
<simpara>More background and related information on health checking can be found here:</simpara>
<itemizedlist>
<listitem>
<simpara><link xl:href="https://access.redhat.com/documentation/en-us/openshift_container_platform/3.11/html/developer_guide/dev-guide-application-health">Application Health in OpenShift</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/">Kubernetes Liveness and Readiness Probes</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="/docs/spring-boot-runtime.html#example-health-check-spring-boot">Health Check for Spring Boot</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="/docs/vertx-runtime.html#example-health-check-vertx">Health Check for Eclipse Vert.x</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="/docs/thorntail-runtime.html#example-health-check-wf-swarm">Health Check for Thorntail</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="/docs/nodejs-runtime.html#example-health-check-nodejs">Health Check for Node.js</link></simpara>
</listitem>
</itemizedlist>
</section>
</section>
<section xml:id="example-circuit-breaker-open-liberty">
<title>Circuit Breaker example for Open Liberty</title>
<simpara><emphasis role="strong">Limitation:</emphasis> Run this example application on a Minishift or CDK. You can also use a manual workflow to deploy this example to OpenShift Online Pro and OpenShift Container Platform.
This example is not currently available on OpenShift Online Starter.</simpara>
<simpara>Example proficiency level:
<link linkend="proficiency_foundational"><emphasis role="strong">Foundational</emphasis></link>.</simpara>
<simpara>The <emphasis>Circuit Breaker</emphasis> example demonstrates a generic pattern for reporting the failure of a service and then limiting access to the failed service until it becomes available to handle requests. This helps prevent cascading failure in other services that depend on the failed services for functionality.</simpara>
<simpara>This example shows you how to implement a Circuit Breaker and Fallback pattern in your services.</simpara>
<section xml:id="the-circuit-breaker-design-pattern_circuit-breaker">
<title>The circuit breaker design pattern</title>
<simpara>The Circuit Breaker is a pattern intended to:</simpara>
<itemizedlist>
<listitem>
<simpara>Reduce the impact of network failure and high latency on service architectures where services synchronously invoke other services.</simpara>
<simpara>If one of the services:</simpara>
<itemizedlist>
<listitem>
<simpara>becomes unavailable due to network failure, or</simpara>
</listitem>
<listitem>
<simpara>incurs unusually high latency values due to overwhelming traffic,</simpara>
</listitem>
</itemizedlist>
<simpara>other services attempting to call its endpoint may end up exhausting critical resources in an attempt to reach it, rendering themselves unusable.</simpara>
</listitem>
<listitem>
<simpara>Prevent the condition also known as cascading failure, which can render the entire microservice architecture unusable.</simpara>
</listitem>
<listitem>
<simpara>Act as a proxy between a protected function and a remote function, which monitors for failures.</simpara>
</listitem>
<listitem>
<simpara>Trip once the failures reach a certain threshold, and all further calls to the circuit breaker return an error or a predefined fallback response, without the protected call being made at all.</simpara>
</listitem>
</itemizedlist>
<simpara>The Circuit Breaker usually also contain an error reporting mechanism that notifies you when the Circuit Breaker trips.</simpara>
<bridgehead xml:id="_circuit_breaker_implementation" renderas="sect4">Circuit breaker implementation</bridgehead>
<itemizedlist>
<listitem>
<simpara>With the Circuit Breaker pattern implemented, a service client invokes a remote service endpoint via a proxy at regular intervals.</simpara>
</listitem>
<listitem>
<simpara>If the calls to the remote service endpoint fail repeatedly and consistently, the Circuit Breaker trips, making all calls to the service fail immediately over a set timeout period and returns a predefined fallback response.</simpara>
</listitem>
<listitem>
<simpara>When the timeout period expires, a limited number of test calls are allowed to pass through to the remote service to determine whether it has healed, or remains unavailable.</simpara>
<itemizedlist>
<listitem>
<simpara>If the test calls fail, the Circuit Breaker keeps the service unavailable and keeps returning the fallback responses to incoming calls.</simpara>
</listitem>
<listitem>
<simpara>If the test calls succeed, the Circuit Breaker closes, fully enabling traffic to reach the remote service again.</simpara>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
</section>
<section xml:id="circuit-breaker-design-tradeoffs_circuit-breaker">
<title>Circuit Breaker design tradeoffs</title>
<table frame="all" rowsep="1" colsep="1">
<title>Design Tradeoffs</title>
<?dbhtml table-width="100%"?>
<?dbfo table-width="100%"?>
<?dblatex table-width="100%"?>
<tgroup cols="2">
<colspec colname="col_1" colwidth="212.5*"/>
<colspec colname="col_2" colwidth="212.5*"/>
<thead>
<row>
<entry align="left" valign="top">Pros</entry>
<entry align="left" valign="top">Cons</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><itemizedlist>
<listitem>
<simpara>Enables a service to handle the failure of other services it invokes.</simpara>
</listitem>
</itemizedlist></entry>
<entry align="left" valign="top"><itemizedlist>
<listitem>
<simpara>Optimizing the timeout values can be challenging</simpara>
<itemizedlist>
<listitem>
<simpara>Larger-than-necessary timeout values may generate excessive latency.</simpara>
</listitem>
<listitem>
<simpara>Smaller-than-necessary timeout values may introduce false positives.</simpara>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist></entry>
</row>
</tbody>
</tgroup>
</table>
</section>
<section xml:id="deploying-the-example-application-to-openshiftonline_circuit-breaker">
<title>Deploying the Circuit Breaker example application to OpenShift Online</title>
<simpara>Use one of the following options to execute the Circuit Breaker example application on OpenShift Online.</simpara>
<itemizedlist>
<listitem>
<simpara><link linkend="deploying-the-example-application-using-launcher-oso_circuit-breaker-oso">Use developers.redhat.com/launch</link></simpara>
</listitem>
<listitem>
<simpara><link linkend="deploying-the-circuit-breaker-example-application-using-the-oc-cli-client_circuit-breaker-oso">Use the <literal>oc</literal> CLI client</link></simpara>
</listitem>
</itemizedlist>
<simpara>Although each method uses the same <literal>oc</literal> commands to deploy your application, using developers.redhat.com/launch provides an automated deployment workflow that executes the <literal>oc</literal> commands for you.</simpara>
<section xml:id="deploying-the-example-application-using-launcher-oso_circuit-breaker-oso">
<title>Deploying the example application using developers.redhat.com/launch</title>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>An account at <link xl:href="https://manage.openshift.com">OpenShift Online</link>.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Navigate to the <link xl:href="https://developers.redhat.com/launch">developers.redhat.com/launch</link> URL in a browser and log in.</simpara>
</listitem>
<listitem>
<simpara>Follow on-screen instructions to create and launch your example application in Open Liberty.</simpara>
</listitem>
</orderedlist>
</section>
<section xml:id="authenticating-the-oc-cli-client_circuit-breaker-oso">
<title>Authenticating the <literal>oc</literal> CLI client</title>
<simpara>To work with example applications on <link xl:href="https://manage.openshift.com">OpenShift Online</link> using the <literal>oc</literal> command-line client, you must authenticate the client using the token provided by the <link xl:href="https://manage.openshift.com">OpenShift Online</link> web interface.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>An account at <link xl:href="https://manage.openshift.com">OpenShift Online</link>.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Navigate to the <link xl:href="https://manage.openshift.com">OpenShift Online</link> URL in a browser.</simpara>
</listitem>
<listitem>
<simpara>Click on the question mark icon in the top right-hand corner of the Web console, next to your user name.</simpara>
</listitem>
<listitem>
<simpara>Select <emphasis>Command Line Tools</emphasis> in the drop-down menu.</simpara>
</listitem>
<listitem>
<simpara>Find the text box that contains the <literal>oc login &#8230;&#8203;</literal> command with the hidden token, and click the button next to it to copy its content to your clipboard.</simpara>
</listitem>
<listitem>
<simpara>Paste the command into a terminal application. The command uses your authentication token to authenticate your <literal>oc</literal> CLI client with your <link xl:href="https://manage.openshift.com">OpenShift Online</link> account.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ oc login OPENSHIFT_URL --token=MYTOKEN</programlisting>
</listitem>
</orderedlist>
</section>
<section xml:id="deploying-the-circuit-breaker-example-application-using-the-oc-cli-client_circuit-breaker-oso">
<title>Deploying the Circuit Breaker example application using the <literal>oc</literal> CLI client</title>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>The example application created using <link xl:href="https://developers.redhat.com/launch">developers.redhat.com/launch</link>.
For more information, see <xref linkend="deploying-the-example-application-using-launcher-oso_circuit-breaker-oso"/>.</simpara>
</listitem>
<listitem>
<simpara>The <literal>oc</literal> client authenticated. For more information, see <xref linkend="authenticating-the-oc-cli-client_circuit-breaker-oso"/>.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Clone your project from GitHub.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ git clone git@github.com:USERNAME/MY_PROJECT_NAME.git</programlisting>
<simpara>Alternatively, if you downloaded a ZIP file of your project, extract it.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ unzip MY_PROJECT_NAME.zip</programlisting>
</listitem>
<listitem>
<simpara>Create a new OpenShift project.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ oc new-project MY_PROJECT_NAME</programlisting>
</listitem>
<listitem>
<simpara>Navigate to the root directory of your application.</simpara>
</listitem>
<listitem>
<simpara>Use Maven to start the deployment to OpenShift.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ mvn clean fabric8:deploy -Popenshift</programlisting>
<simpara>This command uses the Fabric8 Maven Plugin to launch the <link xl:href="https://docs.openshift.com/container-platform/latest/architecture/core_concepts/builds_and_image_streams.html#source-build">S2I process</link> on OpenShift and to start the pod.</simpara>
</listitem>
<listitem>
<simpara>Check the status of your application and ensure your pod is running.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ oc get pods -w
NAME                             READY     STATUS      RESTARTS   AGE
MY_APP_NAME-greeting-1-aaaaa     1/1       Running   0           17s
MY_APP_NAME-greeting-1-deploy    0/1       Completed 0           22s
MY_APP_NAME-name-1-aaaaa         1/1       Running   0           14s
MY_APP_NAME-name-1-deploy        0/1       Completed 0           28s</programlisting>
<simpara>Both the <literal>MY_APP_NAME-greeting-1-aaaaa</literal> and <literal>MY_APP_NAME-name-1-aaaaa</literal> pods should have a status of <literal>Running</literal> once they are fully deployed and started.
You should also wait for your pods to be ready before proceeding, which is shown in the <literal>READY</literal> column.
For example, <literal>MY_APP_NAME-greeting-1-aaaaa</literal> is ready when the <literal>READY</literal> column is <literal>1/1</literal>.
Your specific pod names will vary.
The number in the middle will increase with each new build.
The letters at the end are generated when the pod is created.</simpara>
</listitem>
<listitem>
<simpara>After your example application is deployed and started, determine its route.</simpara>
<formalpara>
<title>Example Route Information</title>
<para>
<programlisting language="bash" linenumbering="unnumbered">$ oc get routes
NAME                 HOST/PORT                                                     PATH      SERVICES        PORT      TERMINATION
MY_APP_NAME-greeting   MY_APP_NAME-greeting-MY_PROJECT_NAME.OPENSHIFT_HOSTNAME            MY_APP_NAME-greeting   8080                    None
MY_APP_NAME-name       MY_APP_NAME-name-MY_PROJECT_NAME.OPENSHIFT_HOSTNAME            MY_APP_NAME-name       8080                    None</programlisting>
</para>
</formalpara>
<simpara>The route information of a pod gives you the base URL which you use to access it. In the example above, you would use <literal>http://MY_APP_NAME-greeting-MY_PROJECT_NAME.OPENSHIFT_HOSTNAME</literal> as the base URL to access the application.</simpara>
</listitem>
</orderedlist>
</section>
</section>
<section xml:id="deploying-the-example-application-to-openshiftlocal_circuit-breaker">
<title>Deploying the Circuit Breaker example application to Minishift or CDK</title>
<simpara>Use one of the following options to execute the Circuit Breaker example application locally on Minishift or CDK:</simpara>
<itemizedlist>
<listitem>
<simpara><link linkend="deploying-the-example-application-using-the-launcher-tool_circuit-breaker-osl">Using Fabric8 Launcher</link></simpara>
</listitem>
<listitem>
<simpara><link linkend="deploying-the-circuit-breaker-example-application-using-the-oc-cli-client_circuit-breaker-osl">Using the <literal>oc</literal> CLI client</link></simpara>
</listitem>
</itemizedlist>
<simpara>Although each method uses the same <literal>oc</literal> commands to deploy your application, using Fabric8 Launcher provides an automated deployment workflow that executes the <literal>oc</literal> commands for you.</simpara>
<section xml:id="getting-the-launcher-tool-url-and-credentials_circuit-breaker-osl">
<title>Getting the Fabric8 Launcher tool URL and credentials</title>
<simpara>You need the Fabric8 Launcher tool URL and user credentials to create and deploy example applications on Minishift or CDK. This information is provided when the Minishift or CDK is started.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>The Fabric8 Launcher tool installed, configured, and running. For more information, see the <link xl:href="/docs/minishift-installation.html">Install and Configure the Fabric8 Launcher Tool</link> guide.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Navigate to the console where you started Minishift or CDK.</simpara>
</listitem>
<listitem>
<simpara>Check the console output for the URL and user credentials you can use to access the running Fabric8 Launcher:</simpara>
<formalpara>
<title>Example Console Output from a Minishift or CDK Startup</title>
<para>
<programlisting language="bash" linenumbering="unnumbered">...
-- Removing temporary directory ... OK
-- Server Information ...
   OpenShift server started.
   The server is accessible via web console at:
       https://192.168.42.152:8443

   You are logged in as:
       User:     developer
       Password: developer

   To login as administrator:
       oc login -u system:admin</programlisting>
</para>
</formalpara>
</listitem>
</orderedlist>
</section>
<section xml:id="deploying-the-example-application-using-the-launcher-tool_circuit-breaker-osl">
<title>Deploying the example application using the Fabric8 Launcher tool</title>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>The URL of your running Fabric8 Launcher instance and the user credentials of your Minishift or CDK.
For more information, see <xref linkend="getting-the-launcher-tool-url-and-credentials_circuit-breaker-osl"/>.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Navigate to the Fabric8 Launcher URL in a browser.</simpara>
</listitem>
<listitem>
<simpara>Follow the on-screen instructions to create and launch your example application in Open Liberty.</simpara>
</listitem>
</orderedlist>
</section>
<section xml:id="authenticating-the-oc-cli-client_circuit-breaker-osl">
<title>Authenticating the <literal>oc</literal> CLI client</title>
<simpara>To work with example applications on Minishift or CDK using the <literal>oc</literal> command-line client, you must authenticate the client using the token provided by the Minishift or CDK web interface.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>The URL of your running Fabric8 Launcher instance and the user credentials of your Minishift or CDK. For more information, see <xref linkend="getting-the-launcher-tool-url-and-credentials_circuit-breaker-osl"/>.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Navigate to the Minishift or CDK URL in a browser.</simpara>
</listitem>
<listitem>
<simpara>Click on the question mark icon in the top right-hand corner of the Web console, next to your user name.</simpara>
</listitem>
<listitem>
<simpara>Select <emphasis>Command Line Tools</emphasis> in the drop-down menu.</simpara>
</listitem>
<listitem>
<simpara>Find the text box that contains the <literal>oc login &#8230;&#8203;</literal> command with the hidden token, and click the button next to it to copy its content to your clipboard.</simpara>
</listitem>
<listitem>
<simpara>Paste the command into a terminal application. The command uses your authentication token to authenticate your <literal>oc</literal> CLI client with your Minishift or CDK account.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ oc login OPENSHIFT_URL --token=MYTOKEN</programlisting>
</listitem>
</orderedlist>
</section>
<section xml:id="deploying-the-circuit-breaker-example-application-using-the-oc-cli-client_circuit-breaker-osl">
<title>Deploying the Circuit Breaker example application using the <literal>oc</literal> CLI client</title>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>The example application created using Fabric8 Launcher tool on a Minishift or CDK.
For more information, see <xref linkend="deploying-the-example-application-using-the-launcher-tool_circuit-breaker-osl"/>.</simpara>
</listitem>
<listitem>
<simpara>Your Fabric8 Launcher tool URL.</simpara>
</listitem>
<listitem>
<simpara>The <literal>oc</literal> client authenticated. For more information, see <xref linkend="authenticating-the-oc-cli-client_circuit-breaker-osl"/>.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Clone your project from GitHub.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ git clone git@github.com:USERNAME/MY_PROJECT_NAME.git</programlisting>
<simpara>Alternatively, if you downloaded a ZIP file of your project, extract it.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ unzip MY_PROJECT_NAME.zip</programlisting>
</listitem>
<listitem>
<simpara>Create a new OpenShift project.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ oc new-project MY_PROJECT_NAME</programlisting>
</listitem>
<listitem>
<simpara>Navigate to the root directory of your application.</simpara>
</listitem>
<listitem>
<simpara>Use Maven to start the deployment to OpenShift.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ mvn clean fabric8:deploy -Popenshift</programlisting>
<simpara>This command uses the Fabric8 Maven Plugin to launch the <link xl:href="https://docs.openshift.com/container-platform/latest/architecture/core_concepts/builds_and_image_streams.html#source-build">S2I process</link> on OpenShift and to start the pod.</simpara>
</listitem>
<listitem>
<simpara>Check the status of your application and ensure your pod is running.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ oc get pods -w
NAME                             READY     STATUS      RESTARTS   AGE
MY_APP_NAME-greeting-1-aaaaa     1/1       Running   0           17s
MY_APP_NAME-greeting-1-deploy    0/1       Completed 0           22s
MY_APP_NAME-name-1-aaaaa         1/1       Running   0           14s
MY_APP_NAME-name-1-deploy        0/1       Completed 0           28s</programlisting>
<simpara>Both the <literal>MY_APP_NAME-greeting-1-aaaaa</literal> and <literal>MY_APP_NAME-name-1-aaaaa</literal> pods should have a status of <literal>Running</literal> once they are fully deployed and started.
You should also wait for your pods to be ready before proceeding, which is shown in the <literal>READY</literal> column.
For example, <literal>MY_APP_NAME-greeting-1-aaaaa</literal> is ready when the <literal>READY</literal> column is <literal>1/1</literal>.
Your specific pod names will vary.
The number in the middle will increase with each new build.
The letters at the end are generated when the pod is created.</simpara>
</listitem>
<listitem>
<simpara>After your example application is deployed and started, determine its route.</simpara>
<formalpara>
<title>Example Route Information</title>
<para>
<programlisting language="bash" linenumbering="unnumbered">$ oc get routes
NAME                 HOST/PORT                                                     PATH      SERVICES        PORT      TERMINATION
MY_APP_NAME-greeting   MY_APP_NAME-greeting-MY_PROJECT_NAME.OPENSHIFT_HOSTNAME            MY_APP_NAME-greeting   8080                    None
MY_APP_NAME-name       MY_APP_NAME-name-MY_PROJECT_NAME.OPENSHIFT_HOSTNAME            MY_APP_NAME-name       8080                    None</programlisting>
</para>
</formalpara>
<simpara>The route information of a pod gives you the base URL which you use to access it. In the example above, you would use <literal>http://MY_APP_NAME-greeting-MY_PROJECT_NAME.OPENSHIFT_HOSTNAME</literal> as the base URL to access the application.</simpara>
</listitem>
</orderedlist>
</section>
</section>
<section xml:id="deploying-the-example-application-to-openshiftcontainerplatform_circuit-breaker">
<title>Deploying the Circuit Breaker example application to OpenShift Container Platform</title>
<simpara>The process of creating and deploying example applications to OpenShift Container Platform is similar to OpenShift Online:</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>The example application created using <link xl:href="https://developers.redhat.com/launch">developers.redhat.com/launch</link> or <link xl:href="/docs/minishift-installation.html">the Fabric8 Launcher tool</link>.</simpara>
</listitem>
</itemizedlist>
<itemizedlist>
<title>Procedure</title>
<listitem>
<simpara>Follow the instructions in <xref linkend="deploying-the-example-application-to-openshiftonline_circuit-breaker"/>, only use the URL and user credentials from the OpenShift Container Platform Web Console.</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="interacting-with-the-unmodified-example-application_circuit-breaker">
<title>Interacting with the unmodified Open Liberty Circuit Breaker example application</title>
<simpara>After you have the Open Liberty example application deployed, you have the following services running:</simpara>
<variablelist>
<varlistentry>
<term><literal>MY_APP_NAME-name</literal></term>
<listitem>
<simpara>Exposes the following endpoints:</simpara>
<itemizedlist>
<listitem>
<simpara>the <literal>/api/name</literal> endpoint, which returns a name when this service is working, and an error when this service is set up to demonstrate failure.</simpara>
</listitem>
<listitem>
<simpara>the <literal>/api/state</literal> endpoint, which controls the behavior of the <literal>/api/name</literal> endpoint and determines whether the service works correctly or demonstrates failure.</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>MY_APP_NAME-greeting</literal></term>
<listitem>
<simpara>Exposes the following endpoints:</simpara>
<itemizedlist>
<listitem>
<simpara>the <literal>/api/greeting</literal> endpoint that you can call to get a personalized greeting response.</simpara>
<simpara>When you call the <literal>/api/greeting</literal> endpoint, it issues a call against the <literal>/api/name</literal> endpoint of the <literal>MY_APP_NAME-name</literal> service as part of processing your request.
The call made against the <literal>/api/name</literal> endpoint is protected by the Circuit Breaker.</simpara>
<simpara>If the remote endpoint is available, the <literal>name</literal> service responds with an HTTP code <literal>200</literal> (<literal>OK</literal>) and you receive the following greeting from the <literal>/api/greeting</literal> endpoint:</simpara>
<screen>{"content":"Hello, World!"}</screen>
<simpara>If the remote endpoint is unavailable, the <literal>name</literal> service responds with an HTTP code <literal>500</literal> (<literal>Internal server error</literal>) and you receive a predefined fallback response from the <literal>/api/greeting</literal> endpoint:</simpara>
<screen>{"content":"Hello, Fallback!"}</screen>
</listitem>
<listitem>
<simpara>the <literal>/api/cb-state</literal> endpoint, which returns the state of the Circuit Breaker.
The state can be:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis>open</emphasis> : the circuit breaker is preventing requests from reaching the failed service,</simpara>
</listitem>
<listitem>
<simpara><emphasis>closed</emphasis>: the circuit breaker is allowing requests to reach the service.</simpara>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
</variablelist>
<simpara>The following steps demonstrate how to verify the availability of the service, simulate a failure and receive a fallback response.</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Use <literal>curl</literal> to execute a <literal>GET</literal> request against the <literal>MY_APP_NAME-greeting</literal> service. You can also use the <literal>Invoke</literal> button in the web interface to do this.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ curl http://MY_APP_NAME-greeting-MY_PROJECT_NAME.LOCAL_OPENSHIFT_HOSTNAME/api/greeting
{"content":"Hello, World!"}</programlisting>
</listitem>
<listitem>
<simpara>To simulate the failure of the <literal>MY_APP_NAME-name</literal> service you can:</simpara>
<itemizedlist>
<listitem>
<simpara>use the <literal>Toggle</literal> button in the web interface.</simpara>
</listitem>
<listitem>
<simpara>scale the number of replicas of the pod running the <literal>MY_APP_NAME-name</literal> service down to 0.</simpara>
</listitem>
<listitem>
<simpara>execute an HTTP <literal>PUT</literal> request against the <literal>/api/state</literal> endpoint of the <literal>MY_APP_NAME-name</literal> service to set its state to <literal>fail</literal>.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ curl -X PUT -H "Content-Type: application/json" -d '{"state": "fail"}' http://MY_APP_NAME-name-MY_PROJECT_NAME.LOCAL_OPENSHIFT_HOSTNAME/api/state</programlisting>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>Invoke the <literal>/api/greeting</literal> endpoint. When several requests on the <literal>/api/name</literal> endpoint fail:</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>the Circuit Breaker opens,</simpara>
</listitem>
<listitem>
<simpara>the state indicator in the web interface changes from <literal>CLOSED</literal> to <literal>OPEN</literal>,</simpara>
</listitem>
<listitem>
<simpara>the Circuit Breaker issues a fallback response when you invoke the <literal>/api/greeting</literal> endpoint:</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ curl http://MY_APP_NAME-greeting-MY_PROJECT_NAME.LOCAL_OPENSHIFT_HOSTNAME/api/greeting
{"content":"Hello, Fallback!"}</programlisting>
</listitem>
</orderedlist>
</listitem>
<listitem>
<simpara>Restore the name <literal>MY_APP_NAME-name</literal> service to availability.
To do this you can:</simpara>
<itemizedlist>
<listitem>
<simpara>use the <literal>Toggle</literal> button in the web interface.</simpara>
</listitem>
<listitem>
<simpara>scale the number of replicas of the pod running the <literal>MY_APP_NAME-name</literal> service back up to 1.</simpara>
</listitem>
<listitem>
<simpara>execute an HTTP <literal>PUT</literal> request against the <literal>/api/state</literal> endpoint of the <literal>MY_APP_NAME-name</literal> service to set its state back to <literal>ok</literal>.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ curl -X PUT -H "Content-Type: application/json" -d '{"state": "ok"}' http://MY_APP_NAME-name-MY_PROJECT_NAME.LOCAL_OPENSHIFT_HOSTNAME/api/state</programlisting>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>Invoke the <literal>/api/greeting</literal> endpoint again. When several requests on the <literal>/api/name</literal> endpoint succeed:</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>the Circuit Breaker closes,</simpara>
</listitem>
<listitem>
<simpara>the state indicator in the web interface changes from <literal>OPEN</literal> to <literal>CLOSED</literal>,</simpara>
</listitem>
<listitem>
<simpara>the Circuit Breaker issues a returns the <literal>Hello World!</literal> greeting when you invoke the <literal>/api/greeting</literal> endpoint:</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ curl http://MY_APP_NAME-greeting-MY_PROJECT_NAME.LOCAL_OPENSHIFT_HOSTNAME/api/greeting
{"content":"Hello, World!"}</programlisting>
</listitem>
</orderedlist>
</listitem>
</orderedlist>
</section>
<section xml:id="running-the-example-application-integration-tests_circuit-breaker">
<title>Running the Circuit Breaker example application integration tests</title>
<simpara>This example application includes a self-contained set of integration tests.
When run inside an OpenShift project, the tests:</simpara>
<itemizedlist>
<listitem>
<simpara>Deploy a test instance of the application to the project.</simpara>
</listitem>
<listitem>
<simpara>Execute the individual tests on that instance.</simpara>
</listitem>
<listitem>
<simpara>Remove all instances of the application from the project when the testing is done.</simpara>
</listitem>
</itemizedlist>
<warning>
<simpara>Executing integration tests removes all existing instances of the example application from the target OpenShift project.
To avoid accidentally removing your example application, ensure that you create and select a separate OpenShift project to execute the tests.</simpara>
</warning>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>The <literal>oc</literal> client authenticated</simpara>
</listitem>
<listitem>
<simpara>An empty OpenShift project</simpara>
</listitem>
</itemizedlist>
<formalpara>
<title>Procedure</title>
<para>Execute the following command to run the integration tests:</para>
</formalpara>
<programlisting language="bash" linenumbering="unnumbered">$ mvn clean verify -Popenshift,openshift-it</programlisting>
</section>
<section xml:id="using-hystrix-dashboard-to-monitor-the-circuit-breaker_circuit-breaker">
<title>Using Hystrix Dashboard to monitor the circuit breaker</title>
<simpara>Hystrix Dashboard lets you easily monitor the health of your services in real time by aggregating Hystrix metrics data from an event stream and displaying them on one screen.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>The application deployed</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Log in to your Minishift or CDK cluster.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ oc login OPENSHIFT_URL --token=MYTOKEN</programlisting>
</listitem>
<listitem>
<simpara>To access the Web console, use your browser to navigate to your Minishift or CDK URL.</simpara>
</listitem>
<listitem>
<simpara>Navigate to the project that contains your Circuit Breaker application.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ oc project MY_PROJECT_NAME</programlisting>
</listitem>
<listitem>
<simpara>Import the <link xl:href="https://raw.githubusercontent.com/snowdrop/openshift-templates/master/hystrix-dashboard/hystrix-dashboard.yml">YAML template</link> for the Hystrix Dashboard application.
You can do this by clicking <emphasis>Add to Project</emphasis>, then selecting the <emphasis>Import YAML / JSON</emphasis> tab, and copying the contents of the YAML file into the text box.
Alternatively, you can execute the following command:</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ oc create -f https://raw.githubusercontent.com/snowdrop/openshift-templates/master/hystrix-dashboard/hystrix-dashboard.yml</programlisting>
</listitem>
<listitem>
<simpara>Click the <emphasis>Create</emphasis> button to create the Hystrix Dashboard application based on the template.
Alternatively, you can execute the following command.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ oc new-app --template=hystrix-dashboard</programlisting>
</listitem>
<listitem>
<simpara>Wait for the pod containing Hystrix Dashboard to deploy.</simpara>
</listitem>
<listitem>
<simpara>Obtain the route of your Hystrix Dashboard application.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ oc get route hystrix-dashboard
NAME                HOST/PORT                                                    PATH      SERVICES            PORT      TERMINATION   WILDCARD
hystrix-dashboard   hystrix-dashboard-MY_PROJECT_NAME.LOCAL_OPENSHIFT_HOSTNAME                 hystrix-dashboard   &lt;all&gt;                   None</programlisting>
</listitem>
<listitem>
<simpara>To access the Dashboard, open the Dashboard application route URL in your browser.
Alternatively, you can navigate to the <emphasis>Overview</emphasis> screen in the Web console and click the route URL in the header above the pod containing your Hystrix Dashboard application.</simpara>
</listitem>
<listitem>
<simpara>To use the Dashboard to monitor the <literal>MY_APP_NAME-greeting</literal> service, replace the default event stream address with the following address and click the <emphasis>Monitor Stream</emphasis> button.</simpara>
<screen linenumbering="unnumbered">http://MY_APP_NAME-greeting/hystrix.stream</screen>
</listitem>
</orderedlist>
<itemizedlist>
<title>Additional resources</title>
<listitem>
<simpara>The Hystrix Dashboard <link xl:href="https://github.com/Netflix/Hystrix/wiki/Dashboard">wiki page</link></simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="circuit-breaker-resources_circuit-breaker">
<title>Circuit breaker resources</title>
<simpara>Follow the links below for more background information on the design principles behind the Circuit Breaker pattern</simpara>
<itemizedlist>
<listitem>
<simpara><link xl:href="http://microservices.io/patterns/reliability/circuit-breaker.html">microservices.io: Microservice Patterns: Circuit Breaker</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://martinfowler.com/bliki/CircuitBreaker.html">Martin Fowler: CircuitBreaker</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="/docs/spring-boot-runtime.html#example-circuit-breaker-spring-boot">Circuit Breaker for Spring Boot</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="/docs/vertx-runtime.html#example-circuit-breaker-vertx">Circuit Breaker for Eclipse Vert.x</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="/docs/nodejs-runtime.html#example-circuit-breaker-nodejs">Circuit Breaker for Node.js</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="/docs/nodejs-runtime.html#example-circuit-breaker-nodejs">Circuit Breaker for Thorntail</link></simpara>
</listitem>
</itemizedlist>
</section>
</section>
<section xml:id="example-rest-http-secured-open-liberty">
<title>Secured example application for Open Liberty</title>
<simpara><emphasis role="strong">Limitation:</emphasis> Run this example application on a Minishift or CDK. You can also use a manual workflow to deploy this example to OpenShift Online Pro and OpenShift Container Platform.
This example is not currently available on OpenShift Online Starter.</simpara>
<simpara>Example proficiency level:
<link linkend="proficiency_advanced"><emphasis role="strong">Advanced</emphasis></link>.</simpara>
<simpara>The Secured example application secures a REST endpoint using <link xl:href="https://access.redhat.com/products/red-hat-single-sign-on">Red Hat SSO</link>. (This example expands on the REST API Level 0 example).</simpara>
<simpara>Red Hat SSO:</simpara>
<itemizedlist>
<listitem>
<simpara>Implements the <link xl:href="https://access.redhat.com/documentation/en-us/red_hat_single_sign-on/7.1/html/securing_applications_and_services_guide/openid_connect_3">Open ID Connect</link> protocol which is an extension of the OAuth 2.0 specification.</simpara>
</listitem>
<listitem>
<simpara>Issues access tokens to provide clients with various access rights to secured resources.</simpara>
</listitem>
</itemizedlist>
<simpara>Securing an application with SSO enables you to add security to your applications while centralizing the security configuration.</simpara>
<important>
<simpara>This example comes with Red Hat SSO pre-configured for demonstration purposes, it does not explain its principles, usage, or configuration.
Before using this example, ensure that you are familiar with the basic concepts related to <link xl:href="https://access.redhat.com/documentation/en-us/red_hat_single_sign-on/7.1/html-single/getting_started_guide/">Red Hat SSO</link>.</simpara>
</important>
<section xml:id="_the_secured_project_structure">
<title>The Secured project structure</title>
<simpara>The SSO example contains:</simpara>
<itemizedlist>
<listitem>
<simpara>the sources for the Greeting service, which is the one which we are going to to secure</simpara>
</listitem>
<listitem>
<simpara>a template file (<literal>service.sso.yaml</literal>) to deploy the SSO server</simpara>
</listitem>
<listitem>
<simpara>the Keycloak adapter configuration to secure the service</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="rhsso-deployment-configuration_secured">
<title>Red Hat SSO deployment configuration</title>
<simpara>The <literal>service.sso.yaml</literal> file in this example contains all OpenShift configuration items to deploy a pre-configured Red Hat SSO server.
The SSO server configuration has been simplified for the sake of this exercise and does provide an out-of-the-box configuration, with pre-configured users and security settings.
The <literal>service.sso.yaml</literal> file also contains very long lines, and some text editors, such as <link xl:href="https://wiki.gnome.org/Apps/Gedit">gedit</link>, may have issues reading this file.</simpara>
<warning>
<simpara>It is not recommended to use this SSO configuration in production.
Specifically, the simplifications made to the example security configuration impact the ability to use it in a production environment.</simpara>
</warning>
<table frame="all" rowsep="1" colsep="1">
<title>SSO Example Simplifications</title>
<?dbhtml table-width="100%"?>
<?dbfo table-width="100%"?>
<?dblatex table-width="100%"?>
<tgroup cols="3">
<colspec colname="col_1" colwidth="141.6665*"/>
<colspec colname="col_2" colwidth="141.6665*"/>
<colspec colname="col_3" colwidth="141.6669*"/>
<thead>
<row>
<entry align="left" valign="top">Change</entry>
<entry align="left" valign="top">Reason</entry>
<entry align="left" valign="top">Recommendation</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>The default configuration includes both public and <emphasis role="strong">private keys in the yaml configuration files</emphasis>.</simpara></entry>
<entry align="left" valign="top"><simpara>We did this because the end user can deploy Red Hat SSO module and have it in a usable state without needing to know the internals or how to configure Red Hat SSO.</simpara></entry>
<entry align="left" valign="top"><simpara>In production, do not store private keys under source control.
They should be added by the server administrator.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>The configured <emphasis role="strong">clients accept any callback url</emphasis>.</simpara></entry>
<entry align="left" valign="top"><simpara>To avoid having a custom configuration for each runtime, we avoid the callback verification that is required by the OAuth2 specification.</simpara></entry>
<entry align="left" valign="top"><simpara>An application-specific callback URL should be provided with a valid domain name.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Clients do not require SSL/TLS and the secured applications are not exposed over HTTPS</emphasis>.</simpara></entry>
<entry align="left" valign="top"><simpara>The examples are simplified by not requiring certificates generated for each runtime.</simpara></entry>
<entry align="left" valign="top"><simpara>In production a secure application should use HTTPS rather than plain HTTP.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">The token timeout has been increased to 10 minutes from the default of 1 minute.</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Provides a better user experience when working with the command line examples</simpara></entry>
<entry align="left" valign="top"><simpara>From a security perspective, the window an attacker would have to guess the access token is extended.
It is recommended to keep this window short as it makes it much harder for a potential attacker to guess the current token.</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
</section>
<section xml:id="rhsso-realm-model_secured">
<title>Red Hat SSO realm model</title>
<simpara>The <literal>master</literal> realm is used to secure this example.
There are two pre-configured application client definitions that provide a model for command line clients and the secured REST endpoint.</simpara>
<simpara>There are also two pre-configured users in the Red Hat SSO <literal>master</literal> realm that can be used to validate various authentication and authorization outcomes:  <literal>admin</literal> and <literal>alice</literal>.</simpara>
<section xml:id="_red_hat_sso_users">
<title>Red Hat SSO users</title>
<simpara>The realm model for the secured examples includes two users:</simpara>
<variablelist>
<varlistentry>
<term>admin</term>
<listitem>
<simpara>The <literal>admin</literal> user has a password of <literal>admin</literal> and is the realm administrator.
This user has full access to the Red Hat SSO administration console, but none of the role mappings that are required to access the secured endpoints.
You can use this user to illustrate the behavior of an authenticated, but unauthorized user.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>alice</term>
<listitem>
<simpara>The <literal>alice</literal> user has a password of <literal>password</literal> and is the canonical application user.
This user will demonstrate successful authenticated and authorized access to the secured endpoints.
An example representation of the role mappings is provided in this decoded JWT bearer token:</simpara>
<programlisting language="json" linenumbering="unnumbered">{
  "jti": "0073cfaa-7ed6-4326-ac07-c108d34b4f82",
  "exp": 1510162193,
  "nbf": 0,
  "iat": 1510161593,
  "iss": "https://secure-sso-sso.LOCAL_OPENSHIFT_HOSTNAME/auth/realms/master", <co xml:id="CO1-1"/>
  "aud": "demoapp",
  "sub": "c0175ccb-0892-4b31-829f-dda873815fe8",
  "typ": "Bearer",
  "azp": "demoapp",
  "nonce": "90ff5d1a-ba44-45ae-a413-50b08bf4a242",
  "auth_time": 1510161591,
  "session_state": "98efb95a-b355-43d1-996b-0abcb1304352",
  "acr": "1",
  "client_session": "5962112c-2b19-461e-8aac-84ab512d2a01",
  "allowed-origins": [
    "*"
  ],
  "realm_access": {
    "roles": [ <co xml:id="CO1-2"/>
      "example-admin"
    ]
  },
  "resource_access": { <co xml:id="CO1-3"/>
    "secured-example-endpoint": {
      "roles": [
        "example-admin" <co xml:id="CO1-4"/>
      ]
    },
    "account": {
      "roles": [
        "manage-account",
        "view-profile"
      ]
    }
  },
  "name": "Alice InChains",
  "preferred_username": "alice", <co xml:id="CO1-5"/>
  "given_name": "Alice",
  "family_name": "InChains",
  "email": "alice@keycloak.org"
}</programlisting>
<calloutlist>
<callout arearefs="CO1-1">
<para>The <literal>iss</literal> field corresponds to the Red Hat SSO realm instance URL that issues the token. This must be configured in the secured endpoint deployments in order for the token to be verified.</para>
</callout>
<callout arearefs="CO1-2">
<para>The <literal>roles</literal> object provides the roles that have been granted to the user at the global realm level. In this case
<literal>alice</literal> has been granted the <literal>example-admin</literal> role. We will see that the secured endpoint will look to the realm level for authorized roles.</para>
</callout>
<callout arearefs="CO1-3">
<para>The <literal>resource_access</literal> object contains resource specific role grants. Under this object you will find an object
for each of the secured endpoints.</para>
</callout>
<callout arearefs="CO1-4">
<para>The <literal>resource_access.secured-example-endpoint.roles</literal> object contains the roles granted to <literal>alice</literal> for the <literal>secured-example-endpoint</literal> resource.</para>
</callout>
<callout arearefs="CO1-5">
<para>The <literal>preferred_username</literal> field provides the username that was used to generate the access token.</para>
</callout>
</calloutlist>
</listitem>
</varlistentry>
</variablelist>
</section>
<section xml:id="_the_application_clients">
<title>The application clients</title>
<simpara>The OAuth 2.0 specification allows you to define a role for application clients that access secured resources on behalf of resource owners. The <literal>master</literal> realm has the following application clients defined:</simpara>
<variablelist>
<varlistentry>
<term>demoapp</term>
<listitem>
<simpara>This is a <literal>confidential</literal> type client with a client secret that is used to obtain an access token. The token contains grants for the <literal>alice</literal> user which enable <literal>alice</literal> to access the Thorntail, Eclipse Vert.x, Node.js and Spring Boot based REST example application deployments.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>secured-example-endpoint</term>
<listitem>
<simpara>The <literal>secured-example-endpoint</literal> is a bearer-only type of client that requires a <literal>example-admin</literal> role for accessing the associated resources, specifically the Greeting service.</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
</section>
<section xml:id="openliberty-sso-adapter-configuration_secured">
<title>Open Liberty SSO adapter configuration</title>
<simpara>The SSO adapter is the <emphasis>client side</emphasis>, or client to the SSO server, component that enforces security on the web resources.
In this specific case, it is the greeting service.</simpara>
<simpara>In Open Liberty, the security configuration breaks down into two notable assets:</simpara>
<itemizedlist>
<listitem>
<simpara>The <literal>web.xml</literal> configuration to enact the security for the service</simpara>
</listitem>
<listitem>
<simpara>The <literal>server.xml</literal> configuration for the keycloak adapter.</simpara>
</listitem>
</itemizedlist>
<formalpara>
<title>Enacting Security using <literal>web.xml</literal></title>
<para>
<programlisting language="xml" linenumbering="unnumbered">&lt;web-app xmlns="http://java.sun.com/xml/ns/javaee" version="2.5"&gt;
  &lt;security-constraint&gt;
    &lt;web-resource-collection&gt;
      &lt;url-pattern&gt;/api/greeting&lt;/url-pattern&gt; <co xml:id="CO2-1"/>
    &lt;/web-resource-collection&gt;
    &lt;auth-constraint&gt;
      &lt;role-name&gt;example-admin&lt;/role-name&gt; <co xml:id="CO2-2"/>
    &lt;/auth-constraint&gt;
  &lt;/security-constraint&gt;

  &lt;login-config&gt;
    &lt;auth-method&gt;MP-JWT&lt;/auth-method&gt; <co xml:id="CO2-3"/>
  &lt;/login-config&gt;

  &lt;security-role&gt;
    &lt;role-name&gt;example-admin&lt;/role-name&gt;
  &lt;/security-role&gt;


&lt;/web-app&gt;</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO2-1">
<para>The web context that is to be secured.</para>
</callout>
<callout arearefs="CO2-2">
<para>The role needed to access the endpoint.</para>
</callout>
<callout arearefs="CO2-3">
<para>Using MicroProfile JWT as the authentication method.</para>
</callout>
</calloutlist>
<formalpara>
<title>MicroProfile JWT settings in <literal>microprofile-config.properties</literal></title>
<para>
<programlisting language="properties" linenumbering="unnumbered">mp.jwt.verify.publickey.location=META-INF/rest-secure.pem <co xml:id="CO3-1"/>
mp.jwt.verify.issuer=${SSO_AUTH_SERVER_URL} <co xml:id="CO3-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO3-1">
<para>The location of the realm public key in PEM format. You can obtain the public key from the administration console.</para>
</callout>
<callout arearefs="CO3-2">
<para>The address of the Red Hat SSO server (Interpolation at build time.)</para>
</callout>
</calloutlist>
<formalpara>
<title>Enacting Security in <literal>server.xml</literal> configuration</title>
<para>
<programlisting language="xml" linenumbering="unnumbered">	&lt;mpJwt id="secure_sso"
    issuer="${SSO_AUTH_SERVER_URL}/realms/master" <co xml:id="CO4-1"/>
		audiences="master_realm, account" <co xml:id="CO4-2"/>
    mapToUserRegistry="true" <co xml:id="CO4-3"/>
		userNameAttribute="preferred_username" /&gt; <co xml:id="CO4-4"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO4-1">
<para>The security realm to be used.</para>
</callout>
<callout arearefs="CO4-2">
<para>The relevant audiences</para>
</callout>
<callout arearefs="CO4-3">
<para>A setting that allows the Open Liberty user registry to be used for authorization rather than the JWT token. To use the JWT token instead, the Red Hat SSO administration console can be used to map the role information to the groups attribute.</para>
</callout>
<callout arearefs="CO4-4">
<para>The name of the attribute that the JWT token will use for the user name.</para>
</callout>
</calloutlist>
<simpara>The <literal>web.xml</literal> enforces protection of the Greeting service web resource endpoint. The microprofile-config.properties and server.xml files configure the security adapter to interact with Red Hat SSO.</simpara>
</section>
<section xml:id="deploying-the-secured-example-application-to-openshiftlocal_secured">
<title>Deploying the Secured example application to Minishift or CDK</title>
<section xml:id="getting-the-launcher-tool-url-and-credentials_secured-osl">
<title>Getting the Fabric8 Launcher tool URL and credentials</title>
<simpara>You need the Fabric8 Launcher tool URL and user credentials to create and deploy example applications on Minishift or CDK. This information is provided when the Minishift or CDK is started.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>The Fabric8 Launcher tool installed, configured, and running. For more information, see the <link xl:href="/docs/minishift-installation.html">Install and Configure the Fabric8 Launcher Tool</link> guide.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Navigate to the console where you started Minishift or CDK.</simpara>
</listitem>
<listitem>
<simpara>Check the console output for the URL and user credentials you can use to access the running Fabric8 Launcher:</simpara>
<formalpara>
<title>Example Console Output from a Minishift or CDK Startup</title>
<para>
<programlisting language="bash" linenumbering="unnumbered">...
-- Removing temporary directory ... OK
-- Server Information ...
   OpenShift server started.
   The server is accessible via web console at:
       https://192.168.42.152:8443

   You are logged in as:
       User:     developer
       Password: developer

   To login as administrator:
       oc login -u system:admin</programlisting>
</para>
</formalpara>
</listitem>
</orderedlist>
</section>
<section xml:id="creating-the-secured-example-application-using-launcher_secured-osl">
<title>Creating the Secured example application using Fabric8 Launcher</title>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>The URL and user credentials of your running Fabric8 Launcher instance.
For more information, see <xref linkend="getting-the-launcher-tool-url-and-credentials_secured-osl"/>.</simpara>
</listitem>
</itemizedlist>
<itemizedlist>
<title>Procedure</title>
<listitem>
<simpara>Navigate to the Fabric8 Launcher URL in a browser and log in.</simpara>
</listitem>
<listitem>
<simpara>Follow the on-screen instructions to create your example in Open Liberty.
When asked about which deployment type, select <emphasis>I will build and run locally.</emphasis></simpara>
</listitem>
<listitem>
<simpara>Follow on-screen instructions.</simpara>
<simpara>When done, click the <emphasis role="strong">Download as ZIP file</emphasis> button and store the file on your hard drive.</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="authenticating-the-oc-cli-client_secured-osl">
<title>Authenticating the <literal>oc</literal> CLI client</title>
<simpara>To work with example applications on Minishift or CDK using the <literal>oc</literal> command-line client, you must authenticate the client using the token provided by the Minishift or CDK web interface.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>The URL of your running Fabric8 Launcher instance and the user credentials of your Minishift or CDK. For more information, see <xref linkend="getting-the-launcher-tool-url-and-credentials_secured-osl"/>.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Navigate to the Minishift or CDK URL in a browser.</simpara>
</listitem>
<listitem>
<simpara>Click on the question mark icon in the top right-hand corner of the Web console, next to your user name.</simpara>
</listitem>
<listitem>
<simpara>Select <emphasis>Command Line Tools</emphasis> in the drop-down menu.</simpara>
</listitem>
<listitem>
<simpara>Find the text box that contains the <literal>oc login &#8230;&#8203;</literal> command with the hidden token, and click the button next to it to copy its content to your clipboard.</simpara>
</listitem>
<listitem>
<simpara>Paste the command into a terminal application. The command uses your authentication token to authenticate your <literal>oc</literal> CLI client with your Minishift or CDK account.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ oc login OPENSHIFT_URL --token=MYTOKEN</programlisting>
</listitem>
</orderedlist>
</section>
<section xml:id="deploying-the-secured-example-application-using-the-oc-client_secured-osl">
<title>Deploying the Secured example application using the <literal>oc</literal> CLI client</title>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>The example application created using the Fabric8 Launcher tool on a Minishift or CDK.
For more information, see <xref linkend="creating-the-secured-example-application-using-launcher_secured-osl"/>.</simpara>
</listitem>
<listitem>
<simpara>Your Fabric8 Launcher URL.</simpara>
</listitem>
<listitem>
<simpara>The <literal>oc</literal> client authenticated. For more information, see <xref linkend="authenticating-the-oc-cli-client_secured-osl"/>.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Clone your project from GitHub.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ git clone git@github.com:USERNAME/MY_PROJECT_NAME.git</programlisting>
<simpara>Alternatively, if you downloaded a ZIP file of your project, extract it.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ unzip MY_PROJECT_NAME.zip</programlisting>
</listitem>
<listitem>
<simpara>Create a new OpenShift project.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ oc new-project MY_PROJECT_NAME</programlisting>
</listitem>
<listitem>
<simpara>Navigate to the root directory of your application.</simpara>
</listitem>
<listitem>
<simpara>Deploy the Red Hat SSO server using the <literal>service.sso.yaml</literal> file from your example ZIP file:</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ oc create -f service.sso.yaml</programlisting>
</listitem>
<listitem>
<simpara>Use Maven to start the deployment to Minishift or CDK.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ mvn clean fabric8:deploy -Popenshift -DskipTests \
      -DSSO_AUTH_SERVER_URL=$(oc get route secure-sso -o jsonpath='{"https://"}{.spec.host}{"/auth\n"}')</programlisting>
<simpara>This command uses the Fabric8 Maven Plugin to launch the <link xl:href="https://docs.openshift.com/container-platform/latest/architecture/core_concepts/builds_and_image_streams.html#source-build">S2I process</link> on Minishift or CDK and to start the pod.</simpara>
</listitem>
</orderedlist>
<simpara>This process generates the uberjar file as well as the OpenShift resources and deploys them to the current project on your Minishift or CDK server.</simpara>
</section>
</section>
<section xml:id="deploying-the-secured-example-application-to-openshiftcontainerplatform_secured">
<title>Deploying the Secured example application to OpenShift Container Platform</title>
<simpara>In addition to the Minishift or CDK, you can create and deploy the example on OpenShift Container Platform with only minor differences. The most important difference is that you need to create the example application on Minishift or CDK before you can deploy it with OpenShift Container Platform.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>The example created using <link linkend="deploying-the-secured-example-application-to-openshiftlocal_secured">Minishift or CDK</link>.</simpara>
</listitem>
</itemizedlist>
<section xml:id="authenticating-the-oc-cli-client_secured-ocp">
<title>Authenticating the <literal>oc</literal> CLI client</title>
<simpara>To work with example applications on OpenShift Container Platform using the <literal>oc</literal> command-line client, you must authenticate the client using the token provided by the OpenShift Container Platform web interface.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>An account at OpenShift Container Platform.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Navigate to the OpenShift Container Platform URL in a browser.</simpara>
</listitem>
<listitem>
<simpara>Click on the question mark icon in the top right-hand corner of the Web console, next to your user name.</simpara>
</listitem>
<listitem>
<simpara>Select <emphasis>Command Line Tools</emphasis> in the drop-down menu.</simpara>
</listitem>
<listitem>
<simpara>Find the text box that contains the <literal>oc login &#8230;&#8203;</literal> command with the hidden token, and click the button next to it to copy its content to your clipboard.</simpara>
</listitem>
<listitem>
<simpara>Paste the command into a terminal application. The command uses your authentication token to authenticate your <literal>oc</literal> CLI client with your OpenShift Container Platform account.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ oc login OPENSHIFT_URL --token=MYTOKEN</programlisting>
</listitem>
</orderedlist>
</section>
<section xml:id="deploying-the-secured-example-application-using-the-oc-client_secured-ocp">
<title>Deploying the Secured example application using the <literal>oc</literal> CLI client</title>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>The example application created using the Fabric8 Launcher tool on a Minishift or CDK.</simpara>
</listitem>
<listitem>
<simpara>The <literal>oc</literal> client authenticated. For more information, see <xref linkend="authenticating-the-oc-cli-client_secured-ocp"/>.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Clone your project from GitHub.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ git clone git@github.com:USERNAME/MY_PROJECT_NAME.git</programlisting>
<simpara>Alternatively, if you downloaded a ZIP file of your project, extract it.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ unzip MY_PROJECT_NAME.zip</programlisting>
</listitem>
<listitem>
<simpara>Create a new OpenShift project.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ oc new-project MY_PROJECT_NAME</programlisting>
</listitem>
<listitem>
<simpara>Navigate to the root directory of your application.</simpara>
</listitem>
<listitem>
<simpara>Deploy the Red Hat SSO server using the <literal>service.sso.yaml</literal> file from your example ZIP file:</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ oc create -f service.sso.yaml</programlisting>
</listitem>
<listitem>
<simpara>Use Maven to start the deployment to OpenShift Container Platform.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ mvn clean fabric8:deploy -Popenshift -DskipTests \
      -DSSO_AUTH_SERVER_URL=$(oc get route secure-sso -o jsonpath='{"https://"}{.spec.host}{"/auth\n"}')</programlisting>
<simpara>This command uses the Fabric8 Maven Plugin to launch the <link xl:href="https://docs.openshift.com/container-platform/latest/architecture/core_concepts/builds_and_image_streams.html#source-build">S2I process</link> on OpenShift Container Platform and to start the pod.</simpara>
</listitem>
</orderedlist>
<simpara>This process generates the uberjar file as well as the OpenShift resources and deploys them to the current project on your OpenShift Container Platform server.</simpara>
</section>
</section>
<section xml:id="authenticating-to-the-secured-example-application-api-endpoint_secured">
<title>Authenticating to the Secured example application API endpoint</title>
<simpara>The Secured example application provides a default HTTP endpoint that accepts <literal>GET</literal> requests if the caller is authenticated and authorized.
The client first authenticates against the Red Hat SSO server and then performs a <literal>GET</literal> request against the Secured example application using the access token returned by the authentication step.</simpara>
<section xml:id="getting-the-secured-example-application-api-endpoint_secured">
<title>Getting the Secured example application API endpoint</title>
<simpara>When using a client to interact with the example, you must specify the Secured example application endpoint, which is the <emphasis>PROJECT_ID</emphasis> service.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>The Secured example application deployed and running.</simpara>
</listitem>
<listitem>
<simpara>The <literal>oc</literal> client authenticated.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>In a terminal application, execute the <literal>oc get routes</literal> command.</simpara>
<simpara>A sample output is shown in the following table:</simpara>
<example>
<title>List of Secured endpoints</title>
<informaltable frame="all" rowsep="1" colsep="1">
<?dbhtml table-width="100%"?>
<?dbfo table-width="100%"?>
<?dblatex table-width="100%"?>
<tgroup cols="6">
<colspec colname="col_1" colwidth="70.833*"/>
<colspec colname="col_2" colwidth="70.833*"/>
<colspec colname="col_3" colwidth="70.833*"/>
<colspec colname="col_4" colwidth="70.833*"/>
<colspec colname="col_5" colwidth="70.833*"/>
<colspec colname="col_6" colwidth="70.8347*"/>
<thead>
<row>
<entry align="left" valign="top">Name</entry>
<entry align="left" valign="top">Host/Port</entry>
<entry align="left" valign="top">Path</entry>
<entry align="left" valign="top">Services</entry>
<entry align="left" valign="top">Port</entry>
<entry align="left" valign="top">Termination</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>secure-sso</simpara></entry>
<entry align="left" valign="top"><simpara>secure-sso-myproject.LOCAL_OPENSHIFT_HOSTNAME</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>secure-sso</simpara></entry>
<entry align="left" valign="top"><simpara>&lt;all&gt;</simpara></entry>
<entry align="left" valign="top"><simpara>passthrough</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>PROJECT_ID</simpara></entry>
<entry align="left" valign="top"><simpara>PROJECT_ID-myproject.LOCAL_OPENSHIFT_HOSTNAME</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>PROJECT_ID</simpara></entry>
<entry align="left" valign="top"><simpara>&lt;all&gt;</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>sso</simpara></entry>
<entry align="left" valign="top"><simpara>sso-myproject.LOCAL_OPENSHIFT_HOSTNAME</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>sso</simpara></entry>
<entry align="left" valign="top"><simpara>&lt;all&gt;</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</example>
<simpara>In the above example, the example endpoint would be <literal>http://PROJECT_ID-myproject.LOCAL_OPENSHIFT_HOSTNAME</literal>.
<literal>PROJECT_ID</literal> is based on the name you entered when generating your example using <link xl:href="https://developers.redhat.com/launch">developers.redhat.com/launch</link> or the Fabric8 Launcher tool.</simpara>
</listitem>
</orderedlist>
</section>
<section xml:id="authenticating-http-requests-using-the-command-line_secured">
<title>Authenticating HTTP requests using the command line</title>
<simpara>Request a token by sending a HTTP POST request to the Red Hat SSO server.
In the following example, the <link xl:href="https://stedolan.github.io/jq/">jq CLI tool</link> is used to extract the token value from the JSON response.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>The secured example endpoint URL. For more information, see <xref linkend="getting-the-secured-example-application-api-endpoint_secured"/>.</simpara>
</listitem>
<listitem>
<simpara>The <literal>jq</literal> command-line tool (optional). To download the tool and for more information, see <link xl:href="https://stedolan.github.io/jq/">https://stedolan.github.io/jq/</link>.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Request an access token with <literal>curl</literal>, the credentials, and <literal>&lt;SSO_AUTH_SERVER_URL&gt;</literal> and extract the token from the response with the <literal>jq</literal> command:</simpara>
<programlisting language="bash" linenumbering="unnumbered">curl -sk -X POST https://&lt;SSO_AUTH_SERVER_URL&gt;/auth/realms/master/protocol/openid-connect/token \
  -d grant_type=password \
  -d username=alice\
  -d password=password \
  -d client_id=demoapp \
  -d client_secret=1daa57a2-b60e-468b-a3ac-25bd2dc2eadc \
  | jq -r '.access_token'

eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRek1nbXhZMUhrQnpxTnR0SnkwMm5jNTNtMGNiWDQxV1hNSTU1MFo4MGVBIn0.eyJqdGkiOiI0NDA3YTliNC04YWRhLTRlMTctODQ2ZS03YjI5MjMyN2RmYTIiLCJleHAiOjE1MDc3OTM3ODcsIm5iZiI6MCwiaWF0IjoxNTA3NzkzNzI3LCJpc3MiOiJodHRwczovL3NlY3VyZS1zc28tc3NvLWRlbW8uYXBwcy5jYWZlLWJhYmUub3JnL2F1dGgvcmVhbG1zL21hc3RlciIsImF1ZCI6ImRlbW9hcHAiLCJzdWIiOiJjMDE3NWNjYi0wODkyLTRiMzEtODI5Zi1kZGE4NzM4MTVmZTgiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJkZW1vYXBwIiwiYXV0aF90aW1lIjowLCJzZXNzaW9uX3N0YXRlIjoiMDFjOTkzNGQtNmZmOS00NWYzLWJkNWUtMTU4NDI5ZDZjNDczIiwiYWNyIjoiMSIsImNsaWVudF9zZXNzaW9uIjoiMzM3Yzk0MTYtYTdlZS00ZWUzLThjZWQtODhlODI0MGJjNTAyIiwiYWxsb3dlZC1vcmlnaW5zIjpbIioiXSwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbImJvb3N0ZXItYWRtaW4iXX0sInJlc291cmNlX2FjY2VzcyI6eyJzZWN1cmVkLWJvb3N0ZXItZW5kcG9pbnQiOnsicm9sZXMiOlsiYm9vc3Rlci1hZG1pbiJdfSwiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsInZpZXctcHJvZmlsZSJdfX0sIm5hbWUiOiJBbGljZSBJbkNoYWlucyIsInByZWZlcnJlZF91c2VybmFtZSI6ImFsaWNlIiwiZ2l2ZW5fbmFtZSI6IkFsaWNlIiwiZmFtaWx5X25hbWUiOiJJbkNoYWlucyIsImVtYWlsIjoiYWxpY2VAa2V5Y2xvYWsub3JnIn0.mjmZe37enHpigJv0BGuIitOj-kfMLPNwYzNd3n0Ax4Nga7KpnfytGyuPSvR4KAG8rzkfBNN9klPYdy7pJEeYlfmnFUkM4EDrZYgn4qZAznP1Wzy1RfVRdUFi0-GqFTMPb37o5HRldZZ09QljX_j3GHnoMGXRtYW9RZN4eKkYkcz9hRwgfJoTy2CuwFqeJwZYUyXifrfA-JoTr0UmSUed-0NMksGrtJjjPggUGS-qOn6OgKcmN2vaVAQlxW32y53JqUXctfLQ6DhJzIMYTmOflIPy0sgG1mG7sovQhw1xTg0vTjdx8zQ-EJcexkj7IivRevRZsslKgqRFWs67jQAFQA</programlisting>
<simpara><literal>&lt;SSO_AUTH_SERVER_URL&gt;</literal> is the url of the <literal>secure-sso</literal> service.</simpara>
<simpara>The attributes, such as <literal>username</literal>, <literal>password</literal>, and <literal>client_secret</literal> are usually kept secret, but the above command uses the default provided credentials with this example for demonstration purpose.</simpara>
<simpara>If you do not want to use <literal>jq</literal> to extract the token, you can run just the <literal>curl</literal> command and manually extract the access token.</simpara>
<note>
<simpara>The <literal>-sk</literal> option tells curl to ignore failures resulting from self-signed certificates. Do not use this option in a production environment. On macOS, you must have <literal>curl</literal> version <literal>7.56.1</literal> or greater installed. It must also be built with OpenSSL.</simpara>
</note>
</listitem>
</orderedlist>
<orderedlist numeration="arabic">
<listitem>
<simpara>Invoke the Secured service. Attach the access (bearer) token to the HTTP headers:</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ curl -v -H "Authorization: Bearer &lt;TOKEN&gt;" http://&lt;SERVICE_HOST&gt;/api/greeting

{
    "content": "Hello, World!",
    "id": 2
}</programlisting>
<example>
<title>A sample <literal>GET</literal> Request Headers with an Access (Bearer) Token</title>
<programlisting language="bash" linenumbering="unnumbered">&gt; GET /api/greeting HTTP/1.1
&gt; Host: &lt;SERVICE_HOST&gt;
&gt; User-Agent: curl/7.51.0
&gt; Accept: */*
&gt; Authorization: Bearer &lt;TOKEN&gt;</programlisting>
</example>
<simpara><literal>&lt;SERVICE_HOST&gt;</literal> is the URL of the secured example endpoint.
For more information, see <xref linkend="getting-the-secured-example-application-api-endpoint_secured"/>.</simpara>
</listitem>
<listitem>
<simpara>Verify the signature of the access token.</simpara>
<simpara>The access token is a <link xl:href="https://jwt.io">JSON Web Token</link>, so you can decode it using the <link xl:href="https://jwt.io/#debugger-io">JWT Debugger</link>:</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>In a web browser, navigate to the <link xl:href="https://jwt.io/#debugger-io">JWT Debugger</link> website.</simpara>
</listitem>
<listitem>
<simpara>Select <literal>RS256</literal> from the <emphasis>Algorithm</emphasis> drop down menu.</simpara>
<note>
<simpara>Make sure the web form has been updated after you made the selection, so it displays the correct RSASHA256(&#8230;&#8203;) information in the Signature section. If it has not, try switching to HS256 and then back to RS256.</simpara>
</note>
</listitem>
<listitem>
<simpara>Paste the following content in the topmost text box into the <emphasis>VERIFY SIGNATURE</emphasis> section:</simpara>
<programlisting language="base64" linenumbering="unnumbered">-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAoETnPmN55xBJjRzN/cs30OzJ9olkteLVNRjzdTxFOyRtS2ovDfzdhhO9XzUcTMbIsCOAZtSt8K+6yvBXypOSYvI75EUdypmkcK1KoptqY5KEBQ1KwhWuP7IWQ0fshUwD6jI1QWDfGxfM/h34FvEn/0tJ71xN2P8TI2YanwuDZgosdobx/PAvlGREBGuk4BgmexTOkAdnFxIUQcCkiEZ2C41uCrxiS4CEe5OX91aK9HKZV4ZJX6vnqMHmdDnsMdO+UFtxOBYZio+a1jP4W3d7J5fGeiOaXjQCOpivKnP2yU2DPdWmDMyVb67l8DRA+jh0OJFKZ5H2fNgE3II59vdsRwIDAQAB
-----END PUBLIC KEY-----</programlisting>
<note>
<simpara>This is the master realm public key from the Red Hat SSO server deployment of the Secured example application.</simpara>
</note>
</listitem>
<listitem>
<simpara>Paste the <literal>token</literal> output from the client output into the <emphasis>Encoded</emphasis> box.</simpara>
<simpara>The <emphasis>Signature Verified</emphasis> sign is displayed on the debugger page.</simpara>
</listitem>
</orderedlist>
</listitem>
</orderedlist>
</section>
<section xml:id="authenticating-http-requests-using-the-web-interface_secured">
<title>Authenticating HTTP requests using the web interface</title>
<simpara>In addition to the HTTP API, the secured endpoint also contains a web interface to interact with.</simpara>
<simpara>The following procedure is an exercise for you to see how security is enforced, how you authenticate, and how you work with the authentication token.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>The secured endpoint URL. For more information, see <xref linkend="getting-the-secured-example-application-api-endpoint_secured"/>.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>In a web browser, navigate to the endpoint URL.</simpara>
</listitem>
<listitem>
<simpara>Perform an unauthenticated request:</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>Click the <emphasis>Invoke</emphasis> button.</simpara>
<figure>
<title>Unauthenticated Secured Example Web Interface</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/sso-main.png"/>
</imageobject>
<textobject><phrase>sso main</phrase></textobject>
</mediaobject>
</figure>
<simpara>The services responds with an <literal>HTTP 401 Unauthorized</literal> status code.</simpara>
<figure>
<title>Unauthenticated Error Message</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/sso-unauthenticated.png"/>
</imageobject>
<textobject><phrase>sso unauthenticated</phrase></textobject>
</mediaobject>
</figure>
</listitem>
</orderedlist>
</listitem>
<listitem>
<simpara>Perform an authenticated request as a user:</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>Click the <emphasis>Login</emphasis> button to authenticate against Red Hat SSO. You will be redirected to the SSO server.</simpara>
</listitem>
<listitem>
<simpara>Log in as <link linkend="rhsso-realm-model_secured">the <emphasis>Alice</emphasis> user</link>. You will be redirected back to the web interface.</simpara>
<note>
<simpara>You can see the access (bearer) token in the command line output at the bottom of the page.</simpara>
</note>
<figure>
<title>Authenticated Secured Example Web Interface (as Alice)</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/sso-alice.png"/>
</imageobject>
<textobject><phrase>sso alice</phrase></textobject>
</mediaobject>
</figure>
</listitem>
<listitem>
<simpara>Click <emphasis>Invoke</emphasis> again to access the Greeting service.</simpara>
<simpara>Confirm that there is no exception and the JSON response payload is displayed. This means the service accepted your access (bearer) token and you are authorized access to the Greeting service.</simpara>
<figure>
<title>The Result of an Authenticated Greeting Request (as Alice)</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/sso-invoke-alice.png"/>
</imageobject>
<textobject><phrase>sso invoke alice</phrase></textobject>
</mediaobject>
</figure>
</listitem>
<listitem>
<simpara>Log out.</simpara>
</listitem>
</orderedlist>
</listitem>
<listitem>
<simpara>Perform an authenticated request as an admininstrator:</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>Click the <emphasis>Invoke</emphasis> button.</simpara>
<simpara>Confirm that this sends an unauthenticated request to the Greeting service.</simpara>
</listitem>
<listitem>
<simpara>Click the <emphasis>Login</emphasis> button and log in as <link linkend="rhsso-realm-model_secured">the <emphasis>admin</emphasis> user</link>.</simpara>
<figure>
<title>Authenticated Secured Example Web Interface (as admin)</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/sso-admin.png"/>
</imageobject>
<textobject><phrase>sso admin</phrase></textobject>
</mediaobject>
</figure>
</listitem>
</orderedlist>
</listitem>
<listitem>
<simpara>Click the <emphasis>Invoke</emphasis> button.</simpara>
<simpara>The service responds with an <literal>HTTP 403 Forbidden</literal> status code because the <emphasis>admin</emphasis> user is not authorized to access the Greeting service.</simpara>
<figure>
<title>Unauthorized Error Message</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/sso-unauthorized.png"/>
</imageobject>
<textobject><phrase>sso unauthorized</phrase></textobject>
</mediaobject>
</figure>
</listitem>
</orderedlist>
</section>
</section>
<section xml:id="secured-sso-resources_secured">
<title>Secured SSO resources</title>
<simpara>Follow the links below for additional information on the principles behind the OAuth2 specification and on securing your applications using Red Hat SSO and Keycloak:</simpara>
<itemizedlist>
<listitem>
<simpara><link xl:href="https://aaronparecki.com/oauth-2-simplified/">Aaron Parecki: OAuth2 Simplified</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://access.redhat.com/documentation/en/red-hat-single-sign-on?version=7.1/">Red Hat SSO 7.1 Documentation</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="http://www.keycloak.org/archive/documentation-3.2.html">Keycloak 3.2 Documentation</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="/docs/spring-boot-runtime.html#example-rest-http-secured-spring-boot">Secured for Spring Boot</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="/docs/vertx-runtime.html#example-rest-http-secured-vertx">Secured for Eclipse Vert.x</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="/docs/thorntail-runtime.html#example-rest-http-secured-wf-swarm">Secured for Thorntail</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="/docs/nodejs-runtime.html#example-rest-http-secured-nodejs">Secured for Node.js</link></simpara>
</listitem>
</itemizedlist>
</section>
</section>
<section xml:id="example-cache-open-liberty">
<title>Cache example for Open Liberty</title>
<simpara><emphasis role="strong">Limitation:</emphasis> Run this example application on a Minishift or CDK. You can also use a manual workflow to deploy this example to OpenShift Online Pro and OpenShift Container Platform.
This example is not currently available on OpenShift Online Starter.</simpara>
<simpara>Example proficiency level: <link linkend="proficiency_advanced"><emphasis role="strong">Advanced</emphasis></link>.</simpara>
<simpara>The Cache example demonstrates how to use a cache to increase the response time of applications.</simpara>
<simpara>This example shows you how to:</simpara>
<itemizedlist>
<listitem>
<simpara>Deploy a cache to OpenShift.</simpara>
</listitem>
<listitem>
<simpara>Use a cache within an application.</simpara>
</listitem>
</itemizedlist>
<section xml:id="how-caching-works-and-when-you-need-it_cache">
<title>How caching works and when you need it</title>
<simpara>Caches allows you to store information and access it for a given period of time.
You can access information in a cache faster or more reliably than repeatedly calling the original service.
A disadvantage of using a cache is that the cached information is not up to date.
However, that problem can be reduced by setting an <emphasis>expiration</emphasis> or TTL (time to live) on each value stored in the cache.</simpara>
<example>
<title>Caching example</title>
<simpara>Assume you have two applications: <emphasis>service1</emphasis> and <emphasis>service2</emphasis>:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis>Service1</emphasis> depends on a value from <emphasis>service2</emphasis>.</simpara>
<itemizedlist>
<listitem>
<simpara>If the value from <emphasis>service2</emphasis> infrequently changes, <emphasis>service1</emphasis> could cache the value from <emphasis>service2</emphasis> for a period of time.</simpara>
</listitem>
<listitem>
<simpara>Using cached values can also reduce the number of times <emphasis>service2</emphasis> is called.</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>If it takes <emphasis>service1</emphasis> 500 ms to retrieve the value directly from <emphasis>service2</emphasis>, but 100 ms to retrieve the cached value, <emphasis>service1</emphasis> would save 400 ms by using the cached value for each cached call.</simpara>
</listitem>
<listitem>
<simpara>If <emphasis>service1</emphasis> would make uncached calls to <emphasis>service2</emphasis> 5 times per second, over 10 seconds, that would be 50 calls.</simpara>
</listitem>
<listitem>
<simpara>If <emphasis>service1</emphasis> started using a cached value with a TTL of 1 second instead, that would be reduced to 10 calls over 10 seconds.</simpara>
</listitem>
</itemizedlist>
</example>
<orderedlist numeration="arabic">
<title>How the Cache example works</title>
<listitem>
<simpara>The <emphasis>cache</emphasis>, <emphasis>cute name</emphasis>, and <emphasis>greeting</emphasis> services are deployed and exposed.</simpara>
</listitem>
<listitem>
<simpara>User accesses the web frontend of the <emphasis>greeting</emphasis> service.</simpara>
</listitem>
<listitem>
<simpara>User invokes the <emphasis>greeting</emphasis> HTTP API using a button on the web frontend.</simpara>
</listitem>
<listitem>
<simpara>The <emphasis>greeting</emphasis> service depends on a value from the <emphasis>cute name</emphasis> service.</simpara>
<itemizedlist>
<listitem>
<simpara>The <emphasis>greeting</emphasis> service first checks if that value is stored in the <emphasis>cache</emphasis> service. If it is, then the cached value is returned.</simpara>
</listitem>
<listitem>
<simpara>If the value is not cached, the <emphasis>greeting</emphasis> service calls the <emphasis>cute name</emphasis> service, returns the value, and stores the value in the <emphasis>cache</emphasis> service with a TTL of 5 seconds.</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>The web front end displays the response from the <emphasis>greeting</emphasis> service as well as the total time of the operation.</simpara>
</listitem>
<listitem>
<simpara>User invokes the service multiple times to see the difference between cached and uncached operations.</simpara>
<itemizedlist>
<listitem>
<simpara>Cached operations are significantly faster than uncached operations.</simpara>
</listitem>
<listitem>
<simpara>User can force the cache to be cleared before the TTL expires.</simpara>
</listitem>
</itemizedlist>
</listitem>
</orderedlist>
</section>
<section xml:id="deploying-the-example-application-to-openshiftonline_cache">
<title>Deploying the Cache example application to OpenShift Online</title>
<simpara>Use one of the following options to execute the Cache example application on OpenShift Online.</simpara>
<itemizedlist>
<listitem>
<simpara><link linkend="deploying-the-example-application-using-launcher-oso_cache-oso">Use developers.redhat.com/launch</link></simpara>
</listitem>
<listitem>
<simpara><link linkend="deploying-the-cache-example-application-using-the-oc-cli-client_cache-oso">Use the <literal>oc</literal> CLI client</link></simpara>
</listitem>
</itemizedlist>
<simpara>Although each method uses the same <literal>oc</literal> commands to deploy your application, using developers.redhat.com/launch provides an automated deployment workflow that executes the <literal>oc</literal> commands for you.</simpara>
<section xml:id="deploying-the-example-application-using-launcher-oso_cache-oso">
<title>Deploying the example application using developers.redhat.com/launch</title>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>An account at <link xl:href="https://manage.openshift.com">OpenShift Online</link>.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Navigate to the <link xl:href="https://developers.redhat.com/launch">developers.redhat.com/launch</link> URL in a browser and log in.</simpara>
</listitem>
<listitem>
<simpara>Follow on-screen instructions to create and launch your example application in Open Liberty.</simpara>
</listitem>
</orderedlist>
</section>
<section xml:id="authenticating-the-oc-cli-client_cache-oso">
<title>Authenticating the <literal>oc</literal> CLI client</title>
<simpara>To work with example applications on <link xl:href="https://manage.openshift.com">OpenShift Online</link> using the <literal>oc</literal> command-line client, you must authenticate the client using the token provided by the <link xl:href="https://manage.openshift.com">OpenShift Online</link> web interface.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>An account at <link xl:href="https://manage.openshift.com">OpenShift Online</link>.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Navigate to the <link xl:href="https://manage.openshift.com">OpenShift Online</link> URL in a browser.</simpara>
</listitem>
<listitem>
<simpara>Click on the question mark icon in the top right-hand corner of the Web console, next to your user name.</simpara>
</listitem>
<listitem>
<simpara>Select <emphasis>Command Line Tools</emphasis> in the drop-down menu.</simpara>
</listitem>
<listitem>
<simpara>Find the text box that contains the <literal>oc login &#8230;&#8203;</literal> command with the hidden token, and click the button next to it to copy its content to your clipboard.</simpara>
</listitem>
<listitem>
<simpara>Paste the command into a terminal application. The command uses your authentication token to authenticate your <literal>oc</literal> CLI client with your <link xl:href="https://manage.openshift.com">OpenShift Online</link> account.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ oc login OPENSHIFT_URL --token=MYTOKEN</programlisting>
</listitem>
</orderedlist>
</section>
<section xml:id="deploying-the-cache-example-application-using-the-oc-cli-client_cache-oso">
<title>Deploying the Cache example application using the <literal>oc</literal> CLI client</title>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>The example application created using <link xl:href="https://developers.redhat.com/launch">developers.redhat.com/launch</link>.
For more information, see <xref linkend="deploying-the-example-application-using-launcher-oso_cache-oso"/>.</simpara>
</listitem>
<listitem>
<simpara>The <literal>oc</literal> client authenticated. For more information, see <xref linkend="authenticating-the-oc-cli-client_cache-oso"/>.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Clone your project from GitHub.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ git clone git@github.com:USERNAME/MY_PROJECT_NAME.git</programlisting>
<simpara>Alternatively, if you downloaded a ZIP file of your project, extract it.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ unzip MY_PROJECT_NAME.zip</programlisting>
</listitem>
<listitem>
<simpara>Create a new project.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ oc new-project MY_PROJECT_NAME</programlisting>
</listitem>
<listitem>
<simpara>Navigate to the root directory of your application.</simpara>
</listitem>
<listitem>
<simpara>Deploy the cache service.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ oc apply -f service.cache.yml</programlisting>
</listitem>
<listitem>
<simpara>Use Maven to start the deployment to OpenShift.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ mvn clean fabric8:deploy -Popenshift</programlisting>
</listitem>
<listitem>
<simpara>Check the status of your application and ensure your pod is running.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ oc get pods -w
NAME                             READY     STATUS      RESTARTS   AGE
cache-server-123456789-aaaaa             1/1       Running     0          8m
MY_APP_NAME-cutename-1-bbbbb       1/1       Running     0          4m
MY_APP_NAME-cutename-s2i-1-build   0/1       Completed   0          7m
MY_APP_NAME-greeting-1-ccccc       1/1       Running     0          3m
MY_APP_NAME-greeting-s2i-1-build   0/1       Completed   0          3m</programlisting>
<simpara>Your 3 pods should have a status of <literal>Running</literal> once they are fully deployed and started.</simpara>
</listitem>
<listitem>
<simpara>After your example application is deployed and started, determine its route.</simpara>
<formalpara>
<title>Example Route Information</title>
<para>
<programlisting language="bash" linenumbering="unnumbered">$ oc get routes
NAME                 HOST/PORT                                                     PATH      SERVICES        PORT      TERMINATION
MY_APP_NAME-cutename   MY_APP_NAME-cutename-MY_PROJECT_NAME.OPENSHIFT_HOSTNAME             MY_APP_NAME-cutename   8080                    None
MY_APP_NAME-greeting   MY_APP_NAME-greeting-MY_PROJECT_NAME.OPENSHIFT_HOSTNAME             MY_APP_NAME-greeting   8080                    None</programlisting>
</para>
</formalpara>
<simpara>The route information of a pod gives you the base URL which you use to access it. In the example above, you would use <literal>http://MY_APP_NAME-greeting-MY_PROJECT_NAME.OPENSHIFT_HOSTNAME</literal> as the base URL to access the greeting service.</simpara>
</listitem>
</orderedlist>
</section>
</section>
<section xml:id="deploying-the-example-application-to-openshiftlocal_cache">
<title>Deploying the Cache example application to Minishift or CDK</title>
<simpara>Use one of the following options to execute the Cache example application locally on Minishift or CDK:</simpara>
<itemizedlist>
<listitem>
<simpara><link linkend="deploying-the-example-application-using-the-launcher-tool_cache-osl">Using Fabric8 Launcher</link></simpara>
</listitem>
<listitem>
<simpara><link linkend="deploying-the-cache-example-application-using-the-oc-cli-client_cache-osl">Using the <literal>oc</literal> CLI client</link></simpara>
</listitem>
</itemizedlist>
<simpara>Although each method uses the same <literal>oc</literal> commands to deploy your application, using Fabric8 Launcher provides an automated deployment workflow that executes the <literal>oc</literal> commands for you.</simpara>
<section xml:id="getting-the-launcher-tool-url-and-credentials_cache-osl">
<title>Getting the Fabric8 Launcher tool URL and credentials</title>
<simpara>You need the Fabric8 Launcher tool URL and user credentials to create and deploy example applications on Minishift or CDK. This information is provided when the Minishift or CDK is started.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>The Fabric8 Launcher tool installed, configured, and running. For more information, see the <link xl:href="/docs/minishift-installation.html">Install and Configure the Fabric8 Launcher Tool</link> guide.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Navigate to the console where you started Minishift or CDK.</simpara>
</listitem>
<listitem>
<simpara>Check the console output for the URL and user credentials you can use to access the running Fabric8 Launcher:</simpara>
<formalpara>
<title>Example Console Output from a Minishift or CDK Startup</title>
<para>
<programlisting language="bash" linenumbering="unnumbered">...
-- Removing temporary directory ... OK
-- Server Information ...
   OpenShift server started.
   The server is accessible via web console at:
       https://192.168.42.152:8443

   You are logged in as:
       User:     developer
       Password: developer

   To login as administrator:
       oc login -u system:admin</programlisting>
</para>
</formalpara>
</listitem>
</orderedlist>
</section>
<section xml:id="deploying-the-example-application-using-the-launcher-tool_cache-osl">
<title>Deploying the example application using the Fabric8 Launcher tool</title>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>The URL of your running Fabric8 Launcher instance and the user credentials of your Minishift or CDK.
For more information, see <xref linkend="getting-the-launcher-tool-url-and-credentials_cache-osl"/>.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Navigate to the Fabric8 Launcher URL in a browser.</simpara>
</listitem>
<listitem>
<simpara>Follow the on-screen instructions to create and launch your example application in Open Liberty.</simpara>
</listitem>
</orderedlist>
</section>
<section xml:id="authenticating-the-oc-cli-client_cache-osl">
<title>Authenticating the <literal>oc</literal> CLI client</title>
<simpara>To work with example applications on Minishift or CDK using the <literal>oc</literal> command-line client, you must authenticate the client using the token provided by the Minishift or CDK web interface.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>The URL of your running Fabric8 Launcher instance and the user credentials of your Minishift or CDK. For more information, see <xref linkend="getting-the-launcher-tool-url-and-credentials_cache-osl"/>.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Navigate to the Minishift or CDK URL in a browser.</simpara>
</listitem>
<listitem>
<simpara>Click on the question mark icon in the top right-hand corner of the Web console, next to your user name.</simpara>
</listitem>
<listitem>
<simpara>Select <emphasis>Command Line Tools</emphasis> in the drop-down menu.</simpara>
</listitem>
<listitem>
<simpara>Find the text box that contains the <literal>oc login &#8230;&#8203;</literal> command with the hidden token, and click the button next to it to copy its content to your clipboard.</simpara>
</listitem>
<listitem>
<simpara>Paste the command into a terminal application. The command uses your authentication token to authenticate your <literal>oc</literal> CLI client with your Minishift or CDK account.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ oc login OPENSHIFT_URL --token=MYTOKEN</programlisting>
</listitem>
</orderedlist>
</section>
<section xml:id="deploying-the-cache-example-application-using-the-oc-cli-client_cache-osl">
<title>Deploying the Cache example application using the <literal>oc</literal> CLI client</title>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>The example application created using Fabric8 Launcher tool on a Minishift or CDK.
For more information, see <xref linkend="deploying-the-example-application-using-the-launcher-tool_cache-osl"/>.</simpara>
</listitem>
<listitem>
<simpara>Your Fabric8 Launcher tool URL.</simpara>
</listitem>
<listitem>
<simpara>The <literal>oc</literal> client authenticated. For more information, see <xref linkend="authenticating-the-oc-cli-client_cache-osl"/>.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Clone your project from GitHub.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ git clone git@github.com:USERNAME/MY_PROJECT_NAME.git</programlisting>
<simpara>Alternatively, if you downloaded a ZIP file of your project, extract it.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ unzip MY_PROJECT_NAME.zip</programlisting>
</listitem>
<listitem>
<simpara>Create a new project.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ oc new-project MY_PROJECT_NAME</programlisting>
</listitem>
<listitem>
<simpara>Navigate to the root directory of your application.</simpara>
</listitem>
<listitem>
<simpara>Deploy the cache service.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ oc apply -f service.cache.yml</programlisting>
</listitem>
<listitem>
<simpara>Use Maven to start the deployment to OpenShift.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ mvn clean fabric8:deploy -Popenshift</programlisting>
</listitem>
<listitem>
<simpara>Check the status of your application and ensure your pod is running.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ oc get pods -w
NAME                             READY     STATUS      RESTARTS   AGE
cache-server-123456789-aaaaa             1/1       Running     0          8m
MY_APP_NAME-cutename-1-bbbbb       1/1       Running     0          4m
MY_APP_NAME-cutename-s2i-1-build   0/1       Completed   0          7m
MY_APP_NAME-greeting-1-ccccc       1/1       Running     0          3m
MY_APP_NAME-greeting-s2i-1-build   0/1       Completed   0          3m</programlisting>
<simpara>Your 3 pods should have a status of <literal>Running</literal> once they are fully deployed and started.</simpara>
</listitem>
<listitem>
<simpara>After your example application is deployed and started, determine its route.</simpara>
<formalpara>
<title>Example Route Information</title>
<para>
<programlisting language="bash" linenumbering="unnumbered">$ oc get routes
NAME                 HOST/PORT                                                     PATH      SERVICES        PORT      TERMINATION
MY_APP_NAME-cutename   MY_APP_NAME-cutename-MY_PROJECT_NAME.OPENSHIFT_HOSTNAME             MY_APP_NAME-cutename   8080                    None
MY_APP_NAME-greeting   MY_APP_NAME-greeting-MY_PROJECT_NAME.OPENSHIFT_HOSTNAME             MY_APP_NAME-greeting   8080                    None</programlisting>
</para>
</formalpara>
<simpara>The route information of a pod gives you the base URL which you use to access it. In the example above, you would use <literal>http://MY_APP_NAME-greeting-MY_PROJECT_NAME.OPENSHIFT_HOSTNAME</literal> as the base URL to access the greeting service.</simpara>
</listitem>
</orderedlist>
</section>
</section>
<section xml:id="deploying-the-example-application-to-openshiftcontainerplatform_cache">
<title>Deploying the Cache example application to OpenShift Container Platform</title>
<simpara>The process of creating and deploying example applications to OpenShift Container Platform is similar to OpenShift Online:</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>The example application created using <link xl:href="https://developers.redhat.com/launch">developers.redhat.com/launch</link> or <link xl:href="/docs/minishift-installation.html">the Fabric8 Launcher tool</link>.</simpara>
</listitem>
</itemizedlist>
<itemizedlist>
<title>Procedure</title>
<listitem>
<simpara>Follow the instructions in <xref linkend="deploying-the-example-application-to-openshiftonline_cache"/>, only use the URL and user credentials from the OpenShift Container Platform Web Console.</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="interacting-with-the-unmodified-cache-example-application_cache">
<title>Interacting with the unmodified Cache example application</title>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>Your application deployed</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Navigate to the <literal>greeting</literal> service using your browser.</simpara>
</listitem>
<listitem>
<simpara>Click <emphasis>Invoke the service</emphasis> once.</simpara>
<simpara>Notice the <literal>duration</literal> value is above <literal>2000</literal>.
Also notice the cache state has changed form <literal>No cached value</literal> to <literal>A value is cached</literal>.</simpara>
</listitem>
<listitem>
<simpara>Wait 5 seconds and notice cache state has changed back to <literal>No cached value</literal>.</simpara>
<simpara>The TTL for the cached value is set to 5 seconds.
When the TTL expires, the value is no longer cached.</simpara>
</listitem>
<listitem>
<simpara>Click <emphasis>Invoke the service</emphasis> once more to cache the value.</simpara>
</listitem>
<listitem>
<simpara>Click <emphasis>Invoke the service</emphasis> a few more times over the course of a few seconds while cache state is <literal>A value is cached</literal>.</simpara>
<simpara>Notice a significantly lower <literal>duration</literal> value since it is using a cached value.
If you click <emphasis>Clear the cache</emphasis>, the cache is emptied.</simpara>
</listitem>
</orderedlist>
</section>
<section xml:id="running-the-example-application-integration-tests_cache">
<title>Running the Cache example application integration tests</title>
<simpara>This example application includes a self-contained set of integration tests.
When run inside an OpenShift project, the tests:</simpara>
<itemizedlist>
<listitem>
<simpara>Deploy a test instance of the application to the project.</simpara>
</listitem>
<listitem>
<simpara>Execute the individual tests on that instance.</simpara>
</listitem>
<listitem>
<simpara>Remove all instances of the application from the project when the testing is done.</simpara>
</listitem>
</itemizedlist>
<warning>
<simpara>Executing integration tests removes all existing instances of the example application from the target OpenShift project.
To avoid accidentally removing your example application, ensure that you create and select a separate OpenShift project to execute the tests.</simpara>
</warning>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>The <literal>oc</literal> client authenticated</simpara>
</listitem>
<listitem>
<simpara>An empty OpenShift project</simpara>
</listitem>
</itemizedlist>
<formalpara>
<title>Procedure</title>
<para>Execute the following command to run the integration tests:</para>
</formalpara>
<programlisting language="bash" linenumbering="unnumbered">$ mvn clean verify -Popenshift,openshift-it</programlisting>
</section>
<section xml:id="caching-resources_cache">
<title>Caching resources</title>
<simpara>More background and related information on caching can be found here:</simpara>
<itemizedlist>
<listitem>
<simpara><link xl:href="/docs/spring-boot-runtime.html#example-cache-spring-boot">Cache for Spring Boot</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="/docs/vertx-runtime.html#example-cache-vertx">Cache for Eclipse Vert.x</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="/docs/thorntail-runtime.html#example-cache-wf-swarm">Cache for Thorntail</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="/docs/nodejs-runtime.html#example-cache-nodejs">Cache for Node.js</link></simpara>
</listitem>
</itemizedlist>
</section>
</section>
</section>
<section xml:id="developing-and-deploying-openliberty-application_open-liberty">
<title>Developing and deploying Open Liberty application</title>
<simpara>In addition to <link linkend="example-rest-http">using an example</link>, you can create new Open Liberty applications from scratch and deploy them to OpenShift.</simpara>
<section xml:id="developing-runtime-application_open-liberty">
<title>Developing Open Liberty application</title>
<simpara>For a basic Open Liberty application, you need to create the following:</simpara>
<itemizedlist>
<listitem>
<simpara>A Java class containing Open Liberty methods.</simpara>
</listitem>
<listitem>
<simpara>A <literal>pom.xml</literal> file containing information required by Maven to build the application.</simpara>
</listitem>
</itemizedlist>
<simpara>The following procedure creates a simple <literal>Greeting</literal> application that returns "Greetings!" as response.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>Maven installed.</simpara>
</listitem>
<listitem>
<simpara>OpenJDK 8 or OpenJDK 11 installed.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Create a new directory <literal>myApp</literal>, and navigate to it.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ mkdir myApp
$ cd myApp</programlisting>
<simpara>This is the root directory for the application.</simpara>
</listitem>
<listitem>
<simpara>Create directory structure <literal>src/main/java/com/example/</literal> in the root directory, and navigate to it.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ mkdir -p src/main/java/com/example/
$ cd src/main/java/com/example/</programlisting>
</listitem>
<listitem>
<simpara>Create a Java class file <literal>MyApp.java</literal> containing the application code.</simpara>
</listitem>
<listitem>
<simpara>Create a <literal>pom.xml</literal> file in the application root directory <literal>myApp</literal> with the following content:</simpara>
</listitem>
<listitem>
<simpara>Build the application using Maven from the root directory of the application.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ mvn liberty:run</programlisting>
</listitem>
<listitem>
<simpara>Verify that the application is running.</simpara>
<simpara>Using <literal>curl</literal> or your browser, verify your application is running at <literal><link xl:href="http://localhost:8080">http://localhost:8080</link></literal>.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ curl http://localhost:8080
Greetings!</programlisting>
</listitem>
</orderedlist>
<itemizedlist>
<title>Additional information</title>
<listitem>
<simpara>As a recommended practice, you can configure liveness and readiness probes to enable health monitoring for your application when running on OpenShift.
To learn how application health monitoring on OpenShift works, try the <link linkend="example-health-check-openliberty">Health Check example</link>.</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="deploying-runtime-application-to-openshift_open-liberty">
<title>Deploying Open Liberty application to OpenShift</title>
<simpara>To deploy your Open Liberty application to OpenShift, configure the <literal>pom.xml</literal> file in your application and then use the Fabric8 Maven plugin.
You can specify an OpenJDK image by replacing the <literal>fabric8.generator.from</literal> URL in the <literal>pom.xml</literal> file.</simpara>
<section xml:id="openjdk-images-for-red-hat-enterprise-linux_open-liberty">
<title>OpenJDK images for Red Hat Enterprise Linux</title>
<simpara>You can select the OpenJDK image used to build and deploy your application to OpenShift.
OpenJDK images are available for RHEL&#160;7 and RHEL&#160;8 with OpenJDK 8 or OpenJDK 11.</simpara>
<simpara>Docker or podman authentication into the Red Hat Container Catalog is required to access RHEL 8 images.
The authentication procedures are provided in the Red Hat Container Catalog links in the following table.</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="33.3333*"/>
<colspec colname="col_2" colwidth="33.3333*"/>
<colspec colname="col_3" colwidth="33.3334*"/>
<thead>
<row>
<entry align="left" valign="top">OS</entry>
<entry align="left" valign="top">JDK</entry>
<entry align="left" valign="top">Red Hat Container Catalog</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>RHEL 7</simpara></entry>
<entry align="left" valign="top"><simpara>OpenJDK 8</simpara></entry>
<entry align="left" valign="top"><simpara><link xl:href="https://access.redhat.com/containers/#/registry.access.redhat.com/redhat-openjdk-18/openjdk18-openshift">RHEL 7 with OpenJDK 8</link></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>RHEL 7</simpara></entry>
<entry align="left" valign="top"><simpara>OpenJDK 11</simpara></entry>
<entry align="left" valign="top"><simpara><link xl:href="https://access.redhat.com/containers/#/registry.access.redhat.com/openjdk/openjdk-11-rhel7">RHEL 7 with OpenJDK 11</link></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>RHEL 8</simpara></entry>
<entry align="left" valign="top"><simpara>OpenJDK 8</simpara></entry>
<entry align="left" valign="top"><simpara><link xl:href="https://access.redhat.com/containers/#/registry.access.redhat.com/openjdk/openjdk-8-rhel8">RHEL 8 with OpenJDK 8</link></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>RHEL 8</simpara></entry>
<entry align="left" valign="top"><simpara>OpenJDK 11</simpara></entry>
<entry align="left" valign="top"><simpara><link xl:href="https://access.redhat.com/containers/?tab=overview#/registry.access.redhat.com/openjdk/openjdk-11-rhel8">RHEL 8 with OpenJDK 11</link></simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<note>
<simpara>The use of a RHEL&#160;8-based container on a RHEL&#160;7 host, for example with OpenShift 3 or OpenShift 4, has limited support.
For more information, see the <link xl:href="https://access.redhat.com/support/policy/rhel-container-compatibility">Red Hat Enterprise Linux Container Compatibility Matrix</link>.</simpara>
</note>
</section>
<section xml:id="preparing-runtime-application-for-openshift-deplyoment_open-liberty">
<title>Preparing Open Liberty application for OpenShift deployment</title>
<simpara>For deploying your Open Liberty application to OpenShift, it must contain:</simpara>
<itemizedlist>
<listitem>
<simpara>Launcher profile information in the application’s <literal>pom.xml</literal> file.</simpara>
</listitem>
</itemizedlist>
<simpara>In the following procedure, a profile with Fabric8 Maven plugin is used for building and deploying the application to OpenShift.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>Maven is installed.</simpara>
</listitem>
<listitem>
<simpara>Docker or podman authentication into <link xl:href="https://access.redhat.com/containers/">Red Hat Container Catalog</link> to access RHEL 8 images.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Add the following content to the <literal>pom.xml</literal> file in the application root directory:</simpara>
</listitem>
<listitem>
<simpara>Replace the <literal>fabric8.generator.from</literal> property in the <literal>pom.xml</literal> file to specify OpenJDK image.</simpara>
<itemizedlist>
<listitem>
<simpara>RHEL 7 with OpenJDK 8</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;fabric8.generator.from&gt;registry.access.redhat.com/redhat-openjdk-18/openjdk18-openshift:latest&lt;/fabric8.generator.from&gt;</programlisting>
</listitem>
<listitem>
<simpara>RHEL 7 with OpenJDK 11</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;fabric8.generator.from&gt;registry.access.redhat.com/openjdk/openjdk-11-rhel7:latest&lt;/fabric8.generator.from&gt;</programlisting>
</listitem>
<listitem>
<simpara>RHEL 8 with OpenJDK 8</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;fabric8.generator.from&gt;registry.redhat.io/openjdk/openjdk-8-rhel8:latest&lt;/fabric8.generator.from&gt;</programlisting>
</listitem>
<listitem>
<simpara>RHEL 8 with OpenJDK 11</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;fabric8.generator.from&gt;registry.redhat.io/openjdk/openjdk-11-rhel8:latest&lt;/fabric8.generator.from&gt;</programlisting>
</listitem>
</itemizedlist>
</listitem>
</orderedlist>
</section>
<section xml:id="deploying-runtime-application-to-openshift-using-fabric8-maven-plugin_open-liberty">
<title>Deploying Open Liberty application to OpenShift using Fabric8 Maven plugin</title>
<simpara>To deploy your Open Liberty application to OpenShift, you must perform the following:</simpara>
<itemizedlist>
<listitem>
<simpara>Log in to your OpenShift instance.</simpara>
</listitem>
<listitem>
<simpara>Deploy the application to the OpenShift instance.</simpara>
</listitem>
</itemizedlist>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara><literal>oc</literal> CLI client installed.</simpara>
</listitem>
<listitem>
<simpara>Maven installed.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Log in to your OpenShift instance with the <literal>oc</literal> client.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ oc login ...</programlisting>
</listitem>
<listitem>
<simpara>Create a new project in the OpenShift instance.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ oc new-project MY_PROJECT_NAME</programlisting>
</listitem>
<listitem>
<simpara>Deploy the application to OpenShift using Maven from the application’s root directory. The root directory of an application contains the <literal>pom.xml</literal> file.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ mvn clean fabric8:deploy -Popenshift</programlisting>
<simpara>This command uses the Fabric8 Maven Plugin to launch the <link xl:href="https://docs.openshift.com/container-platform/latest/architecture/core_concepts/builds_and_image_streams.html#source-build">S2I process</link> on OpenShift and start the pod.</simpara>
</listitem>
<listitem>
<simpara>Verify the deployment.</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>Check the status of your application and ensure your pod is running.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ oc get pods -w
NAME                             READY     STATUS      RESTARTS   AGE
MY_APP_NAME-1-aaaaa               1/1       Running     0          58s
MY_APP_NAME-s2i-1-build           0/1       Completed   0          2m</programlisting>
<simpara>The <literal>MY_APP_NAME-1-aaaaa</literal> pod should have a status of <literal>Running</literal> once it is fully deployed and started.</simpara>
<simpara>Your specific pod name will vary.</simpara>
</listitem>
<listitem>
<simpara>Determine the route for the pod.</simpara>
<formalpara>
<title>Example Route Information</title>
<para>
<programlisting language="bash" linenumbering="unnumbered">$ oc get routes
NAME                 HOST/PORT                                                     PATH      SERVICES        PORT      TERMINATION
MY_APP_NAME         MY_APP_NAME-MY_PROJECT_NAME.OPENSHIFT_HOSTNAME      MY_APP_NAME      8080</programlisting>
</para>
</formalpara>
<simpara>The route information of a pod gives you the base URL which you use to access it.</simpara>
<simpara>In this example, <literal>http://MY_APP_NAME-MY_PROJECT_NAME.OPENSHIFT_HOSTNAME</literal> is the base URL to access the application.</simpara>
</listitem>
<listitem>
<simpara>Verify that your application is running in OpenShift.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ curl http://MY_APP_NAME-MY_PROJECT_NAME.OPENSHIFT_HOSTNAME
Greetings!</programlisting>
</listitem>
</orderedlist>
</listitem>
</orderedlist>
</section>
</section>
<section xml:id="deploying-runtime-application-to-stand-alone-red-hat-enterprise-linux_open-liberty">
<title>Deploying Open Liberty application to stand-alone Red Hat Enterprise Linux</title>
<simpara>To deploy your Open Liberty application to stand-alone Red&#160;Hat Enterprise Linux, configure the <literal>pom.xml</literal> file in the application, package it using Maven and deploy using the <literal>java -jar</literal> command.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>RHEL 7 or RHEL 8 installed.</simpara>
</listitem>
</itemizedlist>
<section xml:id="preparing-runtime-application-for-stand-alone-red-hat-enterprise-linux_open-liberty">
<title>Preparing Open Liberty application for stand-alone Red Hat Enterprise Linux deployment</title>
<simpara>For deploying your Open Liberty application to stand-alone Red Hat Enterprise Linux, you must first package the application using Maven.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>Maven installed.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Add the following content to the <literal>pom.xml</literal> file in the application&#8217;s root directory:</simpara>
<programlisting language="xml" linenumbering="unnumbered">  ...
  &lt;build&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;io.openliberty&lt;/groupId&gt;
        &lt;artifactId&gt;liberty-maven-plugin&lt;/artifactId&gt;
        &lt;version&gt;${liberty-maven-plugin.version}&lt;/version&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/build&gt;
  ...</programlisting>
</listitem>
<listitem>
<simpara>Package your application using Maven.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ mvn clean package</programlisting>
<simpara>The resulting JAR file is in the <literal>target</literal> directory.</simpara>
</listitem>
</orderedlist>
</section>
<section xml:id="deploying-runtime-application-to-stand-alone-red-hat-enterprise-linux-using-jar_open-liberty">
<title>Deploying Open Liberty application to stand-alone Red Hat Enterprise Linux using jar</title>
<simpara>To deploy your Open Liberty application to stand-alone Red&#160;Hat Enterprise Linux, use <literal>java -jar</literal> command.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>RHEL 7 or RHEL 8 installed.</simpara>
</listitem>
<listitem>
<simpara>OpenJDK 8 or OpenJDK 11 installed.</simpara>
</listitem>
<listitem>
<simpara>A JAR file with the application.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Deploy the JAR file with the application.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ java -jar my-app-fat.jar</programlisting>
</listitem>
<listitem>
<simpara>Verify the deployment.</simpara>
<simpara>Use <literal>curl</literal> or your browser to verify your application is running at <literal><link xl:href="http://localhost:8080">http://localhost:8080</link></literal>:</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ curl http://localhost:8080</programlisting>
</listitem>
</orderedlist>
</section>
</section>
</section>
<section xml:id="_debugging">
<title>Debugging</title>
<simpara>This sections contains information about debugging your Open Liberty&#x2013;based application both in local and remote deployments.</simpara>
<section xml:id="_remote_debugging">
<title>Remote debugging</title>
<simpara>To remotely debug an application, you must first configure it to start in a debugging mode, and then attach a debugger to it.</simpara>
<section xml:id="starting-your-application-locally-in-debugging-mode_open-liberty">
<title>Starting your application locally in debugging mode</title>
<simpara>One of the ways of debugging a Maven-based project is manually launching the application while specifying a debugging port, and subsequently connecting a remote debugger to that port.
This method is applicable at least to the following deployments of the application:</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>A Maven-based application</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>In a console, navigate to the directory with your application.</simpara>
</listitem>
<listitem>
<simpara>Launch your application and specify the debug port using the <literal>-DWLP_DEBUG_ADDRESS</literal> argument:</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ mvn liberty:debug -DWLP_DEBUG_ADDRESS=$PORT_NUMBER</programlisting>
<simpara>Here, <literal>$PORT_NUMBER</literal> is an unused port number of your choice.
Remember this number for the remote debugger configuration.</simpara>
</listitem>
</orderedlist>
</section>
<section xml:id="starting-an-uberjar-in-debugging-mode_open-liberty">
<title>Starting an uberjar in debugging mode</title>
<simpara>If you chose to package your application as a Open Liberty uberjar, debug it by executing it with the following parameters.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>An uberjar with your application</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>In a console, navigate to the directory with the uberjar.</simpara>
</listitem>
<listitem>
<simpara>Execute the uberjar with the following parameters.
Ensure that all the parameters are specified before the name of the uberjar on the line.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ java -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=$PORT_NUMBER -jar $UBERJAR_FILENAME</programlisting>
<simpara><literal>$PORT_NUMBER</literal> is an unused port number of your choice.
Remember this number for the remote debugger configuration.</simpara>
<simpara>If you want the JVM to pause and wait for remote debugger connection before it starts the application, change <literal>suspend</literal> to <literal>y</literal>.</simpara>
</listitem>
</orderedlist>
</section>
<section xml:id="starting-your-application-on-openshift-in-debugging-mode_open-liberty">
<title>Starting your application on OpenShift in debugging mode</title>
<simpara>To debug your Open Liberty-based application on OpenShift remotely, you must set the <literal>JAVA_DEBUG</literal> environment variable inside the container to <literal>true</literal> and configure port forwarding so that you can connect to your application from a remote debugger.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>Your application running on OpenShift.</simpara>
</listitem>
<listitem>
<simpara>The <literal>oc</literal> binary installed on your machine.</simpara>
</listitem>
<listitem>
<simpara>The ability to execute the <literal>oc port-forward</literal> command in your target OpenShift environment.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Using the <literal>oc</literal> command, list the available deployment configurations:</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ oc get dc</programlisting>
</listitem>
<listitem>
<simpara>Set the <literal>JAVA_DEBUG</literal> environment variable in the deployment configuration of your application to <literal>true</literal>, which configures the JVM to open the port number <literal>7777</literal> for debugging.
For example:</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ oc set env dc/MY_APP_NAME JAVA_DEBUG=true</programlisting>
</listitem>
<listitem>
<simpara>Redeploy the application if it is not set to redeploy automatically on configuration change. For example:</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ oc rollout latest dc/MY_APP_NAME</programlisting>
</listitem>
<listitem>
<simpara>Configure port forwarding from your local machine to the application pod:</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>List the currently running pods and find one containing your application:</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ oc get pod
NAME                            READY     STATUS      RESTARTS   AGE
MY_APP_NAME-3-1xrsp          0/1       Running     0          6s
...</programlisting>
</listitem>
<listitem>
<simpara>Configure port forwarding:</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ oc port-forward MY_APP_NAME-3-1xrsp $LOCAL_PORT_NUMBER:7777</programlisting>
<simpara>Here, <literal>$LOCAL_PORT_NUMBER</literal> is an unused port number of your choice on your local machine.
Remember this number for the remote debugger configuration.</simpara>
</listitem>
</orderedlist>
</listitem>
<listitem>
<simpara>When you are done debugging, unset the <literal>JAVA_DEBUG</literal> environment variable in your application pod. For example:</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ oc set env dc/MY_APP_NAME JAVA_DEBUG-</programlisting>
</listitem>
</orderedlist>
<formalpara>
<title>Additional resources</title>
<para>You can also set the <literal>JAVA_DEBUG_PORT</literal> environment variable if you want to change the debug port from the default, which is <literal>7777</literal>.</para>
</formalpara>
</section>
<section xml:id="attaching-a-remote-debugger-to-the-application_open-liberty">
<title>Attaching a remote debugger to the application</title>
<simpara>When your application is configured for debugging, attach a remote debugger of your choice to it.
In this guide, <link xl:href="https://www.redhat.com/en/technologies/jboss-middleware/developer-studio">Red Hat CodeReady Studio</link> is covered, but the procedure is similar when using other programs.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>The application running either locally or on OpenShift, and configured for debugging.</simpara>
</listitem>
<listitem>
<simpara>The port number that your application is listening on for debugging.</simpara>
</listitem>
<listitem>
<simpara>Red Hat CodeReady Studio installed on your machine. You can download it from the <link xl:href="https://developers.redhat.com/products/devstudio/download/">Red Hat CodeReady Studio download page</link>.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Start Red Hat CodeReady Studio.</simpara>
</listitem>
<listitem>
<simpara>Create a new debug configuration for your application:</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>Click <emphasis role="strong">Run&#8594;Debug Configurations</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>In the list of configurations, double-click <emphasis role="strong">Remote Java application.</emphasis>
This creates a new remote debugging configuration.</simpara>
</listitem>
<listitem>
<simpara>Enter a suitable name for the configuration in the <emphasis role="strong">Name</emphasis> field.</simpara>
</listitem>
<listitem>
<simpara>Enter the path to the directory with your application into the <emphasis role="strong">Project</emphasis> field. You can use the <emphasis role="strong">Browse&#8230;&#8203;</emphasis> button for convenience.</simpara>
</listitem>
<listitem>
<simpara>Set the <emphasis role="strong">Connection Type</emphasis> field to <emphasis>Standard (Socket Attach)</emphasis> if it is not already.</simpara>
</listitem>
<listitem>
<simpara>Set the <emphasis role="strong">Port</emphasis> field to the port number that your application is listening on for debugging.</simpara>
</listitem>
<listitem>
<simpara>Click <emphasis role="strong">Apply.</emphasis></simpara>
</listitem>
</orderedlist>
</listitem>
<listitem>
<simpara>Start debugging by clicking the <emphasis role="strong">Debug</emphasis> button in the Debug Configurations window.</simpara>
<simpara>To quickly launch your debug configuration after the first time, click <emphasis role="strong">Run&#8594;Debug History</emphasis> and select the configuration from the list.</simpara>
</listitem>
</orderedlist>
<itemizedlist>
<title>Additional resources</title>
<listitem>
<simpara><link xl:href="https://access.redhat.com/articles/1290703">Debug an OpenShift Java Application with JBoss Developer Studio</link> on Red Hat Knowledgebase.</simpara>
<simpara>Red Hat CodeReady Studio was previously called JBoss Developer Studio.</simpara>
</listitem>
<listitem>
<simpara>A <link xl:href="https://blog.openshift.com/debugging-java-applications-on-openshift-kubernetes/">Debugging Java Applications On OpenShift and Kubernetes</link> article on OpenShift Blog.</simpara>
</listitem>
</itemizedlist>
</section>
</section>
<section xml:id="_debug_logging">
<title>Debug logging</title>
<section xml:id="add-debug-logging_open-liberty">
<title>Add debug logging</title>
<simpara>This example uses the <link xl:href="https://www.npmjs.com/package/debug">debug package</link>, but there are also <link xl:href="https://www.npmjs.com/search?q=log">other packages available</link> that can handle debug logging.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>An application you want to debug. For example, <link linkend="example-rest-http-nodejs">an example</link>.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Add the <literal>debug</literal> logging definition.</simpara>
<programlisting language="javascript" linenumbering="unnumbered">const debug = require('debug')('myexample');</programlisting>
</listitem>
<listitem>
<simpara>Add debug statements.</simpara>
<programlisting language="javascript" linenumbering="unnumbered">app.use('/api/greeting', (request, response) =&gt; {
  const name = request.query ? request.query.name : undefined;
  //log name in debugging
  debug('name: '+name);
  response.send({content: `Hello, ${name || 'World'}`});
});</programlisting>
</listitem>
<listitem>
<simpara>Add the <link xl:href="https://www.npmjs.com/package/debug">debug</link> module to <literal>package.json</literal>.</simpara>
<programlisting language="json" linenumbering="unnumbered">...
"dependencies": {
    "debug": "^3.1.0"
  }</programlisting>
<simpara>Depending on your application, this module may already be included. For example, when using the <link xl:href="https://expressjs.com/en/starter/generator.html">express generator</link> to create your application, the <literal>debug</literal> module is already added to <literal>package.json</literal>. Some of the example applications, such as the <link linkend="example-rest-http-nodejs">REST API Level 0 example</link>, already have the <literal>debug</literal> module in the <literal>package.json</literal> file.</simpara>
</listitem>
<listitem>
<simpara>Install the application dependencies.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ npm install</programlisting>
</listitem>
</orderedlist>
</section>
<section xml:id="accessing-debug-logs-on-localhost_open-liberty">
<title>Accessing debug logs on localhost</title>
<simpara>Use the <literal>DEBUG</literal> environment variable when starting your application to enable debug logging.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>An application with debug logging.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Set the <literal>DEBUG</literal> environment variable when starting your application to enable debug logging.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ DEBUG=myexample npm start</programlisting>
<simpara>The <literal>debug</literal> module can use <link xl:href="https://www.npmjs.com/package/debug#wildcards">wildcards</link> to filter debugging messages. This is set using the <literal>DEBUG</literal> environment variable.</simpara>
</listitem>
<listitem>
<simpara>Test your application to invoke debug logging.</simpara>
<simpara>For example, when debug logging in the <link linkend="example-rest-http-nodejs">REST API Level 0 example</link> is set to log the <literal>name</literal> variable in the <literal>/api/greeting</literal> method:</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ curl http://localhost:8080/api/greeting?name=Sarah</programlisting>
</listitem>
<listitem>
<simpara>View your application logs to see your debug messages.</simpara>
<screen linenumbering="unnumbered">myexample name: Sarah +3m</screen>
</listitem>
</orderedlist>
</section>
<section xml:id="accessing-debug-logs-on-openshift_open-liberty">
<title>Accessing debug logs on OpenShift</title>
<simpara>Start your application and interact with it to see the debugging statements in OpenShift.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>A Maven-based application with debug logging enabled.</simpara>
</listitem>
<listitem>
<simpara>The <literal>oc</literal> CLI client installed and authenticated.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Deploy your application to OpenShift:</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ mvn clean fabric8:deploy -Popenshift</programlisting>
</listitem>
<listitem>
<simpara>View the logs:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Get the name of the pod with your application:</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ oc get pods</programlisting>
</listitem>
<listitem>
<simpara>Start watching the log output:</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ oc logs -f pod/MY_APP_NAME-2-aaaaa</programlisting>
<simpara>Keep the terminal window displaying the log output open so that you can watch the log output.</simpara>
</listitem>
</orderedlist>
</listitem>
<listitem>
<simpara>Interact with your application:</simpara>
<simpara>For example, if you had debug logging in the <link linkend="example-rest-http-open-liberty">REST API Level 0 example</link> to log the <literal>message</literal> variable in the <literal>/api/greeting</literal> method:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Get the route of your application:</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ oc get routes</programlisting>
</listitem>
<listitem>
<simpara>Make an HTTP request on the <literal>/api/greeting</literal> endpoint of your application:</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ curl $APPLICATION_ROUTE/api/greeting?name=Sarah</programlisting>
</listitem>
</orderedlist>
</listitem>
<listitem>
<simpara>Return to the window with your pod logs and inspect debug logging messages in the logs.</simpara>

</listitem>
</orderedlist>
</section>
</section>
</section>
<section xml:id="_monitoring_your_application">
<title>Monitoring your application</title>
<simpara>This section contains information about monitoring your Open Liberty&#x2013;based application running on OpenShift.</simpara>
<section xml:id="_accessing_jvm_metrics_for_your_application_on_openshift">
<title>Accessing JVM metrics for your application on OpenShift</title>
<section xml:id="accessing-jvm-metrics-using-jolokia-on-openshift_open-liberty">
<title>Accessing JVM metrics using Jolokia on OpenShift</title>
<simpara><link xl:href="https://jolokia.org/documentation.html">Jolokia</link> is a built-in lightweight solution for accessing JMX (Java Management Extension) metrics over HTTP on OpenShift.
Jolokia allows you to access CPU, storage, and memory usage data collected by JMX over an HTTP bridge.
Jolokia uses a REST interface and JSON-formatted message payloads.
It is suitable for monitoring cloud applications thanks to its comparably high speed and low resource requirements.</simpara>
<simpara>For Java-based applications, the OpenShift Web console provides the integrated <link xl:href="https://docs.openshift.com/container-platform/3.6/architecture/infrastructure_components/web_console.html#jvm-console"><emphasis>hawt.io</emphasis> console</link> that collects and displays all relevant metrics output by the JVM running your application.</simpara>
<itemizedlist>
<title>Prerequistes</title>
<listitem>
<simpara>the <literal>oc</literal> client authenticated</simpara>
</listitem>
<listitem>
<simpara>a Java-based application container running in a project on OpenShift</simpara>
</listitem>
<listitem>
<simpara>latest <link xl:href="https://github.com/jboss-container-images/redhat-openjdk-18-openshift-image/blob/openjdk18-dev/image.yaml">JDK 1.8.0 image</link></simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>List the deployment configurations of the pods inside your project and select the one that corresponds to your application.</simpara>
<programlisting language="bash" linenumbering="unnumbered">oc get dc</programlisting>
<screen>NAME         REVISION   DESIRED   CURRENT   TRIGGERED BY
MY_APP_NAME   2          1         1         config,image(my-app:6)
...</screen>
</listitem>
<listitem>
<simpara>Open the YAML deployment template of the pod running your application for editing.</simpara>
<programlisting language="bash" linenumbering="unnumbered">oc edit dc/MY_APP_NAME</programlisting>
</listitem>
<listitem>
<simpara>Add the following entry to the <literal>ports</literal> section of the template and save your changes:</simpara>
<programlisting language="yaml" linenumbering="unnumbered">...
spec:
  ...
  ports:
  - containerPort: 8778
    name: jolokia
    protocol: TCP
  ...
...</programlisting>
</listitem>
<listitem>
<simpara>Redeploy the pod running your application.</simpara>
<programlisting language="bash" linenumbering="unnumbered">oc rollout latest dc/MY_APP_NAME</programlisting>
<simpara>The pod is redeployed with the updated deployment configuration and exposes the port <literal>8778</literal>.</simpara>
</listitem>
<listitem>
<simpara>Log into the OpenShift Web console.</simpara>
</listitem>
<listitem>
<simpara>In the sidebar, navigate to <emphasis>Applications</emphasis> &gt; <emphasis>Pods</emphasis>, and click on the name of the pod running your application.</simpara>
</listitem>
<listitem>
<simpara>In the pod details screen, click <emphasis>Open Java Console</emphasis> to access the hawt.io console.</simpara>
</listitem>
</orderedlist>
<itemizedlist>
<title>Additional resources</title>
<listitem>
<simpara><link xl:href="http://hawt.io/docs/index.html">hawt.io documentation</link></simpara>
</listitem>
</itemizedlist>
</section>
</section>
<section xml:id="exposing-metrics-using-prometheus-with-open-liberty_open-liberty">
<title>Exposing application metrics using Prometheus with Open Liberty</title>
<simpara>In this example, you:</simpara>
<itemizedlist>
<listitem>
<simpara>Configure your application to expose metrics.</simpara>
</listitem>
<listitem>
<simpara>Collect and view the data using Prometheus.</simpara>
</listitem>
</itemizedlist>
<simpara>Prometheus actively connects to a monitored application to collect data; the application does not actively send metrics to a server.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>Prometheus configured to collect metrics from the application:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Download and extract the <link xl:href="https://prometheus.io/download/">archive</link> with the latest Prometheus release:</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ wget https://github.com/prometheus/prometheus/releases/download/v2.4.3/prometheus-2.4.3.linux-amd64.tar.gz
$ tar -xvf  prometheus-2.4.3.linux-amd64.tar.gz</programlisting>
</listitem>
<listitem>
<simpara>Navigate to the directory with Prometheus:</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ cd  prometheus-2.4.3.linux-amd64</programlisting>
</listitem>
<listitem>
<simpara>Append the following snippet to the <literal>prometheus.yml</literal> file to specify the port where your application exposes the metrics endpoint.</simpara>
<simpara>The <literal>scrape_interval</literal> setting is optional and sets Prometheus to collect metrics every 5 seconds.</simpara>
<programlisting language="yaml" linenumbering="unnumbered">  - job_name: 'open-liberty'
    metrics_path: '/metrics'
    scrape_interval: 5s
    scheme: https
    basic_auth:
      username: 'admin'
      password: 'admin'

    tls_config:
      insecure_skip_verify: true
    static_configs:
    - targets: ['localhost:9443']</programlisting>
<simpara>Open Liberty-based applications with the MicroProfile Metrics feature enabled expose metrics at the <literal>/metrics</literal> endpoint.</simpara>
<simpara>The endpoint is secured by default.
To ensure that metrics collection works in your application, you must define a user registry in the Liberty configuration and include authentication information in your Prometheus metrics collection endpoint.
*</simpara>
</listitem>
</orderedlist>
<screen>    &lt;basicRegistry realm="MicroProfileMetrics"&gt;
        &lt;user name="admin" password="admin"/&gt;
    &lt;/basicRegistry&gt;

    &lt;keyStore id="defaultKeyStore" password="Liberty"/&gt;

    &lt;administrator-role&gt;
       &lt;user&gt;admin&lt;/user&gt;
    &lt;/administrator-role&gt;</screen>
</listitem>
<listitem>
<simpara>The Prometheus server started on <literal>localhost</literal>:</simpara>
<simpara>Start Prometheus and wait until the <literal>Server is ready to receive web requests</literal> message is displayed in the console.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ ./prometheus</programlisting>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Collect metrics from your application:</simpara>
</listitem>
<listitem>
<simpara>Annotate methods or classes with the <literal>@org.eclipse.microprofile.metrics.annotation.Timed</literal> annotation, for example:</simpara>
<programlisting language="java" linenumbering="unnumbered">@Path("/")
@ApplicationScoped
public class GreetingEndpoint{

    @Path("/greeting")
    @Timed(name = "greetingRequestTime",
           absolute = true,
           description = "Time needed to get the greeting")
    public String get() {
        return "Hello from a timed endpoint";
    }
}</programlisting>
<simpara>The <literal>@Timed</literal> annotation is used to keep track of the time it takes to invoke the metered endpoint.</simpara>
</listitem>
<listitem>
<simpara>Compile and launch your application:</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ mvn install liberty:run</programlisting>
</listitem>
<listitem>
<simpara>Invoke the traced endpoint several times:</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ curl http://localhost:9080/greeting
Hello from a timed endpoint</programlisting>
</listitem>
<listitem>
<simpara>Wait at least 15 seconds for the collection to happen, and see the metrics in Prometheus UI:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Open the Prometheus UI at <link xl:href="http://localhost:9090/">http://localhost:9090/</link> and type <literal>requests</literal> into the <emphasis>Expression</emphasis> box.</simpara>
</listitem>
<listitem>
<simpara>From the suggestions, select for example <literal>http.server.requests</literal> and click <emphasis>Execute</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>In the table that is displayed, you can see how long it takes to invoke the metered endpoint.</simpara>
</listitem>
</orderedlist>
<simpara>Note that all metrics you created are prefixed with <literal>application:</literal>.
There are other metrics, automatically exposed by Open Liberty.
Those metrics are prefixed with <literal>base:</literal> and <literal>vendor:</literal> and expose information about the JVM in which the application runs.</simpara>
</listitem>
</orderedlist>
<itemizedlist>
<title>Additional resources</title>
<listitem>
<simpara>For additional information on using MicroProfile Metrics with Open Liberty, see <link xl:href="https://openliberty.io/guides/microprofile-metrics.html">Open Liberty MicroProfile Metrics Guide</link>.</simpara>
</listitem>
</itemizedlist>
</section>
</section>
<appendix xml:id="the-source-to-image-s2i-build-process">
<title>The Source-to-Image (S2I) build process</title>
<simpara><link xl:href="https://docs.openshift.com/container-platform/latest/architecture/core_concepts/builds_and_image_streams.html#source-build">Source-to-Image</link> (S2I) is a build tool for generating reproducible Docker-formatted container images from online SCM repositories with application sources.
With S2I builds, you can easily deliver the latest version of your application into production with shorter build times, decreased resource and network usage, improved security, and a number of other advantages.
OpenShift supports multiple <link xl:href="https://docs.openshift.com/container-platform/latest/dev_guide/builds/index.html">build strategies and input sources</link>.</simpara>
<simpara>For more information, see the <link xl:href="https://docs.openshift.com/container-platform/latest/architecture/core_concepts/builds_and_image_streams.html#source-build">Source-to-Image (S2I) Build</link> chapter of the OpenShift Container Platform documentation.</simpara>
<simpara>You must provide three elements to the S2I process to assemble the final container image:</simpara>
<itemizedlist>
<listitem>
<simpara>The application sources hosted in an online SCM repository, such as GitHub.</simpara>
</listitem>
<listitem>
<simpara>The S2I Builder image, which serves as the foundation for the assembled image and provides the ecosystem in which your application is running.</simpara>
</listitem>
<listitem>
<simpara>Optionally, you can also provide environment variables and parameters that are used by <link xl:href="https://docs.openshift.com/container-platform/latest/creating_images/s2i.html">S2I scripts</link>.</simpara>
</listitem>
</itemizedlist>
<simpara>The process injects your application source and dependencies into the Builder image according to instructions specified in the S2I script, and generates a Docker-formatted container image that runs the assembled application.
For more information, check the <link xl:href="https://docs.openshift.com/container-platform/latest/creating_images/s2i.html">S2I build requirements</link>, <link xl:href="https://docs.openshift.com/container-platform/latest/dev_guide/builds/build_strategies.html#source-to-image-strategy-options">build options</link>
and <link xl:href="https://docs.openshift.com/container-platform/3.6/dev_guide/builds/index.html">how builds work</link> sections of the OpenShift Container Platform documentation.</simpara>
</appendix>
<appendix xml:id="updating-the-deployment-configuration-of-an-example-application_open-liberty">
<title>Updating the deployment configuration of an example application</title>
<simpara>The deployment configuration for an example application contains information related to deploying and running the application in OpenShift, such as route information or readiness probe location.
The deployment configuration of an example application is stored in a set of YAML files.
For examples that use the Fabric8 Maven Plugin, the YAML files are located in the <literal>src/main/fabric8/</literal> directory. For examples using Nodeshift, the YAML files are located in the <literal>.nodeshift</literal> directory.</simpara>
<important>
<simpara>The deployment configuration files used by the Fabric8 Maven Plugin and Nodeshift do not have to be full OpenShift resource definitions.
Both Fabric8 Maven Plugin and Nodeshift can take the deployment configuration files and add some missing information to create a full OpenShift resource definition.
The resource definitions generated by the Fabric8 Maven Plugin are available in the <literal>target/classes/META-INF/fabric8/</literal> directory.
The resource definitions generated by Nodeshift are available in the <literal>tmp/nodeshift/resource/</literal> directory.</simpara>
</important>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>An existing example project.</simpara>
</listitem>
<listitem>
<simpara>The <literal>oc</literal> CLI client installed.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Edit an existing YAML file or create an additional YAML file with your configuration update.</simpara>
<itemizedlist>
<listitem>
<simpara>For example, if your example already has a YAML file with a <literal>readinessProbe</literal> configured, you could change the <literal>path</literal> value to a different available path to check for readiness:</simpara>
<programlisting language="yaml" linenumbering="unnumbered">spec:
  template:
    spec:
      containers:
        readinessProbe:
          httpGet:
            path: /path/to/probe
            port: 8080
            scheme: HTTP
...</programlisting>
</listitem>
<listitem>
<simpara>If a <literal>readinessProbe</literal> is not configured in an existing YAML file, you can also create a new YAML file in the same directory with the <literal>readinessProbe</literal> configuration.</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>Deploy the updated version of your example using Maven or npm.</simpara>
</listitem>
<listitem>
<simpara>Verify that your configuration updates show in the deployed version of your example.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ oc export all --as-template='my-template'

apiVersion: v1
kind: Template
metadata:
  creationTimestamp: null
  name: my-template
objects:
- apiVersion: v1
  kind: DeploymentConfig
  ...
  spec:
    ...
    template:
      ...
      spec:
        containers:
          ...
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /path/to/different/probe
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 1
          ...</programlisting>
</listitem>
</orderedlist>
<formalpara>
<title>Additional resources</title>
<para>If you updated the configuration of your application directly using the web-based console or the <literal>oc</literal> CLI client, export and add these changes to your YAML file.
Use the <literal>oc export all</literal> command to show the configuration of your deployed application.</para>
</formalpara>
</appendix>
<appendix xml:id="configuring-a-jenkins-freestyle-project-to-deploy-your-application-with-the-fabric8-maven-plugin_open-liberty">
<title>Configuring a Jenkins freestyle project to deploy your application with the Fabric8 Maven Plugin</title>
<simpara>Similar to using Maven and the Fabric8 Maven Plugin from your local host to deploy an application, you can configure Jenkins to use Maven and the Fabric8 Maven Plugin to deploy an application.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>Access to an OpenShift cluster.</simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://docs.openshift.org/latest/using_images/other_images/jenkins.html">The Jenkins container image</link> running on same OpenShift cluster.</simpara>
</listitem>
<listitem>
<simpara>A JDK and Maven installed and configured on your Jenkins server.</simpara>
</listitem>
<listitem>
<simpara>An application configured to use Maven, the Fabric8 Maven Plugin, and the Red Hat base image in the <literal>pom.xml</literal>.</simpara>
<note>
<simpara>For building and deploying your applications to OpenShift, Spring Boot 2.1.x only supports builder images based on OpenJDK 8 and OpenJDK 11.
Oracle JDK and OpenJDK 9 builder images are not supported.</simpara>
</note>
<formalpara>
<title>Example <literal>pom.xml</literal></title>
<para>
<programlisting language="xml" linenumbering="unnumbered">&lt;properties&gt;
  ...
  &lt;fabric8.generator.from&gt;registry.access.redhat.com/redhat-openjdk-18/openjdk18-openshift:latest&lt;/fabric8.generator.from&gt;
&lt;/properties&gt;</programlisting>
</para>
</formalpara>
</listitem>
<listitem>
<simpara>The source of the application available in GitHub.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Create a new OpenShift project for your application:</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>Open the OpenShift Web console and log in.</simpara>
</listitem>
<listitem>
<simpara>Click <emphasis>Create Project</emphasis> to create a new OpenShift project.</simpara>
</listitem>
<listitem>
<simpara>Enter the project information and click <emphasis>Create</emphasis>.</simpara>
</listitem>
</orderedlist>
</listitem>
<listitem>
<simpara>Ensure Jenkins has access to that project.</simpara>
<simpara>For example, if you configured a service account for Jenkins, ensure that account has <literal>edit</literal> access to the project of your application.</simpara>
</listitem>
<listitem>
<simpara>Create a new <link xl:href="https://wiki.jenkins.io/display/JENKINS/Building+a+software+project#Buildingasoftwareproject-Settinguptheproject">freestyle Jenkins project</link> on your Jenkins server:</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>Click <emphasis>New Item</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>Enter a name, choose <emphasis>Freestyle project</emphasis>, and click <emphasis>OK</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>Under <emphasis>Source Code Management</emphasis>, choose <emphasis>Git</emphasis> and add the GitHub url of your application.</simpara>
</listitem>
<listitem>
<simpara>Under <emphasis>Build</emphasis>, choose <emphasis>Add build step</emphasis> and select <literal>Invoke top-level Maven targets</literal>.</simpara>
</listitem>
<listitem>
<simpara>Add the following to <emphasis>Goals</emphasis>:</simpara>
<programlisting language="bash" linenumbering="unnumbered">clean fabric8:deploy -Popenshift -Dfabric8.namespace=MY_PROJECT</programlisting>
<simpara>Substitute <literal>MY_PROJECT</literal> with the name of the OpenShift project for your application.</simpara>
</listitem>
<listitem>
<simpara>Click <emphasis>Save</emphasis>.</simpara>
</listitem>
</orderedlist>
</listitem>
<listitem>
<simpara>Click <emphasis>Build Now</emphasis> from the main page of the Jenkins project to verify your application builds and deploys to the OpenShift project for your application.</simpara>
<simpara>You can also verify that your application is deployed by opening the route in the OpenShift project of the application.</simpara>
</listitem>
</orderedlist>
<bridgehead xml:id="_next_steps" renderas="sect2">Next steps</bridgehead>
<itemizedlist>
<listitem>
<simpara>Consider adding <link xl:href="https://wiki.jenkins.io/display/JENKINS/Github+Plugin#GitHubPlugin-GitHubhooktriggerforGITScmpolling">GITSCM polling</link> or using <link xl:href="https://wiki.jenkins.io/display/JENKINS/Building+a+software+project#Buildingasoftwareproject-Buildsbysourcechanges">the <literal>Poll SCM</literal> build trigger</link>. These options enable builds to run every time a new commit is pushed to the GitHub repository.</simpara>
</listitem>
<listitem>
<simpara>Consider adding a build step that executes tests before deploying.</simpara>
</listitem>
</itemizedlist>
</appendix>
<appendix xml:id="additional-openliberty-resources_open-liberty">
<title>Additional Open Liberty resources</title>
<itemizedlist>
<listitem>
<simpara><link xl:href="https://docs.openshift.org/latest/architecture/">OpenShift Architecture Overview</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://openliberty.io">Open Liberty Project</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://openliberty.io/docs/">Open Liberty Documentation </link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://openliberty.io/guides/">Open Liberty Guides</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://github.com/fabric8io/fabric8-maven-plugin/">Fabric8 Maven Plugin</link></simpara>
</listitem>
</itemizedlist>
</appendix>
<appendix xml:id="application-development-resources">
<title>Application development resources</title>
<simpara>For additional information about application development with OpenShift, see:</simpara>
<itemizedlist>
<listitem>
<simpara><link xl:href="https://learn.openshift.com/">OpenShift Interactive Learning Portal</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://developers.redhat.com/products/rhoar/overview/">Red Hat OpenShift Application Runtimes Overview</link></simpara>
</listitem>
</itemizedlist>
<simpara>To reduce network load and shorten the build time of your application, set up a Nexus mirror for Maven on your Minishift or CDK:</simpara>
<itemizedlist>
<listitem>
<simpara><link xl:href="https://docs.openshift.com/container-platform/3.11/dev_guide/dev_tutorials/maven_tutorial.html">Setting Up a Nexus Mirror for Maven</link></simpara>
</listitem>
</itemizedlist>
</appendix>
<appendix xml:id="proficiency-levels">
<title>Proficiency levels</title>
<simpara>Each available example teaches concepts that require certain minimum knowledge. This requirement varies by example. The minimum requirements and concepts are organized in several levels of proficiency. In addition to the levels described here, you might need additional information specific to each example.</simpara>
<bridgehead xml:id="proficiency_foundational" renderas="sect2">Foundational</bridgehead>
<simpara>The examples rated at Foundational proficiency generally require no prior knowledge of the subject matter; they provide general awareness and demonstration of key elements, concepts, and terminology. There are no special requirements except those directly mentioned in the description of the example.</simpara>
<bridgehead xml:id="proficiency_advanced" renderas="sect2">Advanced</bridgehead>
<simpara>When using Advanced examples, the assumption is that you are familiar with the common concepts and terminology of the subject area of the example in addition to Kubernetes and OpenShift. You must also be able to perform basic tasks on your own, for example, configuring services and applications, or administering networks. If a service is needed by the example, but configuring it is not in the scope of the example, the assumption is that you have the knowledge to properly configure it, and only the resulting state of the service is described in the documentation.</simpara>
<bridgehead xml:id="proficiency_expert" renderas="sect2">Expert</bridgehead>
<simpara>Expert examples require the highest level of knowledge of the subject matter. You are expected to perform many tasks based on feature-based documentation and manuals, and the documentation is aimed at most complex scenarios.</simpara>
</appendix>
<appendix xml:id="glossary">
<title>Glossary</title>
<section xml:id="_product_and_project_names">
<title>Product and project names</title>
<variablelist>
<varlistentry>
<term>developers.redhat.com/launch</term>
<listitem>
<simpara><link xl:href="https://developers.redhat.com/launch">developers.redhat.com/launch</link> is a stand-alone getting started experience offered by Red Hat for jumpstarting cloud-native application development on OpenShift. It provides a way of creating functional example applications as well as an easy way to build and deploy these example applications on OpenShift.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Fabric8 Launcher</term>
<listitem>
<simpara>The Fabric8 Launcher is the upstream project on which <link xl:href="https://developers.redhat.com/launch">developers.redhat.com/launch</link> is based.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Minishift or CDK</term>
<listitem>
<simpara>An OpenShift cluster running on your machine using Minishift.</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
<section xml:id="_terms_specific_to_fabric8_launcher">
<title>Terms specific to Fabric8 Launcher</title>
<variablelist xml:id="glossary_example">
<varlistentry>
<term>Example</term>
<listitem>
<simpara>An application specification, for example <emphasis>a web service with a REST API.</emphasis></simpara>
<simpara>Examples generally do not specify which language or platform they should run on; the description only contains the intended functionality.</simpara>
</listitem>
</varlistentry>
</variablelist>
<variablelist xml:id="glossary_example_application">
<varlistentry>
<term>Example application</term>
<listitem>
<simpara>A language-specific implementation of a particular <link linkend="glossary_example">example</link> on a particular <link linkend="glossary_runtime">runtime</link>. Example applications are listed in an <link linkend="glossary_example_application_catalog">examples catalog</link>.</simpara>
<simpara>For example, an example application is a web service with a REST API implemented using the Thorntail runtime.</simpara>
</listitem>
</varlistentry>
</variablelist>
<variablelist xml:id="glossary_example_application_catalog">
<varlistentry>
<term>Examples Catalog</term>
<listitem>
<simpara>A Git repository that contains information about example applications.</simpara>
</listitem>
</varlistentry>
</variablelist>
<variablelist xml:id="glossary_runtime">
<varlistentry>
<term>Runtime</term>
<listitem>
<simpara>A platform that executes an <link linkend="glossary_example_application">example application</link>.
For example, Thorntail or Eclipse Vert.x.</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
</appendix>
</article>